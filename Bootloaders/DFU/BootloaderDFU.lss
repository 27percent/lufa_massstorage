
BootloaderDFU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00007ea6  00000f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea6  00007000  00007000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00007fa0  00007fa0  00000fdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00007fe0  00007fe0  00000ff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00007ff8  00007ff8  0000100c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001d  00800162  00800162  00001014  2**0
                  ALLOC
  6 .noinit       00000002  0080017f  0080017f  00001014  2**0
                  ALLOC
  7 .stab         00000204  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      00000119  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000248  00000000  00000000  00001348  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000465a  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a2e  00000000  00000000  00005bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ba8  00000000  00000000  00007618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000484  00000000  00000000  000091c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001ce2  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001a86  00000000  00000000  0000b326  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000310  00000000  00000000  0000cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	b4 c0       	rjmp	.+360    	; 0x716e <__bad_interrupt>
    7006:	00 00       	nop
    7008:	b2 c0       	rjmp	.+356    	; 0x716e <__bad_interrupt>
    700a:	00 00       	nop
    700c:	b0 c0       	rjmp	.+352    	; 0x716e <__bad_interrupt>
    700e:	00 00       	nop
    7010:	ae c0       	rjmp	.+348    	; 0x716e <__bad_interrupt>
    7012:	00 00       	nop
    7014:	ac c0       	rjmp	.+344    	; 0x716e <__bad_interrupt>
    7016:	00 00       	nop
    7018:	aa c0       	rjmp	.+340    	; 0x716e <__bad_interrupt>
    701a:	00 00       	nop
    701c:	a8 c0       	rjmp	.+336    	; 0x716e <__bad_interrupt>
    701e:	00 00       	nop
    7020:	a6 c0       	rjmp	.+332    	; 0x716e <__bad_interrupt>
    7022:	00 00       	nop
    7024:	a4 c0       	rjmp	.+328    	; 0x716e <__bad_interrupt>
    7026:	00 00       	nop
    7028:	b1 c5       	rjmp	.+2914   	; 0x7b8c <__vector_10>
    702a:	00 00       	nop
    702c:	a0 c0       	rjmp	.+320    	; 0x716e <__bad_interrupt>
    702e:	00 00       	nop
    7030:	9e c0       	rjmp	.+316    	; 0x716e <__bad_interrupt>
    7032:	00 00       	nop
    7034:	9c c0       	rjmp	.+312    	; 0x716e <__bad_interrupt>
    7036:	00 00       	nop
    7038:	9a c0       	rjmp	.+308    	; 0x716e <__bad_interrupt>
    703a:	00 00       	nop
    703c:	98 c0       	rjmp	.+304    	; 0x716e <__bad_interrupt>
    703e:	00 00       	nop
    7040:	96 c0       	rjmp	.+300    	; 0x716e <__bad_interrupt>
    7042:	00 00       	nop
    7044:	94 c0       	rjmp	.+296    	; 0x716e <__bad_interrupt>
    7046:	00 00       	nop
    7048:	92 c0       	rjmp	.+292    	; 0x716e <__bad_interrupt>
    704a:	00 00       	nop
    704c:	90 c0       	rjmp	.+288    	; 0x716e <__bad_interrupt>
    704e:	00 00       	nop
    7050:	02 c2       	rjmp	.+1028   	; 0x7456 <__vector_20>
    7052:	00 00       	nop
    7054:	8c c0       	rjmp	.+280    	; 0x716e <__bad_interrupt>
    7056:	00 00       	nop
    7058:	8a c0       	rjmp	.+276    	; 0x716e <__bad_interrupt>
    705a:	00 00       	nop
    705c:	88 c0       	rjmp	.+272    	; 0x716e <__bad_interrupt>
    705e:	00 00       	nop
    7060:	86 c0       	rjmp	.+268    	; 0x716e <__bad_interrupt>
    7062:	00 00       	nop
    7064:	84 c0       	rjmp	.+264    	; 0x716e <__bad_interrupt>
    7066:	00 00       	nop
    7068:	82 c0       	rjmp	.+260    	; 0x716e <__bad_interrupt>
    706a:	00 00       	nop
    706c:	80 c0       	rjmp	.+256    	; 0x716e <__bad_interrupt>
    706e:	00 00       	nop
    7070:	7e c0       	rjmp	.+252    	; 0x716e <__bad_interrupt>
    7072:	00 00       	nop
    7074:	7c c0       	rjmp	.+248    	; 0x716e <__bad_interrupt>
    7076:	00 00       	nop
    7078:	7a c0       	rjmp	.+244    	; 0x716e <__bad_interrupt>
    707a:	00 00       	nop
    707c:	78 c0       	rjmp	.+240    	; 0x716e <__bad_interrupt>
    707e:	00 00       	nop
    7080:	76 c0       	rjmp	.+236    	; 0x716e <__bad_interrupt>
    7082:	00 00       	nop
    7084:	74 c0       	rjmp	.+232    	; 0x716e <__bad_interrupt>
    7086:	00 00       	nop
    7088:	72 c0       	rjmp	.+228    	; 0x716e <__bad_interrupt>
    708a:	00 00       	nop
    708c:	70 c0       	rjmp	.+224    	; 0x716e <__bad_interrupt>
    708e:	00 00       	nop
    7090:	6e c0       	rjmp	.+220    	; 0x716e <__bad_interrupt>
    7092:	00 00       	nop
    7094:	6c c0       	rjmp	.+216    	; 0x716e <__bad_interrupt>
    7096:	00 00       	nop
    7098:	6a c0       	rjmp	.+212    	; 0x716e <__bad_interrupt>
    709a:	00 00       	nop
    709c:	68 c0       	rjmp	.+208    	; 0x716e <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	66 c0       	rjmp	.+204    	; 0x716e <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	64 c0       	rjmp	.+200    	; 0x716e <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	62 c0       	rjmp	.+196    	; 0x716e <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS) & FUSE_BOOTRST)
    70b8:	e3 e0       	ldi	r30, 0x03	; 3
    70ba:	f0 e0       	ldi	r31, 0x00	; 0
    70bc:	89 e0       	ldi	r24, 0x09	; 9
    70be:	80 93 57 00 	sts	0x0057, r24
    70c2:	84 91       	lpm	r24, Z
    70c4:	8e 7f       	andi	r24, 0xFE	; 254
    70c6:	91 f0       	breq	.+36     	; 0x70ec <Application_Jump_Check+0x34>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
    70c8:	04 b6       	in	r0, 0x34	; 52
    70ca:	01 fe       	sbrs	r0, 1
    70cc:	0a c0       	rjmp	.+20     	; 0x70e2 <Application_Jump_Check+0x2a>
    70ce:	81 e0       	ldi	r24, 0x01	; 1
    70d0:	20 91 7f 01 	lds	r18, 0x017F
    70d4:	30 91 80 01 	lds	r19, 0x0180
    70d8:	22 34       	cpi	r18, 0x42	; 66
    70da:	3c 4d       	sbci	r19, 0xDC	; 220
    70dc:	19 f0       	breq	.+6      	; 0x70e4 <Application_Jump_Check+0x2c>
    70de:	80 e0       	ldi	r24, 0x00	; 0
    70e0:	01 c0       	rjmp	.+2      	; 0x70e4 <Application_Jump_Check+0x2c>
			  JumpToApplication = true;
    70e2:	81 e0       	ldi	r24, 0x01	; 1

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
    70e4:	94 b7       	in	r25, 0x34	; 52
    70e6:	9d 7f       	andi	r25, 0xFD	; 253
    70e8:	94 bf       	out	0x34, r25	; 52
    70ea:	11 c0       	rjmp	.+34     	; 0x710e <Application_Jump_Check+0x56>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    70ec:	04 b6       	in	r0, 0x34	; 52
    70ee:	03 fe       	sbrs	r0, 3
    70f0:	0a c0       	rjmp	.+20     	; 0x7106 <Application_Jump_Check+0x4e>
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	20 91 7f 01 	lds	r18, 0x017F
    70f8:	30 91 80 01 	lds	r19, 0x0180
    70fc:	22 34       	cpi	r18, 0x42	; 66
    70fe:	3c 4d       	sbci	r19, 0xDC	; 220
    7100:	19 f0       	breq	.+6      	; 0x7108 <Application_Jump_Check+0x50>
    7102:	80 e0       	ldi	r24, 0x00	; 0
    7104:	01 c0       	rjmp	.+2      	; 0x7108 <Application_Jump_Check+0x50>
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	bool JumpToApplication = false;
    7106:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
    7108:	94 b7       	in	r25, 0x34	; 52
    710a:	97 7f       	andi	r25, 0xF7	; 247
    710c:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
    710e:	40 e0       	ldi	r20, 0x00	; 0
    7110:	50 e0       	ldi	r21, 0x00	; 0
    7112:	fa 01       	movw	r30, r20
    7114:	65 91       	lpm	r22, Z+
    7116:	74 91       	lpm	r23, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
    7118:	88 23       	and	r24, r24
    711a:	a1 f0       	breq	.+40     	; 0x7144 <__do_copy_data>
    711c:	6f 3f       	cpi	r22, 0xFF	; 255
    711e:	7f 4f       	sbci	r23, 0xFF	; 255
    7120:	89 f0       	breq	.+34     	; 0x7144 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    7122:	84 b7       	in	r24, 0x34	; 52
    7124:	87 7f       	andi	r24, 0xF7	; 247
    7126:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
    7128:	88 e1       	ldi	r24, 0x18	; 24
    712a:	0f b6       	in	r0, 0x3f	; 63
    712c:	f8 94       	cli
    712e:	80 93 60 00 	sts	0x0060, r24
    7132:	10 92 60 00 	sts	0x0060, r1
    7136:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    7138:	10 92 80 01 	sts	0x0180, r1
    713c:	10 92 7f 01 	sts	0x017F, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    7140:	fa 01       	movw	r30, r20
    7142:	09 95       	icall

00007144 <__do_copy_data>:
    7144:	11 e0       	ldi	r17, 0x01	; 1
    7146:	a0 e0       	ldi	r26, 0x00	; 0
    7148:	b1 e0       	ldi	r27, 0x01	; 1
    714a:	e6 ea       	ldi	r30, 0xA6	; 166
    714c:	fe e7       	ldi	r31, 0x7E	; 126
    714e:	02 c0       	rjmp	.+4      	; 0x7154 <__do_copy_data+0x10>
    7150:	05 90       	lpm	r0, Z+
    7152:	0d 92       	st	X+, r0
    7154:	a2 36       	cpi	r26, 0x62	; 98
    7156:	b1 07       	cpc	r27, r17
    7158:	d9 f7       	brne	.-10     	; 0x7150 <__do_copy_data+0xc>

0000715a <__do_clear_bss>:
    715a:	11 e0       	ldi	r17, 0x01	; 1
    715c:	a2 e6       	ldi	r26, 0x62	; 98
    715e:	b1 e0       	ldi	r27, 0x01	; 1
    7160:	01 c0       	rjmp	.+2      	; 0x7164 <.do_clear_bss_start>

00007162 <.do_clear_bss_loop>:
    7162:	1d 92       	st	X+, r1

00007164 <.do_clear_bss_start>:
    7164:	af 37       	cpi	r26, 0x7F	; 127
    7166:	b1 07       	cpc	r27, r17
    7168:	e1 f7       	brne	.-8      	; 0x7162 <.do_clear_bss_loop>
    716a:	3a d1       	rcall	.+628    	; 0x73e0 <main>
    716c:	9a c6       	rjmp	.+3380   	; 0x7ea2 <_exit>

0000716e <__bad_interrupt>:
    716e:	48 cf       	rjmp	.-368    	; 0x7000 <__vectors>

00007170 <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    7170:	88 23       	and	r24, r24
    7172:	c9 f0       	breq	.+50     	; 0x71a6 <DiscardFillerBytes+0x36>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7174:	90 91 f3 00 	lds	r25, 0x00F3
    7178:	20 91 f2 00 	lds	r18, 0x00F2
    717c:	30 e0       	ldi	r19, 0x00	; 0
    717e:	39 2b       	or	r19, r25
	{
		if (!(Endpoint_BytesInEndpoint()))
    7180:	23 2b       	or	r18, r19
    7182:	69 f4       	brne	.+26     	; 0x719e <DiscardFillerBytes+0x2e>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7184:	90 91 e8 00 	lds	r25, 0x00E8
    7188:	9b 7f       	andi	r25, 0xFB	; 251
    718a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    718e:	90 91 e8 00 	lds	r25, 0x00E8
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
    7192:	92 fd       	sbrc	r25, 2
    7194:	06 c0       	rjmp	.+12     	; 0x71a2 <DiscardFillerBytes+0x32>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    7196:	9e b3       	in	r25, 0x1e	; 30
    7198:	91 11       	cpse	r25, r1
    719a:	f9 cf       	rjmp	.-14     	; 0x718e <DiscardFillerBytes+0x1e>
    719c:	04 c0       	rjmp	.+8      	; 0x71a6 <DiscardFillerBytes+0x36>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    719e:	90 91 f1 00 	lds	r25, 0x00F1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    71a2:	81 50       	subi	r24, 0x01	; 1
    71a4:	e5 cf       	rjmp	.-54     	; 0x7170 <DiscardFillerBytes>
    71a6:	08 95       	ret

000071a8 <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
    71a8:	ea e6       	ldi	r30, 0x6A	; 106
    71aa:	f1 e0       	ldi	r31, 0x01	; 1
    71ac:	35 81       	ldd	r19, Z+5	; 0x05
    71ae:	24 81       	ldd	r18, Z+4	; 0x04
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
    71b0:	93 81       	ldd	r25, Z+3	; 0x03
    71b2:	82 81       	ldd	r24, Z+2	; 0x02
    71b4:	90 93 64 01 	sts	0x0164, r25
    71b8:	80 93 65 01 	sts	0x0165, r24
	EndAddr   = Address[1].Word;
    71bc:	c9 01       	movw	r24, r18
    71be:	90 93 62 01 	sts	0x0162, r25
    71c2:	80 93 63 01 	sts	0x0163, r24
    71c6:	08 95       	ret

000071c8 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
    71c8:	1f 93       	push	r17
    71ca:	cf 93       	push	r28
    71cc:	df 93       	push	r29
    71ce:	00 d0       	rcall	.+0      	; 0x71d0 <ProcessBootloaderCommand+0x8>
    71d0:	1f 92       	push	r1
    71d2:	cd b7       	in	r28, 0x3d	; 61
    71d4:	de b7       	in	r29, 0x3e	; 62
	/* Check if device is in secure mode */
	if (IsSecure)
    71d6:	90 91 74 01 	lds	r25, 0x0174
    71da:	80 91 6a 01 	lds	r24, 0x016A
    71de:	99 23       	and	r25, r25
    71e0:	d1 f0       	breq	.+52     	; 0x7216 <ProcessBootloaderCommand+0x4e>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    71e2:	84 30       	cpi	r24, 0x04	; 4
    71e4:	49 f4       	brne	.+18     	; 0x71f8 <ProcessBootloaderCommand+0x30>
    71e6:	80 91 6b 01 	lds	r24, 0x016B
    71ea:	81 11       	cpse	r24, r1
    71ec:	08 c0       	rjmp	.+16     	; 0x71fe <ProcessBootloaderCommand+0x36>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
    71ee:	80 91 6c 01 	lds	r24, 0x016C
    71f2:	8f 3f       	cpi	r24, 0xFF	; 255
    71f4:	21 f4       	brne	.+8      	; 0x71fe <ProcessBootloaderCommand+0x36>
    71f6:	58 c0       	rjmp	.+176    	; 0x72a8 <ProcessBootloaderCommand+0xe0>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    71f8:	85 30       	cpi	r24, 0x05	; 5
    71fa:	09 f4       	brne	.+2      	; 0x71fe <ProcessBootloaderCommand+0x36>
    71fc:	af c0       	rjmp	.+350    	; 0x735c <ProcessBootloaderCommand+0x194>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
    71fe:	8a e0       	ldi	r24, 0x0A	; 10
    7200:	80 93 00 01 	sts	0x0100, r24
			DFU_Status = errWRITE;
    7204:	83 e0       	ldi	r24, 0x03	; 3
    7206:	80 93 72 01 	sts	0x0172, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    720a:	80 91 eb 00 	lds	r24, 0x00EB
    720e:	80 62       	ori	r24, 0x20	; 32
    7210:	80 93 eb 00 	sts	0x00EB, r24
    7214:	de c0       	rjmp	.+444    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
    7216:	84 30       	cpi	r24, 0x04	; 4
    7218:	09 f4       	brne	.+2      	; 0x721c <ProcessBootloaderCommand+0x54>
    721a:	46 c0       	rjmp	.+140    	; 0x72a8 <ProcessBootloaderCommand+0xe0>
    721c:	28 f4       	brcc	.+10     	; 0x7228 <ProcessBootloaderCommand+0x60>
    721e:	81 30       	cpi	r24, 0x01	; 1
    7220:	51 f0       	breq	.+20     	; 0x7236 <ProcessBootloaderCommand+0x6e>
    7222:	83 30       	cpi	r24, 0x03	; 3
    7224:	f1 f0       	breq	.+60     	; 0x7262 <ProcessBootloaderCommand+0x9a>
    7226:	d5 c0       	rjmp	.+426    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    7228:	85 30       	cpi	r24, 0x05	; 5
    722a:	09 f4       	brne	.+2      	; 0x722e <ProcessBootloaderCommand+0x66>
    722c:	97 c0       	rjmp	.+302    	; 0x735c <ProcessBootloaderCommand+0x194>
    722e:	86 30       	cpi	r24, 0x06	; 6
    7230:	09 f4       	brne	.+2      	; 0x7234 <ProcessBootloaderCommand+0x6c>
    7232:	bc c0       	rjmp	.+376    	; 0x73ac <ProcessBootloaderCommand+0x1e4>
    7234:	ce c0       	rjmp	.+412    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
    7236:	10 91 6b 01 	lds	r17, 0x016B
    723a:	12 30       	cpi	r17, 0x02	; 2
    723c:	08 f0       	brcs	.+2      	; 0x7240 <ProcessBootloaderCommand+0x78>
    723e:	c9 c0       	rjmp	.+402    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    7240:	b3 df       	rcall	.-154    	; 0x71a8 <LoadStartEndAddresses>
    7242:	11 11       	cpse	r17, r1

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
    7244:	0c c0       	rjmp	.+24     	; 0x725e <ProcessBootloaderCommand+0x96>
    7246:	80 91 64 01 	lds	r24, 0x0164
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    724a:	90 91 65 01 	lds	r25, 0x0165
    724e:	23 e0       	ldi	r18, 0x03	; 3

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
    7250:	fc 01       	movw	r30, r24
    7252:	20 93 57 00 	sts	0x0057, r18
    7256:	e8 95       	spm
    7258:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    725a:	00 fc       	sbrc	r0, 0
    725c:	fd cf       	rjmp	.-6      	; 0x7258 <ProcessBootloaderCommand+0x90>
    725e:	85 e0       	ldi	r24, 0x05	; 5
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
    7260:	07 c0       	rjmp	.+14     	; 0x7270 <ProcessBootloaderCommand+0xa8>
    7262:	80 91 6b 01 	lds	r24, 0x016B
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
    7266:	98 2f       	mov	r25, r24
    7268:	9d 7f       	andi	r25, 0xFD	; 253
    726a:	29 f4       	brne	.+10     	; 0x7276 <ProcessBootloaderCommand+0xae>
    726c:	9d df       	rcall	.-198    	; 0x71a8 <LoadStartEndAddresses>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    726e:	89 e0       	ldi	r24, 0x09	; 9
    7270:	80 93 00 01 	sts	0x0100, r24

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
    7274:	ae c0       	rjmp	.+348    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    7276:	81 30       	cpi	r24, 0x01	; 1
    7278:	09 f0       	breq	.+2      	; 0x727c <ProcessBootloaderCommand+0xb4>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
    727a:	ab c0       	rjmp	.+342    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    727c:	e0 e0       	ldi	r30, 0x00	; 0
    727e:	f0 e0       	ldi	r31, 0x00	; 0
    7280:	84 91       	lpm	r24, Z
    7282:	8f 3f       	cpi	r24, 0xFF	; 255
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
    7284:	59 f0       	breq	.+22     	; 0x729c <ProcessBootloaderCommand+0xd4>
    7286:	10 92 66 01 	sts	0x0166, r1
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
    728a:	f0 93 65 01 	sts	0x0165, r31
				StartAddr     = CurrFlashAddress;
    728e:	e0 93 64 01 	sts	0x0164, r30
    7292:	8a e0       	ldi	r24, 0x0A	; 10
    7294:	80 93 00 01 	sts	0x0100, r24

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
    7298:	85 e0       	ldi	r24, 0x05	; 5
    729a:	99 c0       	rjmp	.+306    	; 0x73ce <ProcessBootloaderCommand+0x206>
				DFU_Status = errCHECK_ERASED;
    729c:	31 96       	adiw	r30, 0x01	; 1
    729e:	e1 15       	cp	r30, r1
    72a0:	20 e7       	ldi	r18, 0x70	; 112
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    72a2:	f2 07       	cpc	r31, r18
    72a4:	69 f7       	brne	.-38     	; 0x7280 <ProcessBootloaderCommand+0xb8>
    72a6:	95 c0       	rjmp	.+298    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    72a8:	80 91 6b 01 	lds	r24, 0x016B
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
    72ac:	83 30       	cpi	r24, 0x03	; 3
    72ae:	91 f5       	brne	.+100    	; 0x7314 <ProcessBootloaderCommand+0x14c>
    72b0:	81 e0       	ldi	r24, 0x01	; 1
    72b2:	80 93 73 01 	sts	0x0173, r24
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
    72b6:	e0 91 70 01 	lds	r30, 0x0170

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
    72ba:	f0 91 71 01 	lds	r31, 0x0171
    72be:	80 91 6c 01 	lds	r24, 0x016C
    72c2:	30 97       	sbiw	r30, 0x00	; 0
    72c4:	61 f0       	breq	.+24     	; 0x72de <ProcessBootloaderCommand+0x116>
    72c6:	81 30       	cpi	r24, 0x01	; 1
    72c8:	09 f0       	breq	.+2      	; 0x72cc <ProcessBootloaderCommand+0x104>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
    72ca:	83 c0       	rjmp	.+262    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    72cc:	90 91 6f 01 	lds	r25, 0x016F
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
    72d0:	80 91 6e 01 	lds	r24, 0x016E
    72d4:	90 93 67 01 	sts	0x0167, r25

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
    72d8:	80 93 68 01 	sts	0x0168, r24
    72dc:	7a c0       	rjmp	.+244    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    72de:	81 11       	cpse	r24, r1
    72e0:	11 c0       	rjmp	.+34     	; 0x7304 <ProcessBootloaderCommand+0x13c>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
    72e2:	82 e4       	ldi	r24, 0x42	; 66
    72e4:	9c ed       	ldi	r25, 0xDC	; 220
			{
				/* Unlock the forced application start mode of the bootloader if it is restarted */
				MagicBootKey = MAGIC_BOOT_KEY;
    72e6:	90 93 80 01 	sts	0x0180, r25
    72ea:	80 93 7f 01 	sts	0x017F, r24
    72ee:	9c e0       	ldi	r25, 0x0C	; 12
    72f0:	88 e1       	ldi	r24, 0x18	; 24

				/* Start the watchdog to reset the AVR once the communications are finalized */
				wdt_enable(WDTO_250MS);
    72f2:	0f b6       	in	r0, 0x3f	; 63
    72f4:	f8 94       	cli
    72f6:	a8 95       	wdr
    72f8:	80 93 60 00 	sts	0x0060, r24
    72fc:	0f be       	out	0x3f, r0	; 63
    72fe:	90 93 60 00 	sts	0x0060, r25
    7302:	67 c0       	rjmp	.+206    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    7304:	85 91       	lpm	r24, Z+
    7306:	94 91       	lpm	r25, Z
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity if a valid application has been loaded */
				if (pgm_read_word_near(0) == 0xFFFF)
    7308:	01 96       	adiw	r24, 0x01	; 1
    730a:	09 f0       	breq	.+2      	; 0x730e <ProcessBootloaderCommand+0x146>
    730c:	62 c0       	rjmp	.+196    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    730e:	10 92 01 01 	sts	0x0101, r1
				  RunBootloader = false;
    7312:	5f c0       	rjmp	.+190    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    7314:	81 11       	cpse	r24, r1
    7316:	5d c0       	rjmp	.+186    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    7318:	80 91 6c 01 	lds	r24, 0x016C
    731c:	8f 3f       	cpi	r24, 0xFF	; 255
    731e:	09 f0       	breq	.+2      	; 0x7322 <ProcessBootloaderCommand+0x15a>
    7320:	58 c0       	rjmp	.+176    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    7322:	e0 e0       	ldi	r30, 0x00	; 0
    7324:	f0 e0       	ldi	r31, 0x00	; 0
    7326:	83 e0       	ldi	r24, 0x03	; 3
    7328:	95 e0       	ldi	r25, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
    732a:	80 93 57 00 	sts	0x0057, r24
    732e:	e8 95       	spm
    7330:	07 b6       	in	r0, 0x37	; 55
    7332:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
    7334:	fd cf       	rjmp	.-6      	; 0x7330 <ProcessBootloaderCommand+0x168>
    7336:	90 93 57 00 	sts	0x0057, r25
			boot_page_write(CurrFlashAddress);
    733a:	e8 95       	spm
    733c:	07 b6       	in	r0, 0x37	; 55
    733e:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
    7340:	fd cf       	rjmp	.-6      	; 0x733c <ProcessBootloaderCommand+0x174>
    7342:	e0 58       	subi	r30, 0x80	; 128
    7344:	ff 4f       	sbci	r31, 0xFF	; 255
    7346:	e1 15       	cp	r30, r1
    7348:	20 e7       	ldi	r18, 0x70	; 112
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    734a:	f2 07       	cpc	r31, r18
    734c:	71 f7       	brne	.-36     	; 0x732a <ProcessBootloaderCommand+0x162>
    734e:	81 e1       	ldi	r24, 0x11	; 17
    7350:	80 93 57 00 	sts	0x0057, r24

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
    7354:	e8 95       	spm
    7356:	10 92 74 01 	sts	0x0174, r1

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
    735a:	3b c0       	rjmp	.+118    	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    735c:	80 e2       	ldi	r24, 0x20	; 32
    735e:	89 83       	std	Y+1, r24	; 0x01
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
    7360:	8c ed       	ldi	r24, 0xDC	; 220
    7362:	8a 83       	std	Y+2, r24	; 0x02
    7364:	8b ef       	ldi	r24, 0xFB	; 251
    7366:	8b 83       	std	Y+3, r24	; 0x03
    7368:	80 91 6c 01 	lds	r24, 0x016C
	const uint8_t SignatureInfo[4]  = {0x58, AVR_SIGNATURE_1, AVR_SIGNATURE_2, AVR_SIGNATURE_3};

	uint8_t DataIndexToRead    = SentCommand.Data[1];
    736c:	90 91 6b 01 	lds	r25, 0x016B
	bool    ReadAddressInvalid = false;

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                        // Read bootloader info
    7370:	91 11       	cpse	r25, r1
    7372:	07 c0       	rjmp	.+14     	; 0x7382 <ProcessBootloaderCommand+0x1ba>
    7374:	83 30       	cpi	r24, 0x03	; 3
    7376:	38 f5       	brcc	.+78     	; 0x73c6 <ProcessBootloaderCommand+0x1fe>
	{
		if (DataIndexToRead < 3)
    7378:	fe 01       	movw	r30, r28
    737a:	e8 0f       	add	r30, r24
		  ResponseByte = BootloaderInfo[DataIndexToRead];
    737c:	f1 1d       	adc	r31, r1
    737e:	81 81       	ldd	r24, Z+1	; 0x01
    7380:	12 c0       	rjmp	.+36     	; 0x73a6 <ProcessBootloaderCommand+0x1de>
    7382:	91 30       	cpi	r25, 0x01	; 1
    7384:	31 f5       	brne	.+76     	; 0x73d2 <ProcessBootloaderCommand+0x20a>
		else
		  ReadAddressInvalid = true;
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
    7386:	81 33       	cpi	r24, 0x31	; 49
    7388:	59 f0       	breq	.+22     	; 0x73a0 <ProcessBootloaderCommand+0x1d8>
	{
		switch (DataIndexToRead)
    738a:	20 f4       	brcc	.+8      	; 0x7394 <ProcessBootloaderCommand+0x1cc>
    738c:	80 33       	cpi	r24, 0x30	; 48
    738e:	d9 f4       	brne	.+54     	; 0x73c6 <ProcessBootloaderCommand+0x1fe>
    7390:	88 e5       	ldi	r24, 0x58	; 88
    7392:	09 c0       	rjmp	.+18     	; 0x73a6 <ProcessBootloaderCommand+0x1de>
		{
			case 0x30:
				ResponseByte = SignatureInfo[0];
    7394:	80 36       	cpi	r24, 0x60	; 96
    7396:	31 f0       	breq	.+12     	; 0x73a4 <ProcessBootloaderCommand+0x1dc>
		else
		  ReadAddressInvalid = true;
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
	{
		switch (DataIndexToRead)
    7398:	81 36       	cpi	r24, 0x61	; 97
    739a:	a9 f4       	brne	.+42     	; 0x73c6 <ProcessBootloaderCommand+0x1fe>
    739c:	87 e8       	ldi	r24, 0x87	; 135
    739e:	03 c0       	rjmp	.+6      	; 0x73a6 <ProcessBootloaderCommand+0x1de>
				break;
			case 0x60:
				ResponseByte = SignatureInfo[2];
				break;
			case 0x61:
				ResponseByte = SignatureInfo[3];
    73a0:	8e e1       	ldi	r24, 0x1E	; 30
    73a2:	01 c0       	rjmp	.+2      	; 0x73a6 <ProcessBootloaderCommand+0x1de>
		{
			case 0x30:
				ResponseByte = SignatureInfo[0];
				break;
			case 0x31:
				ResponseByte = SignatureInfo[1];
    73a4:	85 e9       	ldi	r24, 0x95	; 149
    73a6:	80 93 69 01 	sts	0x0169, r24
				break;
			case 0x60:
				ResponseByte = SignatureInfo[2];
				break;
			case 0x61:
				ResponseByte = SignatureInfo[3];
    73aa:	13 c0       	rjmp	.+38     	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    73ac:	80 91 6b 01 	lds	r24, 0x016B
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
    73b0:	83 30       	cpi	r24, 0x03	; 3
    73b2:	79 f4       	brne	.+30     	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    73b4:	80 91 6c 01 	lds	r24, 0x016C
    73b8:	81 11       	cpse	r24, r1
    73ba:	0b c0       	rjmp	.+22     	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    73bc:	80 91 6d 01 	lds	r24, 0x016D
			  Flash64KBPage = SentCommand.Data[2];
    73c0:	80 93 66 01 	sts	0x0166, r24
    73c4:	06 c0       	rjmp	.+12     	; 0x73d2 <ProcessBootloaderCommand+0x20a>
    73c6:	8a e0       	ldi	r24, 0x0A	; 10
    73c8:	80 93 00 01 	sts	0x0100, r24
	}

	if (ReadAddressInvalid)
	{
		/* Set the state and status variables to indicate the error */
		DFU_State  = dfuERROR;
    73cc:	88 e0       	ldi	r24, 0x08	; 8
    73ce:	80 93 72 01 	sts	0x0172, r24
		DFU_Status = errADDRESS;
    73d2:	0f 90       	pop	r0
    73d4:	0f 90       	pop	r0
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
			  Flash64KBPage = SentCommand.Data[2];

			break;
	}
}
    73d6:	0f 90       	pop	r0
    73d8:	df 91       	pop	r29
    73da:	cf 91       	pop	r28
    73dc:	1f 91       	pop	r17
    73de:	08 95       	ret

000073e0 <main>:
    73e0:	84 b7       	in	r24, 0x34	; 52
    73e2:	87 7f       	andi	r24, 0xF7	; 247

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    73e4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    73e6:	88 e1       	ldi	r24, 0x18	; 24
    73e8:	0f b6       	in	r0, 0x3f	; 63
    73ea:	f8 94       	cli
    73ec:	80 93 60 00 	sts	0x0060, r24
    73f0:	10 92 60 00 	sts	0x0060, r1
    73f4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    73f6:	90 e0       	ldi	r25, 0x00	; 0
    73f8:	80 e8       	ldi	r24, 0x80	; 128
    73fa:	0f b6       	in	r0, 0x3f	; 63
    73fc:	f8 94       	cli
    73fe:	80 93 61 00 	sts	0x0061, r24
    7402:	90 93 61 00 	sts	0x0061, r25
    7406:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7408:	c1 e0       	ldi	r28, 0x01	; 1
    740a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
    740c:	82 e0       	ldi	r24, 0x02	; 2
    740e:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    7410:	a0 d3       	rcall	.+1856   	; 0x7b52 <USB_Init>
    7412:	3f 9a       	sbi	0x07, 7	; 7

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |=  LEDS_ALL_LEDS;
    7414:	47 98       	cbi	0x08, 7	; 8
				PORTC &= ~LEDS_ALL_LEDS;
    7416:	c0 93 6f 00 	sts	0x006F, r28
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    741a:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
    741c:	80 93 81 00 	sts	0x0081, r24
    7420:	47 9a       	sbi	0x08, 7	; 8
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC  = ((PORTC & ~LEDS_ALL_LEDS) | LEDMask);
    7422:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    7424:	80 91 01 01 	lds	r24, 0x0101

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
    7428:	88 23       	and	r24, r24
    742a:	11 f0       	breq	.+4      	; 0x7430 <main+0x50>
    742c:	1c d5       	rcall	.+2616   	; 0x7e66 <USB_USBTask>
	  USB_USBTask();
    742e:	fa cf       	rjmp	.-12     	; 0x7424 <main+0x44>
    7430:	80 91 73 01 	lds	r24, 0x0173

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
    7434:	81 11       	cpse	r24, r1
    7436:	fa cf       	rjmp	.-12     	; 0x742c <main+0x4c>
    7438:	39 d3       	rcall	.+1650   	; 0x7aac <USB_Disable>
    743a:	3f 98       	cbi	0x07, 7	; 7

/** Resets all configured hardware required for the bootloader back to their original states. */
static void ResetHardware(void)
{
	/* Shut down the USB and other board hardware drivers */
	USB_Disable();
    743c:	47 98       	cbi	0x08, 7	; 8
    743e:	10 92 6f 00 	sts	0x006F, r1
         	}

			static inline void LEDs_Disable(void)
			{
				DDRC  &= ~LEDS_ALL_LEDS;
				PORTC &= ~LEDS_ALL_LEDS;
    7442:	10 92 81 00 	sts	0x0081, r1
	LEDs_Disable();

	/* Disable Bootloader active LED toggle timer */
	TIMSK1 = 0;
    7446:	81 e0       	ldi	r24, 0x01	; 1
	TCCR1B = 0;
    7448:	85 bf       	out	0x35, r24	; 53
    744a:	15 be       	out	0x35, r1	; 53

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
    744c:	e0 91 67 01 	lds	r30, 0x0167
	MCUCR = 0;
    7450:	f0 91 68 01 	lds	r31, 0x0168

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();

	/* Start the user application */
	AppStartPtr();
    7454:	09 95       	icall

00007456 <__vector_20>:
    7456:	1f 92       	push	r1
    7458:	0f 92       	push	r0
    745a:	0f b6       	in	r0, 0x3f	; 63
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    745c:	0f 92       	push	r0
    745e:	11 24       	eor	r1, r1
    7460:	8f 93       	push	r24
				PORTC  = ((PORTC & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINC   = LEDMask;
    7462:	80 e8       	ldi	r24, 0x80	; 128
    7464:	86 b9       	out	0x06, r24	; 6
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
    7466:	8f 91       	pop	r24
    7468:	0f 90       	pop	r0
    746a:	0f be       	out	0x3f, r0	; 63
    746c:	0f 90       	pop	r0
    746e:	1f 90       	pop	r1
    7470:	18 95       	reti

00007472 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    7472:	cf 92       	push	r12
    7474:	df 92       	push	r13
    7476:	ef 92       	push	r14
    7478:	ff 92       	push	r15
    747a:	0f 93       	push	r16
    747c:	1f 93       	push	r17
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    7482:	80 91 77 01 	lds	r24, 0x0177
    7486:	8f 77       	andi	r24, 0x7F	; 127
    7488:	81 32       	cpi	r24, 0x21	; 33
    748a:	09 f0       	breq	.+2      	; 0x748e <EVENT_USB_Device_ControlRequest+0x1c>
    748c:	f3 c1       	rjmp	.+998    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    748e:	80 e8       	ldi	r24, 0x80	; 128
    7490:	86 b9       	out	0x06, r24	; 6

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
    7492:	80 91 7d 01 	lds	r24, 0x017D
    7496:	90 91 7e 01 	lds	r25, 0x017E
    749a:	90 93 71 01 	sts	0x0171, r25
    749e:	80 93 70 01 	sts	0x0170, r24

	switch (USB_ControlRequest.bRequest)
    74a2:	80 91 78 01 	lds	r24, 0x0178
    74a6:	83 30       	cpi	r24, 0x03	; 3
    74a8:	09 f4       	brne	.+2      	; 0x74ac <EVENT_USB_Device_ControlRequest+0x3a>
    74aa:	a5 c1       	rjmp	.+842    	; 0x77f6 <EVENT_USB_Device_ControlRequest+0x384>
    74ac:	58 f4       	brcc	.+22     	; 0x74c4 <EVENT_USB_Device_ControlRequest+0x52>
    74ae:	81 30       	cpi	r24, 0x01	; 1
    74b0:	d1 f0       	breq	.+52     	; 0x74e6 <EVENT_USB_Device_ControlRequest+0x74>
    74b2:	82 30       	cpi	r24, 0x02	; 2
    74b4:	09 f0       	breq	.+2      	; 0x74b8 <EVENT_USB_Device_ControlRequest+0x46>
    74b6:	de c1       	rjmp	.+956    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    74b8:	80 91 e8 00 	lds	r24, 0x00E8
    74bc:	87 7f       	andi	r24, 0xF7	; 247
    74be:	80 93 e8 00 	sts	0x00E8, r24
    74c2:	09 c1       	rjmp	.+530    	; 0x76d6 <EVENT_USB_Device_ControlRequest+0x264>
    74c4:	85 30       	cpi	r24, 0x05	; 5
    74c6:	09 f4       	brne	.+2      	; 0x74ca <EVENT_USB_Device_ControlRequest+0x58>
    74c8:	bc c1       	rjmp	.+888    	; 0x7842 <EVENT_USB_Device_ControlRequest+0x3d0>
    74ca:	08 f4       	brcc	.+2      	; 0x74ce <EVENT_USB_Device_ControlRequest+0x5c>
    74cc:	b2 c1       	rjmp	.+868    	; 0x7832 <EVENT_USB_Device_ControlRequest+0x3c0>
    74ce:	86 30       	cpi	r24, 0x06	; 6
    74d0:	09 f0       	breq	.+2      	; 0x74d4 <EVENT_USB_Device_ControlRequest+0x62>
    74d2:	d0 c1       	rjmp	.+928    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    74d4:	80 91 e8 00 	lds	r24, 0x00E8
    74d8:	87 7f       	andi	r24, 0xF7	; 247
    74da:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
    74de:	82 e0       	ldi	r24, 0x02	; 2
    74e0:	80 93 00 01 	sts	0x0100, r24
    74e4:	be c1       	rjmp	.+892    	; 0x7862 <EVENT_USB_Device_ControlRequest+0x3f0>
    74e6:	80 91 e8 00 	lds	r24, 0x00E8
    74ea:	87 7f       	andi	r24, 0xF7	; 247
    74ec:	80 93 e8 00 	sts	0x00E8, r24
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
    74f0:	80 91 73 01 	lds	r24, 0x0173
    74f4:	88 23       	and	r24, r24
    74f6:	19 f0       	breq	.+6      	; 0x74fe <EVENT_USB_Device_ControlRequest+0x8c>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
    74f8:	67 de       	rcall	.-818    	; 0x71c8 <ProcessBootloaderCommand>
    74fa:	10 92 73 01 	sts	0x0173, r1

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
    74fe:	80 91 70 01 	lds	r24, 0x0170
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
    7502:	90 91 71 01 	lds	r25, 0x0171
    7506:	00 97       	sbiw	r24, 0x00	; 0
    7508:	61 f1       	breq	.+88     	; 0x7562 <EVENT_USB_Device_ControlRequest+0xf0>
    750a:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    750e:	22 fd       	sbrc	r18, 2
			{
				while (!(Endpoint_IsOUTReceived()))
    7510:	04 c0       	rjmp	.+8      	; 0x751a <EVENT_USB_Device_ControlRequest+0xa8>
    7512:	2e b3       	in	r18, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    7514:	21 11       	cpse	r18, r1
    7516:	f9 cf       	rjmp	.-14     	; 0x750a <EVENT_USB_Device_ControlRequest+0x98>
    7518:	ad c1       	rjmp	.+858    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    751a:	20 91 f1 00 	lds	r18, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    751e:	20 93 6a 01 	sts	0x016A, r18
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
    7522:	01 97       	sbiw	r24, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
    7524:	90 93 71 01 	sts	0x0171, r25
    7528:	80 93 70 01 	sts	0x0170, r24
    752c:	eb e6       	ldi	r30, 0x6B	; 107
    752e:	f1 e0       	ldi	r31, 0x01	; 1
    7530:	35 e0       	ldi	r19, 0x05	; 5
    7532:	3e 0f       	add	r19, r30
    7534:	20 91 f3 00 	lds	r18, 0x00F3
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7538:	80 91 f2 00 	lds	r24, 0x00F2
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	92 2b       	or	r25, r18
    7540:	89 2b       	or	r24, r25

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    7542:	71 f0       	breq	.+28     	; 0x7560 <EVENT_USB_Device_ControlRequest+0xee>
    7544:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7548:	81 93       	st	Z+, r24
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
    754a:	80 91 70 01 	lds	r24, 0x0170
					SentCommand.DataSize--;
    754e:	90 91 71 01 	lds	r25, 0x0171
    7552:	01 97       	sbiw	r24, 0x01	; 1
    7554:	90 93 71 01 	sts	0x0171, r25
    7558:	80 93 70 01 	sts	0x0170, r24
    755c:	3e 13       	cpse	r19, r30

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    755e:	ea cf       	rjmp	.-44     	; 0x7534 <EVENT_USB_Device_ControlRequest+0xc2>
    7560:	33 de       	rcall	.-922    	; 0x71c8 <ProcessBootloaderCommand>
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
    7562:	80 91 00 01 	lds	r24, 0x0100
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
    7566:	85 30       	cpi	r24, 0x05	; 5
    7568:	09 f0       	breq	.+2      	; 0x756c <EVENT_USB_Device_ControlRequest+0xfa>
    756a:	ad c0       	rjmp	.+346    	; 0x76c6 <EVENT_USB_Device_ControlRequest+0x254>
    756c:	80 91 70 01 	lds	r24, 0x0170
			{
				if (!(SentCommand.DataSize))
    7570:	90 91 71 01 	lds	r25, 0x0171
    7574:	89 2b       	or	r24, r25
    7576:	21 f4       	brne	.+8      	; 0x7580 <EVENT_USB_Device_ControlRequest+0x10e>
    7578:	82 e0       	ldi	r24, 0x02	; 2
    757a:	80 93 00 01 	sts	0x0100, r24
				{
					DFU_State = dfuIDLE;
    757e:	a3 c0       	rjmp	.+326    	; 0x76c6 <EVENT_USB_Device_ControlRequest+0x254>
    7580:	8a e1       	ldi	r24, 0x1A	; 26
    7582:	f6 dd       	rcall	.-1044   	; 0x7170 <DiscardFillerBytes>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
    7584:	00 91 64 01 	lds	r16, 0x0164
    7588:	10 91 65 01 	lds	r17, 0x0165

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
    758c:	80 2f       	mov	r24, r16
    758e:	8f 71       	andi	r24, 0x1F	; 31
    7590:	ef dd       	rcall	.-1058   	; 0x7170 <DiscardFillerBytes>
    7592:	80 91 62 01 	lds	r24, 0x0162
    7596:	90 91 63 01 	lds	r25, 0x0163
    759a:	01 96       	adiw	r24, 0x01	; 1
    759c:	ec 01       	movw	r28, r24
    759e:	c0 1b       	sub	r28, r16
    75a0:	d1 0b       	sbc	r29, r17
    75a2:	80 91 6b 01 	lds	r24, 0x016B

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    75a6:	81 11       	cpse	r24, r1
    75a8:	7c c0       	rjmp	.+248    	; 0x76a2 <EVENT_USB_Device_ControlRequest+0x230>

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
    75aa:	ce 01       	movw	r24, r28
    75ac:	96 95       	lsr	r25
    75ae:	87 95       	ror	r24
    75b0:	a8 01       	movw	r20, r16
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
    75b2:	20 91 66 01 	lds	r18, 0x0166
    75b6:	62 2f       	mov	r22, r18

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
    75b8:	70 e0       	ldi	r23, 0x00	; 0
    75ba:	6a 01       	movw	r12, r20
    75bc:	7b 01       	movw	r14, r22
    75be:	a0 e0       	ldi	r26, 0x00	; 0
    75c0:	b1 e0       	ldi	r27, 0x01	; 1

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
    75c2:	c5 e0       	ldi	r28, 0x05	; 5
    75c4:	d3 e0       	ldi	r29, 0x03	; 3
						uint8_t  WordsInFlashPage          = 0;
    75c6:	00 97       	sbiw	r24, 0x00	; 0
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    75c8:	09 f4       	brne	.+2      	; 0x75cc <EVENT_USB_Device_ControlRequest+0x15a>

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    75ca:	45 c0       	rjmp	.+138    	; 0x7656 <EVENT_USB_Device_ControlRequest+0x1e4>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    75cc:	e0 91 f3 00 	lds	r30, 0x00F3
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
    75d0:	20 91 f2 00 	lds	r18, 0x00F2
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    75d4:	30 e0       	ldi	r19, 0x00	; 0
    75d6:	3e 2b       	or	r19, r30
    75d8:	23 2b       	or	r18, r19
    75da:	c9 f0       	breq	.+50     	; 0x760e <EVENT_USB_Device_ControlRequest+0x19c>
    75dc:	01 97       	sbiw	r24, 0x01	; 1
    75de:	f0 91 f1 00 	lds	r31, 0x00F1
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    75e2:	e0 91 f1 00 	lds	r30, 0x00F1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    75e6:	2f 2f       	mov	r18, r31
    75e8:	3e 2f       	mov	r19, r30
				Data.Bytes[1] = UEDATX;
    75ea:	fa 01       	movw	r30, r20
    75ec:	09 01       	movw	r0, r18

				return Data.Value;
    75ee:	b0 93 57 00 	sts	0x0057, r27
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    75f2:	e8 95       	spm
    75f4:	11 24       	eor	r1, r1
    75f6:	af 5f       	subi	r26, 0xFF	; 255
    75f8:	8a 01       	movw	r16, r20
    75fa:	9b 01       	movw	r18, r22
    75fc:	0e 5f       	subi	r16, 0xFE	; 254

							/* Adjust counters */
							WordsInFlashPage      += 1;
    75fe:	1f 4f       	sbci	r17, 0xFF	; 255
							CurrFlashAddress.Long += 2;
    7600:	2f 4f       	sbci	r18, 0xFF	; 255
    7602:	3f 4f       	sbci	r19, 0xFF	; 255
    7604:	b9 01       	movw	r22, r18
    7606:	a8 01       	movw	r20, r16
    7608:	a0 34       	cpi	r26, 0x40	; 64
    760a:	71 f4       	brne	.+28     	; 0x7628 <EVENT_USB_Device_ControlRequest+0x1b6>
    760c:	0f c0       	rjmp	.+30     	; 0x762c <EVENT_USB_Device_ControlRequest+0x1ba>
    760e:	20 91 e8 00 	lds	r18, 0x00E8

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    7612:	2b 7f       	andi	r18, 0xFB	; 251
    7614:	20 93 e8 00 	sts	0x00E8, r18
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7618:	20 91 e8 00 	lds	r18, 0x00E8
    761c:	22 fd       	sbrc	r18, 2
    761e:	de cf       	rjmp	.-68     	; 0x75dc <EVENT_USB_Device_ControlRequest+0x16a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7620:	2e b3       	in	r18, 0x1e	; 30
    7622:	21 11       	cpse	r18, r1
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    7624:	f9 cf       	rjmp	.-14     	; 0x7618 <EVENT_USB_Device_ControlRequest+0x1a6>
    7626:	26 c1       	rjmp	.+588    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    7628:	00 97       	sbiw	r24, 0x00	; 0
    762a:	69 f6       	brne	.-102    	; 0x75c6 <EVENT_USB_Device_ControlRequest+0x154>
    762c:	f6 01       	movw	r30, r12
    762e:	c0 93 57 00 	sts	0x0057, r28
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    7632:	e8 95       	spm
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    7634:	07 b6       	in	r0, 0x37	; 55
    7636:	00 fc       	sbrc	r0, 0
    7638:	fd cf       	rjmp	.-6      	; 0x7634 <EVENT_USB_Device_ControlRequest+0x1c2>
    763a:	00 97       	sbiw	r24, 0x00	; 0
								boot_spm_busy_wait();
    763c:	09 f4       	brne	.+2      	; 0x7640 <EVENT_USB_Device_ControlRequest+0x1ce>
    763e:	c3 cf       	rjmp	.-122    	; 0x75c6 <EVENT_USB_Device_ControlRequest+0x154>
    7640:	f8 01       	movw	r30, r16

								/* Check if programming incomplete */
								if (WordsRemaining)
    7642:	d0 93 57 00 	sts	0x0057, r29
    7646:	e8 95       	spm
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    7648:	07 b6       	in	r0, 0x37	; 55
    764a:	00 fc       	sbrc	r0, 0
    764c:	fd cf       	rjmp	.-6      	; 0x7648 <EVENT_USB_Device_ControlRequest+0x1d6>
    764e:	68 01       	movw	r12, r16
									boot_spm_busy_wait();
    7650:	79 01       	movw	r14, r18
    7652:	a0 e0       	ldi	r26, 0x00	; 0
    7654:	b8 cf       	rjmp	.-144    	; 0x75c6 <EVENT_USB_Device_ControlRequest+0x154>
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
    7656:	80 91 62 01 	lds	r24, 0x0162
									WordsInFlashPage          = 0;
    765a:	90 91 63 01 	lds	r25, 0x0163
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
    765e:	90 93 65 01 	sts	0x0165, r25
    7662:	80 93 64 01 	sts	0x0164, r24
    7666:	81 e1       	ldi	r24, 0x11	; 17
    7668:	80 93 57 00 	sts	0x0057, r24
    766c:	e8 95       	spm

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
    766e:	29 c0       	rjmp	.+82     	; 0x76c2 <EVENT_USB_Device_ControlRequest+0x250>
    7670:	20 91 f3 00 	lds	r18, 0x00F3
    7674:	80 91 f2 00 	lds	r24, 0x00F2
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7678:	90 e0       	ldi	r25, 0x00	; 0
    767a:	92 2b       	or	r25, r18
    767c:	89 2b       	or	r24, r25
    767e:	a1 f0       	breq	.+40     	; 0x76a8 <EVENT_USB_Device_ControlRequest+0x236>
    7680:	60 91 f1 00 	lds	r22, 0x00F1
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    7684:	21 97       	sbiw	r28, 0x01	; 1
    7686:	80 91 64 01 	lds	r24, 0x0164
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    768a:	90 91 65 01 	lds	r25, 0x0165
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
    768e:	fb d3       	rcall	.+2038   	; 0x7e86 <__eewr_byte_m32u4>
    7690:	80 91 64 01 	lds	r24, 0x0164
    7694:	90 91 65 01 	lds	r25, 0x0165
    7698:	01 96       	adiw	r24, 0x01	; 1

							/* Adjust counters */
							StartAddr++;
    769a:	90 93 65 01 	sts	0x0165, r25
    769e:	80 93 64 01 	sts	0x0164, r24
    76a2:	20 97       	sbiw	r28, 0x00	; 0
    76a4:	29 f7       	brne	.-54     	; 0x7670 <EVENT_USB_Device_ControlRequest+0x1fe>
    76a6:	0d c0       	rjmp	.+26     	; 0x76c2 <EVENT_USB_Device_ControlRequest+0x250>
    76a8:	80 91 e8 00 	lds	r24, 0x00E8
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
    76ac:	8b 7f       	andi	r24, 0xFB	; 251
    76ae:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    76b2:	80 91 e8 00 	lds	r24, 0x00E8
    76b6:	82 fd       	sbrc	r24, 2
    76b8:	e3 cf       	rjmp	.-58     	; 0x7680 <EVENT_USB_Device_ControlRequest+0x20e>
    76ba:	8e b3       	in	r24, 0x1e	; 30
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    76bc:	81 11       	cpse	r24, r1
    76be:	f9 cf       	rjmp	.-14     	; 0x76b2 <EVENT_USB_Device_ControlRequest+0x240>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    76c0:	d9 c0       	rjmp	.+434    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    76c2:	80 e1       	ldi	r24, 0x10	; 16
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    76c4:	55 dd       	rcall	.-1366   	; 0x7170 <DiscardFillerBytes>
    76c6:	80 91 e8 00 	lds	r24, 0x00E8
    76ca:	8b 7f       	andi	r24, 0xFB	; 251
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
    76cc:	91 c0       	rjmp	.+290    	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x37e>
    76ce:	8e b3       	in	r24, 0x1e	; 30
    76d0:	88 23       	and	r24, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    76d2:	09 f4       	brne	.+2      	; 0x76d6 <EVENT_USB_Device_ControlRequest+0x264>
    76d4:	cf c0       	rjmp	.+414    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    76d6:	80 91 e8 00 	lds	r24, 0x00E8
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    76da:	80 ff       	sbrs	r24, 0
    76dc:	f8 cf       	rjmp	.-16     	; 0x76ce <EVENT_USB_Device_ControlRequest+0x25c>
    76de:	80 91 00 01 	lds	r24, 0x0100
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76e2:	89 30       	cpi	r24, 0x09	; 9
    76e4:	91 f0       	breq	.+36     	; 0x770a <EVENT_USB_Device_ControlRequest+0x298>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    76e6:	8a 30       	cpi	r24, 0x0A	; 10
    76e8:	59 f4       	brne	.+22     	; 0x7700 <EVENT_USB_Device_ControlRequest+0x28e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
    76ea:	80 91 6b 01 	lds	r24, 0x016B
    76ee:	81 30       	cpi	r24, 0x01	; 1
    76f0:	39 f4       	brne	.+14     	; 0x7700 <EVENT_USB_Device_ControlRequest+0x28e>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
    76f2:	90 91 64 01 	lds	r25, 0x0164
    76f6:	80 91 65 01 	lds	r24, 0x0165
    76fa:	90 93 f1 00 	sts	0x00F1, r25
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
    76fe:	02 c0       	rjmp	.+4      	; 0x7704 <EVENT_USB_Device_ControlRequest+0x292>
    7700:	80 91 69 01 	lds	r24, 0x0169
    7704:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7708:	70 c0       	rjmp	.+224    	; 0x77ea <EVENT_USB_Device_ControlRequest+0x378>
    770a:	20 91 64 01 	lds	r18, 0x0164
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
    770e:	30 91 65 01 	lds	r19, 0x0165
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7712:	c0 91 62 01 	lds	r28, 0x0162
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    7716:	d0 91 63 01 	lds	r29, 0x0163
    771a:	21 96       	adiw	r28, 0x01	; 1
    771c:	c2 1b       	sub	r28, r18
    771e:	d3 0b       	sbc	r29, r19
    7720:	80 91 6b 01 	lds	r24, 0x016B
    7724:	81 11       	cpse	r24, r1
    7726:	33 c0       	rjmp	.+102    	; 0x778e <EVENT_USB_Device_ControlRequest+0x31c>
    7728:	d6 95       	lsr	r29
    772a:	c7 95       	ror	r28

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
    772c:	c9 01       	movw	r24, r18
    772e:	20 91 66 01 	lds	r18, 0x0166
    7732:	a2 2f       	mov	r26, r18
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
    7734:	b0 e0       	ldi	r27, 0x00	; 0
    7736:	21 97       	sbiw	r28, 0x01	; 1

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    7738:	08 f1       	brcs	.+66     	; 0x777c <EVENT_USB_Device_ControlRequest+0x30a>
    773a:	40 91 f3 00 	lds	r20, 0x00F3
    773e:	20 91 f2 00 	lds	r18, 0x00F2

					while (WordsRemaining--)
    7742:	30 e0       	ldi	r19, 0x00	; 0
    7744:	34 2b       	or	r19, r20
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7746:	20 32       	cpi	r18, 0x20	; 32
    7748:	31 05       	cpc	r19, r1
    774a:	59 f0       	breq	.+22     	; 0x7762 <EVENT_USB_Device_ControlRequest+0x2f0>
    774c:	fc 01       	movw	r30, r24
    774e:	25 91       	lpm	r18, Z+
    7750:	34 91       	lpm	r19, Z
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    7752:	20 93 f1 00 	sts	0x00F1, r18
    7756:	30 93 f1 00 	sts	0x00F1, r19

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
    775a:	02 96       	adiw	r24, 0x02	; 2
    775c:	a1 1d       	adc	r26, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    775e:	b1 1d       	adc	r27, r1
    7760:	ea cf       	rjmp	.-44     	; 0x7736 <EVENT_USB_Device_ControlRequest+0x2c4>
				UEDATX = (Data >> 8);
    7762:	20 91 e8 00 	lds	r18, 0x00E8
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
    7766:	2e 7f       	andi	r18, 0xFE	; 254
    7768:	20 93 e8 00 	sts	0x00E8, r18
    776c:	20 91 e8 00 	lds	r18, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7770:	20 fd       	sbrc	r18, 0
    7772:	ec cf       	rjmp	.-40     	; 0x774c <EVENT_USB_Device_ControlRequest+0x2da>
    7774:	2e b3       	in	r18, 0x1e	; 30
    7776:	21 11       	cpse	r18, r1
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7778:	f9 cf       	rjmp	.-14     	; 0x776c <EVENT_USB_Device_ControlRequest+0x2fa>
    777a:	7c c0       	rjmp	.+248    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    777c:	80 91 62 01 	lds	r24, 0x0162
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    7780:	90 91 63 01 	lds	r25, 0x0163
    7784:	90 93 65 01 	sts	0x0165, r25
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
    7788:	80 93 64 01 	sts	0x0164, r24
    778c:	2b c0       	rjmp	.+86     	; 0x77e4 <EVENT_USB_Device_ControlRequest+0x372>
    778e:	82 30       	cpi	r24, 0x02	; 2
    7790:	49 f5       	brne	.+82     	; 0x77e4 <EVENT_USB_Device_ControlRequest+0x372>
    7792:	20 97       	sbiw	r28, 0x00	; 0
    7794:	39 f1       	breq	.+78     	; 0x77e4 <EVENT_USB_Device_ControlRequest+0x372>
    7796:	20 91 f3 00 	lds	r18, 0x00F3
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
    779a:	80 91 f2 00 	lds	r24, 0x00F2
				{
					while (BytesRemaining--)
    779e:	90 e0       	ldi	r25, 0x00	; 0
    77a0:	92 2b       	or	r25, r18
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    77a2:	80 97       	sbiw	r24, 0x20	; 32
    77a4:	91 f0       	breq	.+36     	; 0x77ca <EVENT_USB_Device_ControlRequest+0x358>
    77a6:	80 91 64 01 	lds	r24, 0x0164
    77aa:	90 91 65 01 	lds	r25, 0x0165
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    77ae:	63 d3       	rcall	.+1734   	; 0x7e76 <__eerd_byte_m32u4>
    77b0:	80 93 f1 00 	sts	0x00F1, r24
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
    77b4:	80 91 64 01 	lds	r24, 0x0164
    77b8:	90 91 65 01 	lds	r25, 0x0165
    77bc:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    77be:	90 93 65 01 	sts	0x0165, r25

						/* Adjust counters */
						StartAddr++;
    77c2:	80 93 64 01 	sts	0x0164, r24
    77c6:	21 97       	sbiw	r28, 0x01	; 1
    77c8:	e4 cf       	rjmp	.-56     	; 0x7792 <EVENT_USB_Device_ControlRequest+0x320>
    77ca:	80 91 e8 00 	lds	r24, 0x00E8
    77ce:	8e 7f       	andi	r24, 0xFE	; 254
    77d0:	80 93 e8 00 	sts	0x00E8, r24
    77d4:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    77d8:	80 fd       	sbrc	r24, 0
    77da:	e5 cf       	rjmp	.-54     	; 0x77a6 <EVENT_USB_Device_ControlRequest+0x334>
    77dc:	8e b3       	in	r24, 0x1e	; 30
    77de:	81 11       	cpse	r24, r1
    77e0:	f9 cf       	rjmp	.-14     	; 0x77d4 <EVENT_USB_Device_ControlRequest+0x362>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77e2:	48 c0       	rjmp	.+144    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    77e4:	82 e0       	ldi	r24, 0x02	; 2
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    77e6:	80 93 00 01 	sts	0x0100, r24
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    77ea:	80 91 e8 00 	lds	r24, 0x00E8
    77ee:	8e 7f       	andi	r24, 0xFE	; 254
    77f0:	80 93 e8 00 	sts	0x00E8, r24
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
    77f4:	36 c0       	rjmp	.+108    	; 0x7862 <EVENT_USB_Device_ControlRequest+0x3f0>
    77f6:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    77fa:	87 7f       	andi	r24, 0xF7	; 247
    77fc:	80 93 e8 00 	sts	0x00E8, r24
    7800:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7804:	80 fd       	sbrc	r24, 0
    7806:	04 c0       	rjmp	.+8      	; 0x7810 <EVENT_USB_Device_ControlRequest+0x39e>
    7808:	8e b3       	in	r24, 0x1e	; 30
    780a:	81 11       	cpse	r24, r1
    780c:	f9 cf       	rjmp	.-14     	; 0x7800 <EVENT_USB_Device_ControlRequest+0x38e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    780e:	32 c0       	rjmp	.+100    	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    7810:	80 91 72 01 	lds	r24, 0x0172
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    7814:	80 93 f1 00 	sts	0x00F1, r24
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    7818:	10 92 f1 00 	sts	0x00F1, r1
    781c:	10 92 f1 00 	sts	0x00F1, r1
				  return;
			}

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
    7820:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7824:	80 91 00 01 	lds	r24, 0x0100
    7828:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    782c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7830:	dc cf       	rjmp	.-72     	; 0x77ea <EVENT_USB_Device_ControlRequest+0x378>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
    7832:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7836:	87 7f       	andi	r24, 0xF7	; 247
    7838:	80 93 e8 00 	sts	0x00E8, r24
    783c:	10 92 72 01 	sts	0x0172, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7840:	10 c0       	rjmp	.+32     	; 0x7862 <EVENT_USB_Device_ControlRequest+0x3f0>
    7842:	80 91 e8 00 	lds	r24, 0x00E8
    7846:	87 7f       	andi	r24, 0xF7	; 247
    7848:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
    784c:	80 91 e8 00 	lds	r24, 0x00E8
    7850:	80 fd       	sbrc	r24, 0
    7852:	04 c0       	rjmp	.+8      	; 0x785c <EVENT_USB_Device_ControlRequest+0x3ea>
    7854:	8e b3       	in	r24, 0x1e	; 30
    7856:	81 11       	cpse	r24, r1
    7858:	f9 cf       	rjmp	.-14     	; 0x784c <EVENT_USB_Device_ControlRequest+0x3da>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    785a:	0c c0       	rjmp	.+24     	; 0x7874 <EVENT_USB_Device_ControlRequest+0x402>
    785c:	80 91 00 01 	lds	r24, 0x0100
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    7860:	51 cf       	rjmp	.-350    	; 0x7704 <EVENT_USB_Device_ControlRequest+0x292>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    7862:	df 91       	pop	r29
    7864:	cf 91       	pop	r28
    7866:	1f 91       	pop	r17
    7868:	0f 91       	pop	r16
				  return;
			}

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
    786a:	ff 90       	pop	r15
    786c:	ef 90       	pop	r14
    786e:	df 90       	pop	r13
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
    7870:	cf 90       	pop	r12
    7872:	ff c0       	rjmp	.+510    	; 0x7a72 <Endpoint_ClearStatusStage>
    7874:	df 91       	pop	r29
    7876:	cf 91       	pop	r28
    7878:	1f 91       	pop	r17
    787a:	0f 91       	pop	r16
    787c:	ff 90       	pop	r15
    787e:	ef 90       	pop	r14
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
    7880:	df 90       	pop	r13
    7882:	cf 90       	pop	r12
			break;
	}
}
    7884:	08 95       	ret

00007886 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    7886:	29 2f       	mov	r18, r25
    7888:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    788a:	22 30       	cpi	r18, 0x02	; 2
    788c:	31 05       	cpc	r19, r1
    788e:	59 f0       	breq	.+22     	; 0x78a6 <CALLBACK_USB_GetDescriptor+0x20>
    7890:	23 30       	cpi	r18, 0x03	; 3
    7892:	31 05       	cpc	r19, r1
    7894:	69 f0       	breq	.+26     	; 0x78b0 <CALLBACK_USB_GetDescriptor+0x2a>
    7896:	21 30       	cpi	r18, 0x01	; 1
    7898:	31 05       	cpc	r19, r1
    789a:	f9 f4       	brne	.+62     	; 0x78da <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    789c:	82 e1       	ldi	r24, 0x12	; 18
    789e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    78a0:	2f e4       	ldi	r18, 0x4F	; 79
    78a2:	31 e0       	ldi	r19, 0x01	; 1
    78a4:	1e c0       	rjmp	.+60     	; 0x78e2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    78a6:	8b e1       	ldi	r24, 0x1B	; 27
    78a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    78aa:	24 e3       	ldi	r18, 0x34	; 52
    78ac:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    78ae:	19 c0       	rjmp	.+50     	; 0x78e2 <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    78b0:	88 23       	and	r24, r24
    78b2:	49 f0       	breq	.+18     	; 0x78c6 <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    78b4:	81 30       	cpi	r24, 0x01	; 1
    78b6:	61 f0       	breq	.+24     	; 0x78d0 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    78b8:	82 30       	cpi	r24, 0x02	; 2
    78ba:	79 f4       	brne	.+30     	; 0x78da <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    78bc:	82 e1       	ldi	r24, 0x12	; 18
    78be:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    78c0:	22 e0       	ldi	r18, 0x02	; 2
    78c2:	31 e0       	ldi	r19, 0x01	; 1
    78c4:	0e c0       	rjmp	.+28     	; 0x78e2 <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    78c6:	84 e0       	ldi	r24, 0x04	; 4
    78c8:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    78ca:	20 e3       	ldi	r18, 0x30	; 48
    78cc:	31 e0       	ldi	r19, 0x01	; 1
    78ce:	09 c0       	rjmp	.+18     	; 0x78e2 <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    78d0:	88 e1       	ldi	r24, 0x18	; 24
    78d2:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    78d4:	26 e1       	ldi	r18, 0x16	; 22
    78d6:	31 e0       	ldi	r19, 0x01	; 1
    78d8:	04 c0       	rjmp	.+8      	; 0x78e2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    78de:	20 e0       	ldi	r18, 0x00	; 0
    78e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    78e2:	fa 01       	movw	r30, r20
    78e4:	31 83       	std	Z+1, r19	; 0x01
    78e6:	20 83       	st	Z, r18
	return Size;
}
    78e8:	08 95       	ret

000078ea <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    78ea:	07 b6       	in	r0, 0x37	; 55
    78ec:	00 fc       	sbrc	r0, 0
    78ee:	fd cf       	rjmp	.-6      	; 0x78ea <BootloaderAPI_ErasePage>
    78f0:	f9 99       	sbic	0x1f, 1	; 31
    78f2:	fe cf       	rjmp	.-4      	; 0x78f0 <BootloaderAPI_ErasePage+0x6>
    78f4:	23 e0       	ldi	r18, 0x03	; 3
    78f6:	fb 01       	movw	r30, r22
    78f8:	20 93 57 00 	sts	0x0057, r18
    78fc:	e8 95       	spm
	boot_spm_busy_wait();
    78fe:	07 b6       	in	r0, 0x37	; 55
    7900:	00 fc       	sbrc	r0, 0
    7902:	fd cf       	rjmp	.-6      	; 0x78fe <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    7904:	81 e1       	ldi	r24, 0x11	; 17
    7906:	80 93 57 00 	sts	0x0057, r24
    790a:	e8 95       	spm
    790c:	08 95       	ret

0000790e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    790e:	07 b6       	in	r0, 0x37	; 55
    7910:	00 fc       	sbrc	r0, 0
    7912:	fd cf       	rjmp	.-6      	; 0x790e <BootloaderAPI_WritePage>
    7914:	f9 99       	sbic	0x1f, 1	; 31
    7916:	fe cf       	rjmp	.-4      	; 0x7914 <BootloaderAPI_WritePage+0x6>
    7918:	25 e0       	ldi	r18, 0x05	; 5
    791a:	fb 01       	movw	r30, r22
    791c:	20 93 57 00 	sts	0x0057, r18
    7920:	e8 95       	spm
	boot_spm_busy_wait();
    7922:	07 b6       	in	r0, 0x37	; 55
    7924:	00 fc       	sbrc	r0, 0
    7926:	fd cf       	rjmp	.-6      	; 0x7922 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    7928:	81 e1       	ldi	r24, 0x11	; 17
    792a:	80 93 57 00 	sts	0x0057, r24
    792e:	e8 95       	spm
    7930:	08 95       	ret

00007932 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    7932:	07 b6       	in	r0, 0x37	; 55
    7934:	00 fc       	sbrc	r0, 0
    7936:	fd cf       	rjmp	.-6      	; 0x7932 <BootloaderAPI_FillWord>
    7938:	f9 99       	sbic	0x1f, 1	; 31
    793a:	fe cf       	rjmp	.-4      	; 0x7938 <BootloaderAPI_FillWord+0x6>
    793c:	21 e0       	ldi	r18, 0x01	; 1
    793e:	fb 01       	movw	r30, r22
    7940:	0a 01       	movw	r0, r20
    7942:	20 93 57 00 	sts	0x0057, r18
    7946:	e8 95       	spm
    7948:	11 24       	eor	r1, r1
    794a:	08 95       	ret

0000794c <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    794c:	21 e2       	ldi	r18, 0x21	; 33
    794e:	fc 01       	movw	r30, r24
    7950:	20 93 57 00 	sts	0x0057, r18
    7954:	84 91       	lpm	r24, Z
}
    7956:	08 95       	ret

00007958 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    7958:	29 e0       	ldi	r18, 0x09	; 9
    795a:	fc 01       	movw	r30, r24
    795c:	20 93 57 00 	sts	0x0057, r18
    7960:	84 91       	lpm	r24, Z
}
    7962:	08 95       	ret

00007964 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    7964:	e1 e0       	ldi	r30, 0x01	; 1
    7966:	f0 e0       	ldi	r31, 0x00	; 0
    7968:	89 e0       	ldi	r24, 0x09	; 9
    796a:	80 93 57 00 	sts	0x0057, r24
    796e:	84 91       	lpm	r24, Z
}
    7970:	08 95       	ret

00007972 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    7972:	07 b6       	in	r0, 0x37	; 55
    7974:	00 fc       	sbrc	r0, 0
    7976:	fd cf       	rjmp	.-6      	; 0x7972 <BootloaderAPI_WriteLock>
    7978:	f9 99       	sbic	0x1f, 1	; 31
    797a:	fe cf       	rjmp	.-4      	; 0x7978 <BootloaderAPI_WriteLock+0x6>
    797c:	80 95       	com	r24
    797e:	99 e0       	ldi	r25, 0x09	; 9
    7980:	e1 e0       	ldi	r30, 0x01	; 1
    7982:	f0 e0       	ldi	r31, 0x00	; 0
    7984:	08 2e       	mov	r0, r24
    7986:	90 93 57 00 	sts	0x0057, r25
    798a:	e8 95       	spm
    798c:	08 95       	ret

0000798e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    798e:	20 91 7d 01 	lds	r18, 0x017D
    7992:	30 91 7e 01 	lds	r19, 0x017E
    7996:	26 17       	cp	r18, r22
    7998:	37 07       	cpc	r19, r23
    799a:	48 f0       	brcs	.+18     	; 0x79ae <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    799c:	61 15       	cp	r22, r1
    799e:	71 05       	cpc	r23, r1
    79a0:	39 f4       	brne	.+14     	; 0x79b0 <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    79a2:	20 91 e8 00 	lds	r18, 0x00E8
    79a6:	2e 7f       	andi	r18, 0xFE	; 254
    79a8:	20 93 e8 00 	sts	0x00E8, r18
    79ac:	01 c0       	rjmp	.+2      	; 0x79b0 <Endpoint_Write_Control_Stream_LE+0x22>
    79ae:	b9 01       	movw	r22, r18
    79b0:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    79b2:	61 15       	cp	r22, r1
    79b4:	71 05       	cpc	r23, r1
    79b6:	a1 f1       	breq	.+104    	; 0x7a20 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    79b8:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    79ba:	22 23       	and	r18, r18
    79bc:	09 f4       	brne	.+2      	; 0x79c0 <Endpoint_Write_Control_Stream_LE+0x32>
    79be:	42 c0       	rjmp	.+132    	; 0x7a44 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    79c0:	25 30       	cpi	r18, 0x05	; 5
    79c2:	09 f4       	brne	.+2      	; 0x79c6 <Endpoint_Write_Control_Stream_LE+0x38>
    79c4:	41 c0       	rjmp	.+130    	; 0x7a48 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    79c6:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    79ca:	23 fd       	sbrc	r18, 3
    79cc:	3f c0       	rjmp	.+126    	; 0x7a4c <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79ce:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    79d2:	22 fd       	sbrc	r18, 2
    79d4:	31 c0       	rjmp	.+98     	; 0x7a38 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79d6:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    79da:	20 ff       	sbrs	r18, 0
    79dc:	ea cf       	rjmp	.-44     	; 0x79b2 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    79de:	40 91 f3 00 	lds	r20, 0x00F3
    79e2:	20 91 f2 00 	lds	r18, 0x00F2
    79e6:	30 e0       	ldi	r19, 0x00	; 0
    79e8:	34 2b       	or	r19, r20
    79ea:	fc 01       	movw	r30, r24
    79ec:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    79ee:	61 15       	cp	r22, r1
    79f0:	71 05       	cpc	r23, r1
    79f2:	59 f0       	breq	.+22     	; 0x7a0a <Endpoint_Write_Control_Stream_LE+0x7c>
    79f4:	20 32       	cpi	r18, 0x20	; 32
    79f6:	31 05       	cpc	r19, r1
    79f8:	40 f4       	brcc	.+16     	; 0x7a0a <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    79fa:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    79fc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7a00:	61 50       	subi	r22, 0x01	; 1
    7a02:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7a04:	2f 5f       	subi	r18, 0xFF	; 255
    7a06:	3f 4f       	sbci	r19, 0xFF	; 255
    7a08:	f1 cf       	rjmp	.-30     	; 0x79ec <Endpoint_Write_Control_Stream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7a0a:	41 e0       	ldi	r20, 0x01	; 1
    7a0c:	20 32       	cpi	r18, 0x20	; 32
    7a0e:	31 05       	cpc	r19, r1
    7a10:	09 f0       	breq	.+2      	; 0x7a14 <Endpoint_Write_Control_Stream_LE+0x86>
    7a12:	40 e0       	ldi	r20, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7a14:	20 91 e8 00 	lds	r18, 0x00E8
    7a18:	2e 7f       	andi	r18, 0xFE	; 254
    7a1a:	20 93 e8 00 	sts	0x00E8, r18
    7a1e:	c9 cf       	rjmp	.-110    	; 0x79b2 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7a20:	41 11       	cpse	r20, r1
    7a22:	ca cf       	rjmp	.-108    	; 0x79b8 <Endpoint_Write_Control_Stream_LE+0x2a>
    7a24:	09 c0       	rjmp	.+18     	; 0x7a38 <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7a26:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7a28:	88 23       	and	r24, r24
    7a2a:	61 f0       	breq	.+24     	; 0x7a44 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7a2c:	85 30       	cpi	r24, 0x05	; 5
    7a2e:	61 f0       	breq	.+24     	; 0x7a48 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7a30:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7a34:	83 fd       	sbrc	r24, 3
    7a36:	0a c0       	rjmp	.+20     	; 0x7a4c <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7a38:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7a3c:	82 ff       	sbrs	r24, 2
    7a3e:	f3 cf       	rjmp	.-26     	; 0x7a26 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7a44:	82 e0       	ldi	r24, 0x02	; 2
    7a46:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7a48:	83 e0       	ldi	r24, 0x03	; 3
    7a4a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7a4c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7a4e:	08 95       	ret

00007a50 <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    7a50:	eb ee       	ldi	r30, 0xEB	; 235
    7a52:	f0 e0       	ldi	r31, 0x00	; 0
    7a54:	80 81       	ld	r24, Z
    7a56:	81 60       	ori	r24, 0x01	; 1
    7a58:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    7a5a:	ed ee       	ldi	r30, 0xED	; 237
    7a5c:	f0 e0       	ldi	r31, 0x00	; 0
    7a5e:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    7a60:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    7a64:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    7a66:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7a6a:	88 1f       	adc	r24, r24
    7a6c:	88 27       	eor	r24, r24
    7a6e:	88 1f       	adc	r24, r24
    7a70:	08 95       	ret

00007a72 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7a72:	80 91 77 01 	lds	r24, 0x0177
    7a76:	87 ff       	sbrs	r24, 7
    7a78:	0f c0       	rjmp	.+30     	; 0x7a98 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7a7a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    7a7e:	82 fd       	sbrc	r24, 2
    7a80:	04 c0       	rjmp	.+8      	; 0x7a8a <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7a82:	8e b3       	in	r24, 0x1e	; 30
    7a84:	81 11       	cpse	r24, r1
    7a86:	f9 cf       	rjmp	.-14     	; 0x7a7a <Endpoint_ClearStatusStage+0x8>
    7a88:	10 c0       	rjmp	.+32     	; 0x7aaa <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7a8a:	80 91 e8 00 	lds	r24, 0x00E8
    7a8e:	8b 7f       	andi	r24, 0xFB	; 251
    7a90:	0a c0       	rjmp	.+20     	; 0x7aa6 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7a92:	8e b3       	in	r24, 0x1e	; 30
    7a94:	88 23       	and	r24, r24
    7a96:	49 f0       	breq	.+18     	; 0x7aaa <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7a98:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7a9c:	80 ff       	sbrs	r24, 0
    7a9e:	f9 cf       	rjmp	.-14     	; 0x7a92 <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7aa0:	80 91 e8 00 	lds	r24, 0x00E8
    7aa4:	8e 7f       	andi	r24, 0xFE	; 254
    7aa6:	80 93 e8 00 	sts	0x00E8, r24
    7aaa:	08 95       	ret

00007aac <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    7aac:	62 d0       	rcall	.+196    	; 0x7b72 <USB_INT_DisableAllInterrupts>
    7aae:	69 d0       	rcall	.+210    	; 0x7b82 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7ab0:	e0 ee       	ldi	r30, 0xE0	; 224
    7ab2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7ab4:	80 81       	ld	r24, Z
    7ab6:	81 60       	ori	r24, 0x01	; 1
    7ab8:	80 83       	st	Z, r24
    7aba:	e8 ed       	ldi	r30, 0xD8	; 216
    7abc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    7abe:	80 81       	ld	r24, Z
    7ac0:	8f 77       	andi	r24, 0x7F	; 127
    7ac2:	80 83       	st	Z, r24
    7ac4:	19 bc       	out	0x29, r1	; 41
    7ac6:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7ac8:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    7aca:	8c 91       	ld	r24, X
    7acc:	8e 7f       	andi	r24, 0xFE	; 254
    7ace:	8c 93       	st	X, r24
    7ad0:	80 81       	ld	r24, Z
    7ad2:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7ad4:	80 83       	st	Z, r24
    7ad6:	10 92 76 01 	sts	0x0176, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    7ada:	08 95       	ret

00007adc <USB_ResetInterface>:
    7adc:	0f 93       	push	r16
    7ade:	1f 93       	push	r17
}

void USB_ResetInterface(void)
{
    7ae0:	cf 93       	push	r28
    7ae2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7ae4:	46 d0       	rcall	.+140    	; 0x7b72 <USB_INT_DisableAllInterrupts>
    7ae6:	4d d0       	rcall	.+154    	; 0x7b82 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7ae8:	c8 ed       	ldi	r28, 0xD8	; 216
    7aea:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7aec:	88 81       	ld	r24, Y
    7aee:	8f 77       	andi	r24, 0x7F	; 127
    7af0:	88 83       	st	Y, r24
    7af2:	88 81       	ld	r24, Y
    7af4:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    7af6:	88 83       	st	Y, r24
    7af8:	88 81       	ld	r24, Y
    7afa:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7afc:	88 83       	st	Y, r24
    7afe:	19 bc       	out	0x29, r1	; 41
    7b00:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b02:	10 92 75 01 	sts	0x0175, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    7b06:	00 ee       	ldi	r16, 0xE0	; 224
    7b08:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7b0a:	f8 01       	movw	r30, r16
    7b0c:	80 81       	ld	r24, Z
    7b0e:	8b 7f       	andi	r24, 0xFB	; 251
    7b10:	80 83       	st	Z, r24
    7b12:	88 81       	ld	r24, Y
    7b14:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7b16:	88 83       	st	Y, r24
    7b18:	42 e2       	ldi	r20, 0x22	; 34
    7b1a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7b1c:	80 e0       	ldi	r24, 0x00	; 0
    7b1e:	98 df       	rcall	.-208    	; 0x7a50 <Endpoint_ConfigureEndpoint_Prv>
    7b20:	e1 ee       	ldi	r30, 0xE1	; 225
    7b22:	f0 e0       	ldi	r31, 0x00	; 0
    7b24:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7b26:	8e 7f       	andi	r24, 0xFE	; 254
    7b28:	80 83       	st	Z, r24
    7b2a:	e2 ee       	ldi	r30, 0xE2	; 226
    7b2c:	f0 e0       	ldi	r31, 0x00	; 0
    7b2e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7b30:	81 60       	ori	r24, 0x01	; 1
    7b32:	80 83       	st	Z, r24
    7b34:	80 81       	ld	r24, Z
    7b36:	88 60       	ori	r24, 0x08	; 8
    7b38:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7b3a:	f8 01       	movw	r30, r16
    7b3c:	80 81       	ld	r24, Z
    7b3e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7b40:	80 83       	st	Z, r24
    7b42:	88 81       	ld	r24, Y
    7b44:	80 61       	ori	r24, 0x10	; 16
    7b46:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7b48:	df 91       	pop	r29
    7b4a:	cf 91       	pop	r28
    7b4c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7b4e:	0f 91       	pop	r16
    7b50:	08 95       	ret

00007b52 <USB_Init>:
    7b52:	e8 ed       	ldi	r30, 0xD8	; 216
    7b54:	f0 e0       	ldi	r31, 0x00	; 0
    7b56:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7b58:	8f 7e       	andi	r24, 0xEF	; 239
    7b5a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7b5c:	e7 ed       	ldi	r30, 0xD7	; 215
    7b5e:	f0 e0       	ldi	r31, 0x00	; 0
    7b60:	80 81       	ld	r24, Z
    7b62:	81 60       	ori	r24, 0x01	; 1
    7b64:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7b66:	84 e0       	ldi	r24, 0x04	; 4
    7b68:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7b6a:	81 e0       	ldi	r24, 0x01	; 1
    7b6c:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
    7b70:	b5 cf       	rjmp	.-150    	; 0x7adc <USB_ResetInterface>

00007b72 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7b72:	e8 ed       	ldi	r30, 0xD8	; 216
    7b74:	f0 e0       	ldi	r31, 0x00	; 0
    7b76:	80 81       	ld	r24, Z
    7b78:	8e 7f       	andi	r24, 0xFE	; 254
    7b7a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7b7c:	10 92 e2 00 	sts	0x00E2, r1
    7b80:	08 95       	ret

00007b82 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7b82:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7b86:	10 92 e1 00 	sts	0x00E1, r1
    7b8a:	08 95       	ret

00007b8c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7b8c:	1f 92       	push	r1
    7b8e:	0f 92       	push	r0
    7b90:	0f b6       	in	r0, 0x3f	; 63
    7b92:	0f 92       	push	r0
    7b94:	11 24       	eor	r1, r1
    7b96:	2f 93       	push	r18
    7b98:	3f 93       	push	r19
    7b9a:	4f 93       	push	r20
    7b9c:	5f 93       	push	r21
    7b9e:	6f 93       	push	r22
    7ba0:	7f 93       	push	r23
    7ba2:	8f 93       	push	r24
    7ba4:	9f 93       	push	r25
    7ba6:	af 93       	push	r26
    7ba8:	bf 93       	push	r27
    7baa:	ef 93       	push	r30
    7bac:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7bae:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7bb2:	80 ff       	sbrs	r24, 0
    7bb4:	1b c0       	rjmp	.+54     	; 0x7bec <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7bb6:	80 91 d8 00 	lds	r24, 0x00D8
    7bba:	80 ff       	sbrs	r24, 0
    7bbc:	17 c0       	rjmp	.+46     	; 0x7bec <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7bbe:	80 91 da 00 	lds	r24, 0x00DA
    7bc2:	8e 7f       	andi	r24, 0xFE	; 254
    7bc4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7bc8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7bcc:	80 ff       	sbrs	r24, 0
    7bce:	0b c0       	rjmp	.+22     	; 0x7be6 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7bd0:	80 e1       	ldi	r24, 0x10	; 16
    7bd2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7bd4:	82 e1       	ldi	r24, 0x12	; 18
    7bd6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7bd8:	09 b4       	in	r0, 0x29	; 41
    7bda:	00 fe       	sbrs	r0, 0
    7bdc:	fd cf       	rjmp	.-6      	; 0x7bd8 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7bde:	81 e0       	ldi	r24, 0x01	; 1
    7be0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7be2:	40 d1       	rcall	.+640    	; 0x7e64 <USB_Event_Stub>
    7be4:	03 c0       	rjmp	.+6      	; 0x7bec <__vector_10+0x60>
    7be6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7be8:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7bea:	3c d1       	rcall	.+632    	; 0x7e64 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7bec:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7bf0:	80 ff       	sbrs	r24, 0
    7bf2:	17 c0       	rjmp	.+46     	; 0x7c22 <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7bf4:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7bf8:	80 ff       	sbrs	r24, 0
    7bfa:	13 c0       	rjmp	.+38     	; 0x7c22 <__vector_10+0x96>
    7bfc:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7c00:	8e 7f       	andi	r24, 0xFE	; 254
    7c02:	80 93 e2 00 	sts	0x00E2, r24
    7c06:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7c0a:	80 61       	ori	r24, 0x10	; 16
    7c0c:	80 93 e2 00 	sts	0x00E2, r24
    7c10:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7c14:	80 62       	ori	r24, 0x20	; 32
    7c16:	80 93 d8 00 	sts	0x00D8, r24
    7c1a:	19 bc       	out	0x29, r1	; 41
    7c1c:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7c1e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7c20:	21 d1       	rcall	.+578    	; 0x7e64 <USB_Event_Stub>
    7c22:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7c26:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7c28:	2e c0       	rjmp	.+92     	; 0x7c86 <__vector_10+0xfa>
    7c2a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7c2e:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7c30:	2a c0       	rjmp	.+84     	; 0x7c86 <__vector_10+0xfa>
    7c32:	80 e1       	ldi	r24, 0x10	; 16
    7c34:	89 bd       	out	0x29, r24	; 41
    7c36:	82 e1       	ldi	r24, 0x12	; 18

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7c38:	89 bd       	out	0x29, r24	; 41
    7c3a:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7c3c:	00 fe       	sbrs	r0, 0
    7c3e:	fd cf       	rjmp	.-6      	; 0x7c3a <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7c40:	80 91 d8 00 	lds	r24, 0x00D8
    7c44:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7c46:	80 93 d8 00 	sts	0x00D8, r24
    7c4a:	80 91 e1 00 	lds	r24, 0x00E1
    7c4e:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7c50:	80 93 e1 00 	sts	0x00E1, r24
    7c54:	80 91 e2 00 	lds	r24, 0x00E2
    7c58:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7c5a:	80 93 e2 00 	sts	0x00E2, r24
    7c5e:	80 91 e2 00 	lds	r24, 0x00E2
    7c62:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7c64:	80 93 e2 00 	sts	0x00E2, r24
    7c68:	80 91 75 01 	lds	r24, 0x0175
    7c6c:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7c6e:	11 f0       	breq	.+4      	; 0x7c74 <__vector_10+0xe8>
    7c70:	84 e0       	ldi	r24, 0x04	; 4
    7c72:	07 c0       	rjmp	.+14     	; 0x7c82 <__vector_10+0xf6>
    7c74:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    7c78:	87 fd       	sbrc	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7c7a:	02 c0       	rjmp	.+4      	; 0x7c80 <__vector_10+0xf4>
    7c7c:	81 e0       	ldi	r24, 0x01	; 1
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7c7e:	01 c0       	rjmp	.+2      	; 0x7c82 <__vector_10+0xf6>
    7c80:	83 e0       	ldi	r24, 0x03	; 3
    7c82:	8e bb       	out	0x1e, r24	; 30
    7c84:	ef d0       	rcall	.+478    	; 0x7e64 <USB_Event_Stub>
    7c86:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7c8a:	83 ff       	sbrs	r24, 3
    7c8c:	21 c0       	rjmp	.+66     	; 0x7cd0 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7c8e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7c92:	83 ff       	sbrs	r24, 3
    7c94:	1d c0       	rjmp	.+58     	; 0x7cd0 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7c96:	80 91 e1 00 	lds	r24, 0x00E1
    7c9a:	87 7f       	andi	r24, 0xF7	; 247
    7c9c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7ca0:	82 e0       	ldi	r24, 0x02	; 2
    7ca2:	8e bb       	out	0x1e, r24	; 30
    7ca4:	10 92 75 01 	sts	0x0175, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7ca8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7cac:	8e 7f       	andi	r24, 0xFE	; 254
    7cae:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7cb2:	80 91 e2 00 	lds	r24, 0x00E2
    7cb6:	8e 7f       	andi	r24, 0xFE	; 254
    7cb8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7cbc:	80 91 e2 00 	lds	r24, 0x00E2
    7cc0:	80 61       	ori	r24, 0x10	; 16
    7cc2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7cc6:	42 e2       	ldi	r20, 0x22	; 34
    7cc8:	60 e0       	ldi	r22, 0x00	; 0
    7cca:	80 e0       	ldi	r24, 0x00	; 0
    7ccc:	c1 de       	rcall	.-638    	; 0x7a50 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7cce:	ca d0       	rcall	.+404    	; 0x7e64 <USB_Event_Stub>
    7cd0:	ff 91       	pop	r31
    7cd2:	ef 91       	pop	r30
    7cd4:	bf 91       	pop	r27
    7cd6:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7cd8:	9f 91       	pop	r25
    7cda:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7cdc:	7f 91       	pop	r23
    7cde:	6f 91       	pop	r22
    7ce0:	5f 91       	pop	r21
    7ce2:	4f 91       	pop	r20
    7ce4:	3f 91       	pop	r19
    7ce6:	2f 91       	pop	r18
    7ce8:	0f 90       	pop	r0
    7cea:	0f be       	out	0x3f, r0	; 63
    7cec:	0f 90       	pop	r0
    7cee:	1f 90       	pop	r1
    7cf0:	18 95       	reti

00007cf2 <USB_Device_ProcessControlRequest>:
    7cf2:	1f 93       	push	r17
    7cf4:	cf 93       	push	r28
    7cf6:	df 93       	push	r29
    7cf8:	00 d0       	rcall	.+0      	; 0x7cfa <USB_Device_ProcessControlRequest+0x8>
    7cfa:	cd b7       	in	r28, 0x3d	; 61
    7cfc:	de b7       	in	r29, 0x3e	; 62
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7cfe:	e7 e7       	ldi	r30, 0x77	; 119
    7d00:	f1 e0       	ldi	r31, 0x01	; 1
    7d02:	88 e0       	ldi	r24, 0x08	; 8
    7d04:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7d06:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7d0a:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7d0c:	8e 13       	cpse	r24, r30
    7d0e:	fb cf       	rjmp	.-10     	; 0x7d06 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7d10:	b0 db       	rcall	.-2208   	; 0x7472 <EVENT_USB_Device_ControlRequest>
    7d12:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d16:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7d18:	91 c0       	rjmp	.+290    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d1a:	80 91 77 01 	lds	r24, 0x0177
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7d1e:	90 91 78 01 	lds	r25, 0x0178

		switch (USB_ControlRequest.bRequest)
    7d22:	96 30       	cpi	r25, 0x06	; 6
    7d24:	e1 f1       	breq	.+120    	; 0x7d9e <USB_Device_ProcessControlRequest+0xac>
    7d26:	28 f4       	brcc	.+10     	; 0x7d32 <USB_Device_ProcessControlRequest+0x40>
    7d28:	99 23       	and	r25, r25
    7d2a:	51 f0       	breq	.+20     	; 0x7d40 <USB_Device_ProcessControlRequest+0x4e>
    7d2c:	95 30       	cpi	r25, 0x05	; 5
    7d2e:	b1 f0       	breq	.+44     	; 0x7d5c <USB_Device_ProcessControlRequest+0x6a>
    7d30:	85 c0       	rjmp	.+266    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d32:	98 30       	cpi	r25, 0x08	; 8
    7d34:	09 f4       	brne	.+2      	; 0x7d38 <USB_Device_ProcessControlRequest+0x46>
    7d36:	55 c0       	rjmp	.+170    	; 0x7de2 <USB_Device_ProcessControlRequest+0xf0>
    7d38:	99 30       	cpi	r25, 0x09	; 9
    7d3a:	09 f4       	brne	.+2      	; 0x7d3e <USB_Device_ProcessControlRequest+0x4c>
    7d3c:	64 c0       	rjmp	.+200    	; 0x7e06 <USB_Device_ProcessControlRequest+0x114>
    7d3e:	7e c0       	rjmp	.+252    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d40:	8d 7f       	andi	r24, 0xFD	; 253
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d42:	80 38       	cpi	r24, 0x80	; 128
    7d44:	09 f0       	breq	.+2      	; 0x7d48 <USB_Device_ProcessControlRequest+0x56>
    7d46:	7a c0       	rjmp	.+244    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d4c:	87 7f       	andi	r24, 0xF7	; 247
    7d4e:	80 93 e8 00 	sts	0x00E8, r24
    7d52:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7d56:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7d5a:	4e c0       	rjmp	.+156    	; 0x7df8 <USB_Device_ProcessControlRequest+0x106>
    7d5c:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d5e:	6e c0       	rjmp	.+220    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d60:	10 91 79 01 	lds	r17, 0x0179
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7d64:	1f 77       	andi	r17, 0x7F	; 127
    7d66:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d6a:	80 78       	andi	r24, 0x80	; 128
    7d6c:	81 2b       	or	r24, r17
    7d6e:	80 93 e3 00 	sts	0x00E3, r24
    7d72:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d76:	87 7f       	andi	r24, 0xF7	; 247
    7d78:	80 93 e8 00 	sts	0x00E8, r24
    7d7c:	7a de       	rcall	.-780    	; 0x7a72 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d82:	80 ff       	sbrs	r24, 0
    7d84:	fc cf       	rjmp	.-8      	; 0x7d7e <USB_Device_ProcessControlRequest+0x8c>

	while (!(Endpoint_IsINReady()));
    7d86:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7d8a:	80 68       	ori	r24, 0x80	; 128
    7d8c:	80 93 e3 00 	sts	0x00E3, r24
    7d90:	11 11       	cpse	r17, r1
    7d92:	02 c0       	rjmp	.+4      	; 0x7d98 <USB_Device_ProcessControlRequest+0xa6>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d94:	82 e0       	ldi	r24, 0x02	; 2
    7d96:	01 c0       	rjmp	.+2      	; 0x7d9a <USB_Device_ProcessControlRequest+0xa8>
    7d98:	83 e0       	ldi	r24, 0x03	; 3
    7d9a:	8e bb       	out	0x1e, r24	; 30
    7d9c:	4f c0       	rjmp	.+158    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7d9e:	80 58       	subi	r24, 0x80	; 128
    7da0:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7da2:	08 f0       	brcs	.+2      	; 0x7da6 <USB_Device_ProcessControlRequest+0xb4>
    7da4:	4b c0       	rjmp	.+150    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7da6:	60 91 7b 01 	lds	r22, 0x017B
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7daa:	70 91 7c 01 	lds	r23, 0x017C
    7dae:	ae 01       	movw	r20, r28
    7db0:	4f 5f       	subi	r20, 0xFF	; 255
    7db2:	5f 4f       	sbci	r21, 0xFF	; 255
    7db4:	80 91 79 01 	lds	r24, 0x0179
    7db8:	90 91 7a 01 	lds	r25, 0x017A
    7dbc:	64 dd       	rcall	.-1336   	; 0x7886 <CALLBACK_USB_GetDescriptor>
    7dbe:	bc 01       	movw	r22, r24
    7dc0:	89 2b       	or	r24, r25
    7dc2:	09 f4       	brne	.+2      	; 0x7dc6 <USB_Device_ProcessControlRequest+0xd4>
    7dc4:	3b c0       	rjmp	.+118    	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7dc6:	90 91 e8 00 	lds	r25, 0x00E8
    7dca:	97 7f       	andi	r25, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dcc:	90 93 e8 00 	sts	0x00E8, r25
    7dd0:	89 81       	ldd	r24, Y+1	; 0x01
    7dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    7dd4:	dc dd       	rcall	.-1096   	; 0x798e <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7dd6:	80 91 e8 00 	lds	r24, 0x00E8
    7dda:	8b 7f       	andi	r24, 0xFB	; 251
    7ddc:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    7de0:	2d c0       	rjmp	.+90     	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7de2:	80 38       	cpi	r24, 0x80	; 128
    7de4:	59 f5       	brne	.+86     	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7de6:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dea:	87 7f       	andi	r24, 0xF7	; 247
    7dec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7df0:	80 91 75 01 	lds	r24, 0x0175
    7df4:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7df8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7dfc:	8e 7f       	andi	r24, 0xFE	; 254
    7dfe:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    7e02:	37 de       	rcall	.-914    	; 0x7a72 <Endpoint_ClearStatusStage>
    7e04:	1b c0       	rjmp	.+54     	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7e06:	81 11       	cpse	r24, r1
    7e08:	19 c0       	rjmp	.+50     	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e0a:	90 91 79 01 	lds	r25, 0x0179
    7e0e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e10:	a8 f4       	brcc	.+42     	; 0x7e3c <USB_Device_ProcessControlRequest+0x14a>
    7e12:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e16:	87 7f       	andi	r24, 0xF7	; 247
    7e18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e1c:	90 93 75 01 	sts	0x0175, r25
    7e20:	28 de       	rcall	.-944    	; 0x7a72 <Endpoint_ClearStatusStage>
    7e22:	80 91 75 01 	lds	r24, 0x0175
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e26:	81 11       	cpse	r24, r1
    7e28:	06 c0       	rjmp	.+12     	; 0x7e36 <USB_Device_ProcessControlRequest+0x144>

	Endpoint_ClearStatusStage();
    7e2a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    7e2e:	87 fd       	sbrc	r24, 7
    7e30:	02 c0       	rjmp	.+4      	; 0x7e36 <USB_Device_ProcessControlRequest+0x144>
    7e32:	81 e0       	ldi	r24, 0x01	; 1
    7e34:	01 c0       	rjmp	.+2      	; 0x7e38 <USB_Device_ProcessControlRequest+0x146>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e36:	84 e0       	ldi	r24, 0x04	; 4
    7e38:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e3a:	14 d0       	rcall	.+40     	; 0x7e64 <USB_Event_Stub>
    7e3c:	80 91 e8 00 	lds	r24, 0x00E8
    7e40:	83 ff       	sbrs	r24, 3
    7e42:	0a c0       	rjmp	.+20     	; 0x7e58 <USB_Device_ProcessControlRequest+0x166>
    7e44:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    7e48:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e4a:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e4e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e52:	80 62       	ori	r24, 0x20	; 32
    7e54:	80 93 eb 00 	sts	0x00EB, r24
    7e58:	0f 90       	pop	r0
    7e5a:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	1f 91       	pop	r17
    7e62:	08 95       	ret

00007e64 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e64:	08 95       	ret

00007e66 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e66:	8e b3       	in	r24, 0x1e	; 30
    7e68:	88 23       	and	r24, r24
    7e6a:	21 f0       	breq	.+8      	; 0x7e74 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e6c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7e70:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7e72:	3f cf       	rjmp	.-386    	; 0x7cf2 <USB_Device_ProcessControlRequest>
    7e74:	08 95       	ret

00007e76 <__eerd_byte_m32u4>:
    7e76:	f9 99       	sbic	0x1f, 1	; 31
    7e78:	fe cf       	rjmp	.-4      	; 0x7e76 <__eerd_byte_m32u4>
    7e7a:	92 bd       	out	0x22, r25	; 34
    7e7c:	81 bd       	out	0x21, r24	; 33
    7e7e:	f8 9a       	sbi	0x1f, 0	; 31
    7e80:	99 27       	eor	r25, r25
    7e82:	80 b5       	in	r24, 0x20	; 32
    7e84:	08 95       	ret

00007e86 <__eewr_byte_m32u4>:
    7e86:	26 2f       	mov	r18, r22

00007e88 <__eewr_r18_m32u4>:
    7e88:	f9 99       	sbic	0x1f, 1	; 31
    7e8a:	fe cf       	rjmp	.-4      	; 0x7e88 <__eewr_r18_m32u4>
    7e8c:	1f ba       	out	0x1f, r1	; 31
    7e8e:	92 bd       	out	0x22, r25	; 34
    7e90:	81 bd       	out	0x21, r24	; 33
    7e92:	20 bd       	out	0x20, r18	; 32
    7e94:	0f b6       	in	r0, 0x3f	; 63
    7e96:	f8 94       	cli
    7e98:	fa 9a       	sbi	0x1f, 2	; 31
    7e9a:	f9 9a       	sbi	0x1f, 1	; 31
    7e9c:	0f be       	out	0x3f, r0	; 63
    7e9e:	01 96       	adiw	r24, 0x01	; 1
    7ea0:	08 95       	ret

00007ea2 <_exit>:
    7ea2:	f8 94       	cli

00007ea4 <__stop_program>:
    7ea4:	ff cf       	rjmp	.-2      	; 0x7ea4 <__stop_program>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	a4 cc       	rjmp	.-1720   	; 0x78ea <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
    7fa2:	b5 cc       	rjmp	.-1686   	; 0x790e <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa4:	c6 cc       	rjmp	.-1652   	; 0x7932 <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    7fa6:	d2 cc       	rjmp	.-1628   	; 0x794c <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa8:	d7 cc       	rjmp	.-1618   	; 0x7958 <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	dc cc       	rjmp	.-1608   	; 0x7964 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fac:	e2 cc       	rjmp	.-1596   	; 0x7972 <BootloaderAPI_WriteLock>

00007fae <BootloaderAPI_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPI_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPI_UNUSED5>:
    7fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	10 df       	rcall	.-480    	; 0x7e1e <USB_Device_ProcessControlRequest+0x12c>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <Endpoint_Write_Control_Stream_LE+0x68>
