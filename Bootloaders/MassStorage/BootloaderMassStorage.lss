
BootloaderMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  00007dde  00001632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dde  00007000  00007000  00000854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00007fa0  00007fa0  000017b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00007fe0  00007fe0  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00007ff8  00007ff8  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .boot_aux     0000073c  00006810  00006810  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .boot_aux_trampoline 00000004  00006800  00006800  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss          0000000b  00800282  00800282  000017ec  2**0
                  ALLOC
  8 .noinit       00000002  0080028d  0080028d  000017ec  2**0
                  ALLOC
  9 .stab         00000204  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .stabstr      00000119  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000370  00000000  00000000  00001b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00006d8f  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000022af  00000000  00000000  00008c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000026b7  00000000  00000000  0000aece  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000990  00000000  00000000  0000d588  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000028a3  00000000  00000000  0000df18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00003a32  00000000  00000000  000107bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000468  00000000  00000000  000141f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	8a c0       	rjmp	.+276    	; 0x711a <__bad_interrupt>
    7006:	00 00       	nop
    7008:	88 c0       	rjmp	.+272    	; 0x711a <__bad_interrupt>
    700a:	00 00       	nop
    700c:	86 c0       	rjmp	.+268    	; 0x711a <__bad_interrupt>
    700e:	00 00       	nop
    7010:	84 c0       	rjmp	.+264    	; 0x711a <__bad_interrupt>
    7012:	00 00       	nop
    7014:	82 c0       	rjmp	.+260    	; 0x711a <__bad_interrupt>
    7016:	00 00       	nop
    7018:	80 c0       	rjmp	.+256    	; 0x711a <__bad_interrupt>
    701a:	00 00       	nop
    701c:	7e c0       	rjmp	.+252    	; 0x711a <__bad_interrupt>
    701e:	00 00       	nop
    7020:	7c c0       	rjmp	.+248    	; 0x711a <__bad_interrupt>
    7022:	00 00       	nop
    7024:	7a c0       	rjmp	.+244    	; 0x711a <__bad_interrupt>
    7026:	00 00       	nop
    7028:	2e c3       	rjmp	.+1628   	; 0x7686 <__vector_10>
    702a:	00 00       	nop
    702c:	e4 c3       	rjmp	.+1992   	; 0x77f6 <__vector_11>
    702e:	00 00       	nop
    7030:	74 c0       	rjmp	.+232    	; 0x711a <__bad_interrupt>
    7032:	00 00       	nop
    7034:	72 c0       	rjmp	.+228    	; 0x711a <__bad_interrupt>
    7036:	00 00       	nop
    7038:	70 c0       	rjmp	.+224    	; 0x711a <__bad_interrupt>
    703a:	00 00       	nop
    703c:	6e c0       	rjmp	.+220    	; 0x711a <__bad_interrupt>
    703e:	00 00       	nop
    7040:	6c c0       	rjmp	.+216    	; 0x711a <__bad_interrupt>
    7042:	00 00       	nop
    7044:	6a c0       	rjmp	.+212    	; 0x711a <__bad_interrupt>
    7046:	00 00       	nop
    7048:	68 c0       	rjmp	.+208    	; 0x711a <__bad_interrupt>
    704a:	00 00       	nop
    704c:	66 c0       	rjmp	.+204    	; 0x711a <__bad_interrupt>
    704e:	00 00       	nop
    7050:	6a c0       	rjmp	.+212    	; 0x7126 <__vector_20>
    7052:	00 00       	nop
    7054:	62 c0       	rjmp	.+196    	; 0x711a <__bad_interrupt>
    7056:	00 00       	nop
    7058:	60 c0       	rjmp	.+192    	; 0x711a <__bad_interrupt>
    705a:	00 00       	nop
    705c:	5e c0       	rjmp	.+188    	; 0x711a <__bad_interrupt>
    705e:	00 00       	nop
    7060:	5c c0       	rjmp	.+184    	; 0x711a <__bad_interrupt>
    7062:	00 00       	nop
    7064:	5a c0       	rjmp	.+180    	; 0x711a <__bad_interrupt>
    7066:	00 00       	nop
    7068:	58 c0       	rjmp	.+176    	; 0x711a <__bad_interrupt>
    706a:	00 00       	nop
    706c:	56 c0       	rjmp	.+172    	; 0x711a <__bad_interrupt>
    706e:	00 00       	nop
    7070:	54 c0       	rjmp	.+168    	; 0x711a <__bad_interrupt>
    7072:	00 00       	nop
    7074:	52 c0       	rjmp	.+164    	; 0x711a <__bad_interrupt>
    7076:	00 00       	nop
    7078:	50 c0       	rjmp	.+160    	; 0x711a <__bad_interrupt>
    707a:	00 00       	nop
    707c:	4e c0       	rjmp	.+156    	; 0x711a <__bad_interrupt>
    707e:	00 00       	nop
    7080:	4c c0       	rjmp	.+152    	; 0x711a <__bad_interrupt>
    7082:	00 00       	nop
    7084:	4a c0       	rjmp	.+148    	; 0x711a <__bad_interrupt>
    7086:	00 00       	nop
    7088:	48 c0       	rjmp	.+144    	; 0x711a <__bad_interrupt>
    708a:	00 00       	nop
    708c:	46 c0       	rjmp	.+140    	; 0x711a <__bad_interrupt>
    708e:	00 00       	nop
    7090:	44 c0       	rjmp	.+136    	; 0x711a <__bad_interrupt>
    7092:	00 00       	nop
    7094:	42 c0       	rjmp	.+132    	; 0x711a <__bad_interrupt>
    7096:	00 00       	nop
    7098:	40 c0       	rjmp	.+128    	; 0x711a <__bad_interrupt>
    709a:	00 00       	nop
    709c:	3e c0       	rjmp	.+124    	; 0x711a <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	3c c0       	rjmp	.+120    	; 0x711a <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	3a c0       	rjmp	.+116    	; 0x711a <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	38 c0       	rjmp	.+112    	; 0x711a <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:

		/* Disable pull-up after the check has completed */
		PORTC &= ~(1 << 7);
	#elif (BOARD == BOARD_CIRCUITPLAYGROUND32U4)
		/* Check if left button is high (pressed) */
		JumpToApplication = ! (PIND & (1 << 4));
    70b8:	69 b1       	in	r22, 0x09	; 9
			MCUSR &= ~(1 << WDRF);
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
    70ba:	20 e0       	ldi	r18, 0x00	; 0
    70bc:	30 e0       	ldi	r19, 0x00	; 0
    70be:	f9 01       	movw	r30, r18
    70c0:	45 91       	lpm	r20, Z+
    70c2:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
    70c4:	64 fd       	sbrc	r22, 4
    70c6:	14 c0       	rjmp	.+40     	; 0x70f0 <__do_copy_data>
    70c8:	4f 3f       	cpi	r20, 0xFF	; 255
    70ca:	5f 4f       	sbci	r21, 0xFF	; 255
    70cc:	89 f0       	breq	.+34     	; 0x70f0 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    70ce:	84 b7       	in	r24, 0x34	; 52
    70d0:	87 7f       	andi	r24, 0xF7	; 247
    70d2:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
    70d4:	88 e1       	ldi	r24, 0x18	; 24
    70d6:	0f b6       	in	r0, 0x3f	; 63
    70d8:	f8 94       	cli
    70da:	80 93 60 00 	sts	0x0060, r24
    70de:	10 92 60 00 	sts	0x0060, r1
    70e2:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    70e4:	10 92 8e 02 	sts	0x028E, r1
    70e8:	10 92 8d 02 	sts	0x028D, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    70ec:	f9 01       	movw	r30, r18
    70ee:	09 95       	icall

000070f0 <__do_copy_data>:
    70f0:	12 e0       	ldi	r17, 0x02	; 2
    70f2:	a0 e0       	ldi	r26, 0x00	; 0
    70f4:	b1 e0       	ldi	r27, 0x01	; 1
    70f6:	ee ed       	ldi	r30, 0xDE	; 222
    70f8:	fd e7       	ldi	r31, 0x7D	; 125
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <__do_copy_data+0x10>
    70fc:	05 90       	lpm	r0, Z+
    70fe:	0d 92       	st	X+, r0
    7100:	a2 38       	cpi	r26, 0x82	; 130
    7102:	b1 07       	cpc	r27, r17
    7104:	d9 f7       	brne	.-10     	; 0x70fc <__do_copy_data+0xc>

00007106 <__do_clear_bss>:
    7106:	12 e0       	ldi	r17, 0x02	; 2
    7108:	a2 e8       	ldi	r26, 0x82	; 130
    710a:	b2 e0       	ldi	r27, 0x02	; 2
    710c:	01 c0       	rjmp	.+2      	; 0x7110 <.do_clear_bss_start>

0000710e <.do_clear_bss_loop>:
    710e:	1d 92       	st	X+, r1

00007110 <.do_clear_bss_start>:
    7110:	ad 38       	cpi	r26, 0x8D	; 141
    7112:	b1 07       	cpc	r27, r17
    7114:	e1 f7       	brne	.-8      	; 0x710e <.do_clear_bss_loop>
    7116:	7c db       	rcall	.-2312   	; 0x6810 <main>
    7118:	60 c6       	rjmp	.+3264   	; 0x7dda <_exit>

0000711a <__bad_interrupt>:
    711a:	72 cf       	rjmp	.-284    	; 0x7000 <__vectors>

0000711c <LEDs_SetAllLEDs>:
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC  = ((PORTC & ~LEDS_ALL_LEDS) | LEDMask);
    711c:	98 b1       	in	r25, 0x08	; 8
    711e:	9f 77       	andi	r25, 0x7F	; 127
    7120:	89 2b       	or	r24, r25
    7122:	88 b9       	out	0x08, r24	; 8
    7124:	08 95       	ret

00007126 <__vector_20>:
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
int8_t incr = 2; // diviz by 256 plz
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    7126:	1f 92       	push	r1
    7128:	0f 92       	push	r0
    712a:	0f b6       	in	r0, 0x3f	; 63
    712c:	0f 92       	push	r0
    712e:	11 24       	eor	r1, r1
    7130:	8f 93       	push	r24
    7132:	9f 93       	push	r25
  OCR4A+=incr;
    7134:	90 91 cf 00 	lds	r25, 0x00CF
    7138:	80 91 00 01 	lds	r24, 0x0100
    713c:	89 0f       	add	r24, r25
    713e:	80 93 cf 00 	sts	0x00CF, r24
  if (OCR4A == 0) {
    7142:	80 91 cf 00 	lds	r24, 0x00CF
    7146:	81 11       	cpse	r24, r1
    7148:	09 c0       	rjmp	.+18     	; 0x715c <__vector_20+0x36>
    if (incr > 0)
    714a:	80 91 00 01 	lds	r24, 0x0100
    714e:	18 16       	cp	r1, r24
    7150:	14 f4       	brge	.+4      	; 0x7156 <__vector_20+0x30>
      incr = -2;
    7152:	8e ef       	ldi	r24, 0xFE	; 254
    7154:	01 c0       	rjmp	.+2      	; 0x7158 <__vector_20+0x32>
    else 
      incr = 2;
    7156:	82 e0       	ldi	r24, 0x02	; 2
    7158:	80 93 00 01 	sts	0x0100, r24
  }
}
    715c:	9f 91       	pop	r25
    715e:	8f 91       	pop	r24
    7160:	0f 90       	pop	r0
    7162:	0f be       	out	0x3f, r0	; 63
    7164:	0f 90       	pop	r0
    7166:	1f 90       	pop	r1
    7168:	18 95       	reti

0000716a <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    716a:	07 b6       	in	r0, 0x37	; 55
    716c:	00 fc       	sbrc	r0, 0
    716e:	fd cf       	rjmp	.-6      	; 0x716a <BootloaderAPI_ErasePage>
    7170:	f9 99       	sbic	0x1f, 1	; 31
    7172:	fe cf       	rjmp	.-4      	; 0x7170 <BootloaderAPI_ErasePage+0x6>
    7174:	23 e0       	ldi	r18, 0x03	; 3
    7176:	fb 01       	movw	r30, r22
    7178:	20 93 57 00 	sts	0x0057, r18
    717c:	e8 95       	spm
	boot_spm_busy_wait();
    717e:	07 b6       	in	r0, 0x37	; 55
    7180:	00 fc       	sbrc	r0, 0
    7182:	fd cf       	rjmp	.-6      	; 0x717e <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    7184:	81 e1       	ldi	r24, 0x11	; 17
    7186:	80 93 57 00 	sts	0x0057, r24
    718a:	e8 95       	spm
    718c:	08 95       	ret

0000718e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    718e:	07 b6       	in	r0, 0x37	; 55
    7190:	00 fc       	sbrc	r0, 0
    7192:	fd cf       	rjmp	.-6      	; 0x718e <BootloaderAPI_WritePage>
    7194:	f9 99       	sbic	0x1f, 1	; 31
    7196:	fe cf       	rjmp	.-4      	; 0x7194 <BootloaderAPI_WritePage+0x6>
    7198:	25 e0       	ldi	r18, 0x05	; 5
    719a:	fb 01       	movw	r30, r22
    719c:	20 93 57 00 	sts	0x0057, r18
    71a0:	e8 95       	spm
	boot_spm_busy_wait();
    71a2:	07 b6       	in	r0, 0x37	; 55
    71a4:	00 fc       	sbrc	r0, 0
    71a6:	fd cf       	rjmp	.-6      	; 0x71a2 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    71a8:	81 e1       	ldi	r24, 0x11	; 17
    71aa:	80 93 57 00 	sts	0x0057, r24
    71ae:	e8 95       	spm
    71b0:	08 95       	ret

000071b2 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    71b2:	07 b6       	in	r0, 0x37	; 55
    71b4:	00 fc       	sbrc	r0, 0
    71b6:	fd cf       	rjmp	.-6      	; 0x71b2 <BootloaderAPI_FillWord>
    71b8:	f9 99       	sbic	0x1f, 1	; 31
    71ba:	fe cf       	rjmp	.-4      	; 0x71b8 <BootloaderAPI_FillWord+0x6>
    71bc:	21 e0       	ldi	r18, 0x01	; 1
    71be:	fb 01       	movw	r30, r22
    71c0:	0a 01       	movw	r0, r20
    71c2:	20 93 57 00 	sts	0x0057, r18
    71c6:	e8 95       	spm
    71c8:	11 24       	eor	r1, r1
    71ca:	08 95       	ret

000071cc <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    71cc:	21 e2       	ldi	r18, 0x21	; 33
    71ce:	fc 01       	movw	r30, r24
    71d0:	20 93 57 00 	sts	0x0057, r18
    71d4:	84 91       	lpm	r24, Z
}
    71d6:	08 95       	ret

000071d8 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    71d8:	29 e0       	ldi	r18, 0x09	; 9
    71da:	fc 01       	movw	r30, r24
    71dc:	20 93 57 00 	sts	0x0057, r18
    71e0:	84 91       	lpm	r24, Z
}
    71e2:	08 95       	ret

000071e4 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    71e4:	e1 e0       	ldi	r30, 0x01	; 1
    71e6:	f0 e0       	ldi	r31, 0x00	; 0
    71e8:	89 e0       	ldi	r24, 0x09	; 9
    71ea:	80 93 57 00 	sts	0x0057, r24
    71ee:	84 91       	lpm	r24, Z
}
    71f0:	08 95       	ret

000071f2 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    71f2:	07 b6       	in	r0, 0x37	; 55
    71f4:	00 fc       	sbrc	r0, 0
    71f6:	fd cf       	rjmp	.-6      	; 0x71f2 <BootloaderAPI_WriteLock>
    71f8:	f9 99       	sbic	0x1f, 1	; 31
    71fa:	fe cf       	rjmp	.-4      	; 0x71f8 <BootloaderAPI_WriteLock+0x6>
    71fc:	80 95       	com	r24
    71fe:	99 e0       	ldi	r25, 0x09	; 9
    7200:	e1 e0       	ldi	r30, 0x01	; 1
    7202:	f0 e0       	ldi	r31, 0x00	; 0
    7204:	08 2e       	mov	r0, r24
    7206:	90 93 57 00 	sts	0x0057, r25
    720a:	e8 95       	spm
    720c:	08 95       	ret

0000720e <uputc>:

#define  INCLUDE_FROM_SCSI_C
#include "SCSI.h"

void uputc(char c) {
  while ((UCSR1A & (1 << UDRE1)) == 0) {}; 
    720e:	90 91 c8 00 	lds	r25, 0x00C8
    7212:	95 ff       	sbrs	r25, 5
    7214:	fc cf       	rjmp	.-8      	; 0x720e <uputc>

  UDR1 = c;
    7216:	80 93 ce 00 	sts	0x00CE, r24
    721a:	08 95       	ret

0000721c <ReadEEPROMByte>:
 *
 *  \return Read byte of EEPROM data.
 */
static uint8_t ReadEEPROMByte(const uint8_t* const Address)
{
	return eeprom_read_byte(Address);
    721c:	c4 c5       	rjmp	.+2952   	; 0x7da6 <__eerd_byte_m32u4>

0000721e <WriteEEPROMByte>:
    721e:	cb c5       	rjmp	.+2966   	; 0x7db6 <__eeupd_byte_m32u4>

00007220 <Endpoint_Null_Stream>:
 *  \param[in]  Data      New data to write to the EEPROM location
 */
static void WriteEEPROMByte(uint8_t* const Address,
                            const uint8_t Data)
{
	 eeprom_update_byte(Address, Data);
    7220:	ef 92       	push	r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    7222:	ff 92       	push	r15
    7224:	0f 93       	push	r16
    7226:	1f 93       	push	r17
    7228:	cf 93       	push	r28
    722a:	df 93       	push	r29
    722c:	ec 01       	movw	r28, r24
    722e:	7b 01       	movw	r14, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    7230:	a1 d1       	rcall	.+834    	; 0x7574 <Endpoint_WaitUntilReady>
    7232:	81 11       	cpse	r24, r1
    7234:	2c c0       	rjmp	.+88     	; 0x728e <Endpoint_Null_Stream+0x6e>
    7236:	e1 14       	cp	r14, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    7238:	f1 04       	cpc	r15, r1
    723a:	29 f0       	breq	.+10     	; 0x7246 <Endpoint_Null_Stream+0x26>
    723c:	f7 01       	movw	r30, r14
	  Length -= *BytesProcessed;
    723e:	80 81       	ld	r24, Z
    7240:	91 81       	ldd	r25, Z+1	; 0x01
    7242:	c8 1b       	sub	r28, r24
    7244:	d9 0b       	sbc	r29, r25
    7246:	00 e0       	ldi	r16, 0x00	; 0
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    7248:	10 e0       	ldi	r17, 0x00	; 0
    724a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    724c:	f9 f0       	breq	.+62     	; 0x728c <Endpoint_Null_Stream+0x6c>
    724e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7252:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    7254:	15 c0       	rjmp	.+42     	; 0x7280 <Endpoint_Null_Stream+0x60>
    7256:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    725a:	8e 77       	andi	r24, 0x7E	; 126
    725c:	80 93 e8 00 	sts	0x00E8, r24
    7260:	e1 14       	cp	r14, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    7262:	f1 04       	cpc	r15, r1
    7264:	49 f0       	breq	.+18     	; 0x7278 <Endpoint_Null_Stream+0x58>
    7266:	f7 01       	movw	r30, r14
			{
				*BytesProcessed += BytesInTransfer;
    7268:	80 81       	ld	r24, Z
    726a:	91 81       	ldd	r25, Z+1	; 0x01
    726c:	08 0f       	add	r16, r24
    726e:	19 1f       	adc	r17, r25
    7270:	11 83       	std	Z+1, r17	; 0x01
    7272:	00 83       	st	Z, r16
    7274:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    7276:	0b c0       	rjmp	.+22     	; 0x728e <Endpoint_Null_Stream+0x6e>
    7278:	7d d1       	rcall	.+762    	; 0x7574 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    727a:	88 23       	and	r24, r24
    727c:	31 f3       	breq	.-52     	; 0x724a <Endpoint_Null_Stream+0x2a>
    727e:	07 c0       	rjmp	.+14     	; 0x728e <Endpoint_Null_Stream+0x6e>
    7280:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7284:	21 97       	sbiw	r28, 0x01	; 1
    7286:	0f 5f       	subi	r16, 0xFF	; 255
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    7288:	1f 4f       	sbci	r17, 0xFF	; 255
			BytesInTransfer++;
    728a:	df cf       	rjmp	.-66     	; 0x724a <Endpoint_Null_Stream+0x2a>
    728c:	80 e0       	ldi	r24, 0x00	; 0
    728e:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    7290:	cf 91       	pop	r28
}
    7292:	1f 91       	pop	r17
    7294:	0f 91       	pop	r16
    7296:	ff 90       	pop	r15
    7298:	ef 90       	pop	r14
    729a:	08 95       	ret

0000729c <Endpoint_Write_Stream_LE>:
    729c:	cf 92       	push	r12
    729e:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    72a0:	ef 92       	push	r14
    72a2:	ff 92       	push	r15
    72a4:	0f 93       	push	r16
    72a6:	1f 93       	push	r17
    72a8:	cf 93       	push	r28
    72aa:	df 93       	push	r29
    72ac:	ec 01       	movw	r28, r24
    72ae:	8b 01       	movw	r16, r22
    72b0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    72b2:	60 d1       	rcall	.+704    	; 0x7574 <Endpoint_WaitUntilReady>
    72b4:	81 11       	cpse	r24, r1
    72b6:	32 c0       	rjmp	.+100    	; 0x731c <Endpoint_Write_Stream_LE+0x80>
    72b8:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    72ba:	d1 04       	cpc	r13, r1
    72bc:	39 f0       	breq	.+14     	; 0x72cc <Endpoint_Write_Stream_LE+0x30>
    72be:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    72c0:	80 81       	ld	r24, Z
    72c2:	91 81       	ldd	r25, Z+1	; 0x01
    72c4:	08 1b       	sub	r16, r24
    72c6:	19 0b       	sbc	r17, r25
    72c8:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    72ca:	d9 1f       	adc	r29, r25
    72cc:	e1 2c       	mov	r14, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    72ce:	f1 2c       	mov	r15, r1
    72d0:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    72d2:	11 05       	cpc	r17, r1
    72d4:	11 f1       	breq	.+68     	; 0x731a <Endpoint_Write_Stream_LE+0x7e>
    72d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    72da:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    72dc:	15 c0       	rjmp	.+42     	; 0x7308 <Endpoint_Write_Stream_LE+0x6c>
    72de:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72e2:	8e 77       	andi	r24, 0x7E	; 126
    72e4:	80 93 e8 00 	sts	0x00E8, r24
    72e8:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    72ea:	d1 04       	cpc	r13, r1
    72ec:	49 f0       	breq	.+18     	; 0x7300 <Endpoint_Write_Stream_LE+0x64>
    72ee:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    72f0:	80 81       	ld	r24, Z
    72f2:	91 81       	ldd	r25, Z+1	; 0x01
    72f4:	e8 0e       	add	r14, r24
    72f6:	f9 1e       	adc	r15, r25
    72f8:	f1 82       	std	Z+1, r15	; 0x01
    72fa:	e0 82       	st	Z, r14
    72fc:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    72fe:	0e c0       	rjmp	.+28     	; 0x731c <Endpoint_Write_Stream_LE+0x80>
    7300:	39 d1       	rcall	.+626    	; 0x7574 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7302:	88 23       	and	r24, r24
    7304:	29 f3       	breq	.-54     	; 0x72d0 <Endpoint_Write_Stream_LE+0x34>
    7306:	0a c0       	rjmp	.+20     	; 0x731c <Endpoint_Write_Stream_LE+0x80>
    7308:	89 91       	ld	r24, Y+
    730a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    730e:	01 50       	subi	r16, 0x01	; 1
    7310:	11 09       	sbc	r17, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    7312:	ff ef       	ldi	r31, 0xFF	; 255
    7314:	ef 1a       	sub	r14, r31
			BytesInTransfer++;
    7316:	ff 0a       	sbc	r15, r31
    7318:	db cf       	rjmp	.-74     	; 0x72d0 <Endpoint_Write_Stream_LE+0x34>
    731a:	80 e0       	ldi	r24, 0x00	; 0
    731c:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    731e:	cf 91       	pop	r28
}
    7320:	1f 91       	pop	r17
    7322:	0f 91       	pop	r16
    7324:	ff 90       	pop	r15
    7326:	ef 90       	pop	r14
    7328:	df 90       	pop	r13
    732a:	cf 90       	pop	r12
    732c:	08 95       	ret

0000732e <Endpoint_Read_Stream_LE>:
    732e:	cf 92       	push	r12
    7330:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    7332:	ef 92       	push	r14
    7334:	ff 92       	push	r15
    7336:	0f 93       	push	r16
    7338:	1f 93       	push	r17
    733a:	cf 93       	push	r28
    733c:	df 93       	push	r29
    733e:	ec 01       	movw	r28, r24
    7340:	8b 01       	movw	r16, r22
    7342:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    7344:	17 d1       	rcall	.+558    	; 0x7574 <Endpoint_WaitUntilReady>
    7346:	81 11       	cpse	r24, r1
    7348:	32 c0       	rjmp	.+100    	; 0x73ae <Endpoint_Read_Stream_LE+0x80>
    734a:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    734c:	d1 04       	cpc	r13, r1
    734e:	39 f0       	breq	.+14     	; 0x735e <Endpoint_Read_Stream_LE+0x30>
    7350:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    7352:	80 81       	ld	r24, Z
    7354:	91 81       	ldd	r25, Z+1	; 0x01
    7356:	08 1b       	sub	r16, r24
    7358:	19 0b       	sbc	r17, r25
    735a:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    735c:	d9 1f       	adc	r29, r25
    735e:	e1 2c       	mov	r14, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7360:	f1 2c       	mov	r15, r1
    7362:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    7364:	11 05       	cpc	r17, r1
    7366:	11 f1       	breq	.+68     	; 0x73ac <Endpoint_Read_Stream_LE+0x7e>
    7368:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    736c:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    736e:	15 c0       	rjmp	.+42     	; 0x739a <Endpoint_Read_Stream_LE+0x6c>
    7370:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7374:	8b 77       	andi	r24, 0x7B	; 123
    7376:	80 93 e8 00 	sts	0x00E8, r24
    737a:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    737c:	d1 04       	cpc	r13, r1
    737e:	49 f0       	breq	.+18     	; 0x7392 <Endpoint_Read_Stream_LE+0x64>
    7380:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    7382:	80 81       	ld	r24, Z
    7384:	91 81       	ldd	r25, Z+1	; 0x01
    7386:	e8 0e       	add	r14, r24
    7388:	f9 1e       	adc	r15, r25
    738a:	f1 82       	std	Z+1, r15	; 0x01
    738c:	e0 82       	st	Z, r14
    738e:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    7390:	0e c0       	rjmp	.+28     	; 0x73ae <Endpoint_Read_Stream_LE+0x80>
    7392:	f0 d0       	rcall	.+480    	; 0x7574 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7394:	88 23       	and	r24, r24
    7396:	29 f3       	breq	.-54     	; 0x7362 <Endpoint_Read_Stream_LE+0x34>
    7398:	0a c0       	rjmp	.+20     	; 0x73ae <Endpoint_Read_Stream_LE+0x80>
    739a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    739e:	89 93       	st	Y+, r24
    73a0:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    73a2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    73a4:	ff ef       	ldi	r31, 0xFF	; 255
    73a6:	ef 1a       	sub	r14, r31
			BytesInTransfer++;
    73a8:	ff 0a       	sbc	r15, r31
    73aa:	db cf       	rjmp	.-74     	; 0x7362 <Endpoint_Read_Stream_LE+0x34>
    73ac:	80 e0       	ldi	r24, 0x00	; 0
    73ae:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    73b0:	cf 91       	pop	r28
}
    73b2:	1f 91       	pop	r17
    73b4:	0f 91       	pop	r16
    73b6:	ff 90       	pop	r15
    73b8:	ef 90       	pop	r14
    73ba:	df 90       	pop	r13
    73bc:	cf 90       	pop	r12
    73be:	08 95       	ret

000073c0 <Endpoint_Write_Control_Stream_LE>:
    73c0:	20 91 8b 02 	lds	r18, 0x028B
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    73c4:	30 91 8c 02 	lds	r19, 0x028C
    73c8:	26 17       	cp	r18, r22
    73ca:	37 07       	cpc	r19, r23
    73cc:	48 f0       	brcs	.+18     	; 0x73e0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    73ce:	61 15       	cp	r22, r1
    73d0:	71 05       	cpc	r23, r1
    73d2:	39 f4       	brne	.+14     	; 0x73e2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    73d4:	20 91 e8 00 	lds	r18, 0x00E8
    73d8:	2e 77       	andi	r18, 0x7E	; 126
    73da:	20 93 e8 00 	sts	0x00E8, r18
    73de:	01 c0       	rjmp	.+2      	; 0x73e2 <Endpoint_Write_Control_Stream_LE+0x22>
    73e0:	b9 01       	movw	r22, r18
    73e2:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    73e4:	61 15       	cp	r22, r1
    73e6:	71 05       	cpc	r23, r1
    73e8:	a1 f1       	breq	.+104    	; 0x7452 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    73ea:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    73ec:	22 23       	and	r18, r18
    73ee:	09 f4       	brne	.+2      	; 0x73f2 <Endpoint_Write_Control_Stream_LE+0x32>
    73f0:	42 c0       	rjmp	.+132    	; 0x7476 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    73f2:	25 30       	cpi	r18, 0x05	; 5
    73f4:	09 f4       	brne	.+2      	; 0x73f8 <Endpoint_Write_Control_Stream_LE+0x38>
    73f6:	41 c0       	rjmp	.+130    	; 0x747a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    73f8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    73fc:	23 fd       	sbrc	r18, 3
    73fe:	3f c0       	rjmp	.+126    	; 0x747e <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7400:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7404:	22 fd       	sbrc	r18, 2
    7406:	31 c0       	rjmp	.+98     	; 0x746a <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7408:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    740c:	20 ff       	sbrs	r18, 0
    740e:	ea cf       	rjmp	.-44     	; 0x73e4 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7410:	40 91 f3 00 	lds	r20, 0x00F3
    7414:	20 91 f2 00 	lds	r18, 0x00F2
    7418:	30 e0       	ldi	r19, 0x00	; 0
    741a:	34 2b       	or	r19, r20
    741c:	fc 01       	movw	r30, r24
    741e:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7420:	61 15       	cp	r22, r1
    7422:	71 05       	cpc	r23, r1
    7424:	59 f0       	breq	.+22     	; 0x743c <Endpoint_Write_Control_Stream_LE+0x7c>
    7426:	28 30       	cpi	r18, 0x08	; 8
    7428:	31 05       	cpc	r19, r1
    742a:	40 f4       	brcc	.+16     	; 0x743c <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    742c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    742e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7432:	61 50       	subi	r22, 0x01	; 1
    7434:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7436:	2f 5f       	subi	r18, 0xFF	; 255
    7438:	3f 4f       	sbci	r19, 0xFF	; 255
    743a:	f1 cf       	rjmp	.-30     	; 0x741e <Endpoint_Write_Control_Stream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    743c:	41 e0       	ldi	r20, 0x01	; 1
    743e:	28 30       	cpi	r18, 0x08	; 8
    7440:	31 05       	cpc	r19, r1
    7442:	09 f0       	breq	.+2      	; 0x7446 <Endpoint_Write_Control_Stream_LE+0x86>
    7444:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7446:	20 91 e8 00 	lds	r18, 0x00E8
    744a:	2e 77       	andi	r18, 0x7E	; 126
    744c:	20 93 e8 00 	sts	0x00E8, r18
    7450:	c9 cf       	rjmp	.-110    	; 0x73e4 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7452:	41 11       	cpse	r20, r1
    7454:	ca cf       	rjmp	.-108    	; 0x73ea <Endpoint_Write_Control_Stream_LE+0x2a>
    7456:	09 c0       	rjmp	.+18     	; 0x746a <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7458:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    745a:	88 23       	and	r24, r24
    745c:	61 f0       	breq	.+24     	; 0x7476 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    745e:	85 30       	cpi	r24, 0x05	; 5
    7460:	61 f0       	breq	.+24     	; 0x747a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7462:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7466:	83 fd       	sbrc	r24, 3
    7468:	0a c0       	rjmp	.+20     	; 0x747e <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    746a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    746e:	82 ff       	sbrs	r24, 2
    7470:	f3 cf       	rjmp	.-26     	; 0x7458 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7472:	80 e0       	ldi	r24, 0x00	; 0
    7474:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7476:	82 e0       	ldi	r24, 0x02	; 2
    7478:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    747a:	83 e0       	ldi	r24, 0x03	; 3
    747c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    747e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7480:	08 95       	ret

00007482 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7482:	8f 70       	andi	r24, 0x0F	; 15
    7484:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    7488:	eb ee       	ldi	r30, 0xEB	; 235
    748a:	f0 e0       	ldi	r31, 0x00	; 0
    748c:	80 81       	ld	r24, Z
    748e:	81 60       	ori	r24, 0x01	; 1
    7490:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    7492:	ed ee       	ldi	r30, 0xED	; 237
    7494:	f0 e0       	ldi	r31, 0x00	; 0
    7496:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    7498:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    749c:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    749e:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    74a2:	88 1f       	adc	r24, r24
    74a4:	88 27       	eor	r24, r24
    74a6:	88 1f       	adc	r24, r24
    74a8:	08 95       	ret

000074aa <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    74aa:	ef 92       	push	r14
    74ac:	ff 92       	push	r15
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	e6 2e       	mov	r14, r22
    74b8:	ec 01       	movw	r28, r24
    74ba:	8c 01       	movw	r16, r24
    74bc:	0c 5f       	subi	r16, 0xFC	; 252
    74be:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i < Entries; i++)
    74c0:	f1 2c       	mov	r15, r1
    74c2:	fe 14       	cp	r15, r14
    74c4:	91 f1       	breq	.+100    	; 0x752a <Endpoint_ConfigureEndpointTable+0x80>
	{
		if (!(Table[i].Address))
    74c6:	58 81       	ld	r21, Y
    74c8:	55 23       	and	r21, r21
    74ca:	51 f1       	breq	.+84     	; 0x7520 <Endpoint_ConfigureEndpointTable+0x76>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    74cc:	f8 01       	movw	r30, r16
    74ce:	20 81       	ld	r18, Z
    74d0:	69 81       	ldd	r22, Y+1	; 0x01
    74d2:	7a 81       	ldd	r23, Y+2	; 0x02
    74d4:	31 97       	sbiw	r30, 0x01	; 1
    74d6:	90 81       	ld	r25, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    74d8:	85 2f       	mov	r24, r21
    74da:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    74dc:	87 30       	cpi	r24, 0x07	; 7
    74de:	10 f0       	brcs	.+4      	; 0x74e4 <Endpoint_ConfigureEndpointTable+0x3a>
		  return false;
    74e0:	80 e0       	ldi	r24, 0x00	; 0
    74e2:	24 c0       	rjmp	.+72     	; 0x752c <Endpoint_ConfigureEndpointTable+0x82>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    74e4:	22 30       	cpi	r18, 0x02	; 2
    74e6:	10 f4       	brcc	.+4      	; 0x74ec <Endpoint_ConfigureEndpointTable+0x42>
    74e8:	42 e0       	ldi	r20, 0x02	; 2
    74ea:	01 c0       	rjmp	.+2      	; 0x74ee <Endpoint_ConfigureEndpointTable+0x44>
    74ec:	46 e0       	ldi	r20, 0x06	; 6
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    74ee:	e8 e0       	ldi	r30, 0x08	; 8
    74f0:	f0 e0       	ldi	r31, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    74f2:	20 e0       	ldi	r18, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    74f4:	e6 17       	cp	r30, r22
    74f6:	f7 07       	cpc	r31, r23
    74f8:	20 f4       	brcc	.+8      	; 0x7502 <Endpoint_ConfigureEndpointTable+0x58>
				{
					MaskVal++;
    74fa:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    74fc:	ee 0f       	add	r30, r30
    74fe:	ff 1f       	adc	r31, r31
    7500:	f9 cf       	rjmp	.-14     	; 0x74f4 <Endpoint_ConfigureEndpointTable+0x4a>
				}

				return (MaskVal << EPSIZE0);
    7502:	22 95       	swap	r18
    7504:	20 7f       	andi	r18, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7506:	42 2b       	or	r20, r18
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    7508:	f0 e4       	ldi	r31, 0x40	; 64
    750a:	9f 9f       	mul	r25, r31
    750c:	90 01       	movw	r18, r0
    750e:	11 24       	eor	r1, r1
    7510:	55 1f       	adc	r21, r21
    7512:	55 27       	eor	r21, r21
    7514:	55 1f       	adc	r21, r21
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7516:	65 2f       	mov	r22, r21
    7518:	62 2b       	or	r22, r18
    751a:	b3 df       	rcall	.-154    	; 0x7482 <Endpoint_ConfigureEndpoint_Prv>
    751c:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    751e:	01 f3       	breq	.-64     	; 0x74e0 <Endpoint_ConfigureEndpointTable+0x36>
    7520:	f3 94       	inc	r15
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    7522:	25 96       	adiw	r28, 0x05	; 5
    7524:	0b 5f       	subi	r16, 0xFB	; 251
    7526:	1f 4f       	sbci	r17, 0xFF	; 255
    7528:	cc cf       	rjmp	.-104    	; 0x74c2 <Endpoint_ConfigureEndpointTable+0x18>
    752a:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    752c:	df 91       	pop	r29
}
    752e:	cf 91       	pop	r28
    7530:	1f 91       	pop	r17
    7532:	0f 91       	pop	r16
    7534:	ff 90       	pop	r15
    7536:	ef 90       	pop	r14
    7538:	08 95       	ret

0000753a <Endpoint_ClearStatusStage>:
    753a:	80 91 85 02 	lds	r24, 0x0285
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    753e:	87 ff       	sbrs	r24, 7
    7540:	0f c0       	rjmp	.+30     	; 0x7560 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7542:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    7546:	82 fd       	sbrc	r24, 2
    7548:	04 c0       	rjmp	.+8      	; 0x7552 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    754a:	8e b3       	in	r24, 0x1e	; 30
    754c:	81 11       	cpse	r24, r1
    754e:	f9 cf       	rjmp	.-14     	; 0x7542 <Endpoint_ClearStatusStage+0x8>
    7550:	10 c0       	rjmp	.+32     	; 0x7572 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7552:	80 91 e8 00 	lds	r24, 0x00E8
    7556:	8b 77       	andi	r24, 0x7B	; 123
    7558:	0a c0       	rjmp	.+20     	; 0x756e <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    755a:	8e b3       	in	r24, 0x1e	; 30
    755c:	88 23       	and	r24, r24
    755e:	49 f0       	breq	.+18     	; 0x7572 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7560:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7564:	80 ff       	sbrs	r24, 0
    7566:	f9 cf       	rjmp	.-14     	; 0x755a <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7568:	80 91 e8 00 	lds	r24, 0x00E8
    756c:	8e 77       	andi	r24, 0x7E	; 126
    756e:	80 93 e8 00 	sts	0x00E8, r24
    7572:	08 95       	ret

00007574 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    7574:	20 91 e4 00 	lds	r18, 0x00E4
    7578:	30 91 e5 00 	lds	r19, 0x00E5
    757c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    757e:	40 91 ec 00 	lds	r20, 0x00EC
    7582:	84 2f       	mov	r24, r20
    7584:	81 70       	andi	r24, 0x01	; 1
    7586:	40 ff       	sbrs	r20, 0
    7588:	21 c0       	rjmp	.+66     	; 0x75cc <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    758a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    758e:	80 fd       	sbrc	r24, 0
    7590:	1b c0       	rjmp	.+54     	; 0x75c8 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7592:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7594:	88 23       	and	r24, r24
    7596:	91 f0       	breq	.+36     	; 0x75bc <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7598:	85 30       	cpi	r24, 0x05	; 5
    759a:	91 f0       	breq	.+36     	; 0x75c0 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    759c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    75a0:	85 fd       	sbrc	r24, 5
    75a2:	10 c0       	rjmp	.+32     	; 0x75c4 <Endpoint_WaitUntilReady+0x50>
    75a4:	40 91 e4 00 	lds	r20, 0x00E4
    75a8:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    75ac:	42 17       	cp	r20, r18
    75ae:	53 07       	cpc	r21, r19
    75b0:	31 f3       	breq	.-52     	; 0x757e <Endpoint_WaitUntilReady+0xa>
    75b2:	9a 01       	movw	r18, r20
    75b4:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    75b6:	19 f7       	brne	.-58     	; 0x757e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    75b8:	84 e0       	ldi	r24, 0x04	; 4
    75ba:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    75bc:	82 e0       	ldi	r24, 0x02	; 2
    75be:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    75c0:	83 e0       	ldi	r24, 0x03	; 3
    75c2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    75c4:	81 e0       	ldi	r24, 0x01	; 1
    75c6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    75c8:	80 e0       	ldi	r24, 0x00	; 0
    75ca:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    75cc:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    75d0:	42 ff       	sbrs	r20, 2
    75d2:	df cf       	rjmp	.-66     	; 0x7592 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    75d4:	08 95       	ret

000075d6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    75d6:	0f 93       	push	r16
    75d8:	1f 93       	push	r17
    75da:	cf 93       	push	r28
    75dc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    75de:	46 d0       	rcall	.+140    	; 0x766c <USB_INT_DisableAllInterrupts>
    75e0:	4d d0       	rcall	.+154    	; 0x767c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    75e2:	c8 ed       	ldi	r28, 0xD8	; 216
    75e4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    75e6:	88 81       	ld	r24, Y
    75e8:	8f 77       	andi	r24, 0x7F	; 127
    75ea:	88 83       	st	Y, r24
    75ec:	88 81       	ld	r24, Y
    75ee:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    75f0:	88 83       	st	Y, r24
    75f2:	88 81       	ld	r24, Y
    75f4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    75f6:	88 83       	st	Y, r24
    75f8:	19 bc       	out	0x29, r1	; 41
    75fa:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    75fc:	10 92 83 02 	sts	0x0283, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    7600:	00 ee       	ldi	r16, 0xE0	; 224
    7602:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7604:	f8 01       	movw	r30, r16
    7606:	80 81       	ld	r24, Z
    7608:	8b 7f       	andi	r24, 0xFB	; 251
    760a:	80 83       	st	Z, r24
    760c:	88 81       	ld	r24, Y
    760e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7610:	88 83       	st	Y, r24
    7612:	42 e0       	ldi	r20, 0x02	; 2
    7614:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7616:	80 e0       	ldi	r24, 0x00	; 0
    7618:	34 df       	rcall	.-408    	; 0x7482 <Endpoint_ConfigureEndpoint_Prv>
    761a:	e1 ee       	ldi	r30, 0xE1	; 225
    761c:	f0 e0       	ldi	r31, 0x00	; 0
    761e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7620:	8e 7f       	andi	r24, 0xFE	; 254
    7622:	80 83       	st	Z, r24
    7624:	e2 ee       	ldi	r30, 0xE2	; 226
    7626:	f0 e0       	ldi	r31, 0x00	; 0
    7628:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    762a:	81 60       	ori	r24, 0x01	; 1
    762c:	80 83       	st	Z, r24
    762e:	80 81       	ld	r24, Z
    7630:	88 60       	ori	r24, 0x08	; 8
    7632:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7634:	f8 01       	movw	r30, r16
    7636:	80 81       	ld	r24, Z
    7638:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    763a:	80 83       	st	Z, r24
    763c:	88 81       	ld	r24, Y
    763e:	80 61       	ori	r24, 0x10	; 16
    7640:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7642:	df 91       	pop	r29
    7644:	cf 91       	pop	r28
    7646:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7648:	0f 91       	pop	r16
    764a:	08 95       	ret

0000764c <USB_Init>:
    764c:	e8 ed       	ldi	r30, 0xD8	; 216
    764e:	f0 e0       	ldi	r31, 0x00	; 0
    7650:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7652:	8f 7e       	andi	r24, 0xEF	; 239
    7654:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7656:	e7 ed       	ldi	r30, 0xD7	; 215
    7658:	f0 e0       	ldi	r31, 0x00	; 0
    765a:	80 81       	ld	r24, Z
    765c:	81 60       	ori	r24, 0x01	; 1
    765e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7660:	84 e0       	ldi	r24, 0x04	; 4
    7662:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7664:	81 e0       	ldi	r24, 0x01	; 1
    7666:	80 93 84 02 	sts	0x0284, r24

	USB_ResetInterface();
    766a:	b5 cf       	rjmp	.-150    	; 0x75d6 <USB_ResetInterface>

0000766c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    766c:	e8 ed       	ldi	r30, 0xD8	; 216
    766e:	f0 e0       	ldi	r31, 0x00	; 0
    7670:	80 81       	ld	r24, Z
    7672:	8e 7f       	andi	r24, 0xFE	; 254
    7674:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7676:	10 92 e2 00 	sts	0x00E2, r1
    767a:	08 95       	ret

0000767c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    767c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7680:	10 92 e1 00 	sts	0x00E1, r1
    7684:	08 95       	ret

00007686 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7686:	1f 92       	push	r1
    7688:	0f 92       	push	r0
    768a:	0f b6       	in	r0, 0x3f	; 63
    768c:	0f 92       	push	r0
    768e:	11 24       	eor	r1, r1
    7690:	2f 93       	push	r18
    7692:	3f 93       	push	r19
    7694:	4f 93       	push	r20
    7696:	5f 93       	push	r21
    7698:	6f 93       	push	r22
    769a:	7f 93       	push	r23
    769c:	8f 93       	push	r24
    769e:	9f 93       	push	r25
    76a0:	af 93       	push	r26
    76a2:	bf 93       	push	r27
    76a4:	ef 93       	push	r30
    76a6:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    76a8:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    76ac:	80 ff       	sbrs	r24, 0
    76ae:	1b c0       	rjmp	.+54     	; 0x76e6 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    76b0:	80 91 d8 00 	lds	r24, 0x00D8
    76b4:	80 ff       	sbrs	r24, 0
    76b6:	17 c0       	rjmp	.+46     	; 0x76e6 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    76b8:	80 91 da 00 	lds	r24, 0x00DA
    76bc:	8e 7f       	andi	r24, 0xFE	; 254
    76be:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    76c2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    76c6:	80 ff       	sbrs	r24, 0
    76c8:	0b c0       	rjmp	.+22     	; 0x76e0 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    76ca:	80 e1       	ldi	r24, 0x10	; 16
    76cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    76ce:	82 e1       	ldi	r24, 0x12	; 18
    76d0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    76d2:	09 b4       	in	r0, 0x29	; 41
    76d4:	00 fe       	sbrs	r0, 0
    76d6:	fd cf       	rjmp	.-6      	; 0x76d2 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    76d8:	81 e0       	ldi	r24, 0x01	; 1
    76da:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    76dc:	ec d8       	rcall	.-3624   	; 0x68b6 <EVENT_USB_Device_Connect>
    76de:	03 c0       	rjmp	.+6      	; 0x76e6 <__vector_10+0x60>
    76e0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    76e2:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    76e4:	ea d8       	rcall	.-3628   	; 0x68ba <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    76e6:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    76ea:	80 ff       	sbrs	r24, 0
    76ec:	17 c0       	rjmp	.+46     	; 0x771c <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    76ee:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    76f2:	80 ff       	sbrs	r24, 0
    76f4:	13 c0       	rjmp	.+38     	; 0x771c <__vector_10+0x96>
    76f6:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    76fa:	8e 7f       	andi	r24, 0xFE	; 254
    76fc:	80 93 e2 00 	sts	0x00E2, r24
    7700:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7704:	80 61       	ori	r24, 0x10	; 16
    7706:	80 93 e2 00 	sts	0x00E2, r24
    770a:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    770e:	80 62       	ori	r24, 0x20	; 32
    7710:	80 93 d8 00 	sts	0x00D8, r24
    7714:	19 bc       	out	0x29, r1	; 41
    7716:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7718:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    771a:	b7 d1       	rcall	.+878    	; 0x7a8a <USB_Event_Stub>
    771c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7720:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7722:	2e c0       	rjmp	.+92     	; 0x7780 <__vector_10+0xfa>
    7724:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7728:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    772a:	2a c0       	rjmp	.+84     	; 0x7780 <__vector_10+0xfa>
    772c:	80 e1       	ldi	r24, 0x10	; 16
    772e:	89 bd       	out	0x29, r24	; 41
    7730:	82 e1       	ldi	r24, 0x12	; 18

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7732:	89 bd       	out	0x29, r24	; 41
    7734:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7736:	00 fe       	sbrs	r0, 0
    7738:	fd cf       	rjmp	.-6      	; 0x7734 <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    773a:	80 91 d8 00 	lds	r24, 0x00D8
    773e:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7740:	80 93 d8 00 	sts	0x00D8, r24
    7744:	80 91 e1 00 	lds	r24, 0x00E1
    7748:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    774a:	80 93 e1 00 	sts	0x00E1, r24
    774e:	80 91 e2 00 	lds	r24, 0x00E2
    7752:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7754:	80 93 e2 00 	sts	0x00E2, r24
    7758:	80 91 e2 00 	lds	r24, 0x00E2
    775c:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    775e:	80 93 e2 00 	sts	0x00E2, r24
    7762:	80 91 83 02 	lds	r24, 0x0283
    7766:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7768:	11 f0       	breq	.+4      	; 0x776e <__vector_10+0xe8>
    776a:	84 e0       	ldi	r24, 0x04	; 4
    776c:	07 c0       	rjmp	.+14     	; 0x777c <__vector_10+0xf6>
    776e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    7772:	87 fd       	sbrc	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7774:	02 c0       	rjmp	.+4      	; 0x777a <__vector_10+0xf4>
    7776:	81 e0       	ldi	r24, 0x01	; 1
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7778:	01 c0       	rjmp	.+2      	; 0x777c <__vector_10+0xf6>
    777a:	83 e0       	ldi	r24, 0x03	; 3
    777c:	8e bb       	out	0x1e, r24	; 30
    777e:	85 d1       	rcall	.+778    	; 0x7a8a <USB_Event_Stub>
    7780:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7784:	83 ff       	sbrs	r24, 3
    7786:	26 c0       	rjmp	.+76     	; 0x77d4 <__vector_10+0x14e>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7788:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    778c:	83 ff       	sbrs	r24, 3
    778e:	22 c0       	rjmp	.+68     	; 0x77d4 <__vector_10+0x14e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7790:	80 91 e1 00 	lds	r24, 0x00E1
    7794:	87 7f       	andi	r24, 0xF7	; 247
    7796:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    779a:	82 e0       	ldi	r24, 0x02	; 2
    779c:	8e bb       	out	0x1e, r24	; 30
    779e:	10 92 83 02 	sts	0x0283, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    77a2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    77a6:	8e 7f       	andi	r24, 0xFE	; 254
    77a8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    77ac:	80 91 e2 00 	lds	r24, 0x00E2
    77b0:	8e 7f       	andi	r24, 0xFE	; 254
    77b2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    77b6:	80 91 e2 00 	lds	r24, 0x00E2
    77ba:	80 61       	ori	r24, 0x10	; 16
    77bc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    77c0:	42 e0       	ldi	r20, 0x02	; 2
    77c2:	60 e0       	ldi	r22, 0x00	; 0
    77c4:	80 e0       	ldi	r24, 0x00	; 0
    77c6:	5d de       	rcall	.-838    	; 0x7482 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    77c8:	80 91 f0 00 	lds	r24, 0x00F0
    77cc:	88 60       	ori	r24, 0x08	; 8
    77ce:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    77d2:	5b d1       	rcall	.+694    	; 0x7a8a <USB_Event_Stub>
    77d4:	ff 91       	pop	r31
    77d6:	ef 91       	pop	r30
    77d8:	bf 91       	pop	r27
    77da:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    77dc:	9f 91       	pop	r25
    77de:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    77e0:	7f 91       	pop	r23
    77e2:	6f 91       	pop	r22
    77e4:	5f 91       	pop	r21
    77e6:	4f 91       	pop	r20
    77e8:	3f 91       	pop	r19
    77ea:	2f 91       	pop	r18
    77ec:	0f 90       	pop	r0
    77ee:	0f be       	out	0x3f, r0	; 63
    77f0:	0f 90       	pop	r0
    77f2:	1f 90       	pop	r1
    77f4:	18 95       	reti

000077f6 <__vector_11>:
    77f6:	1f 92       	push	r1
    77f8:	0f 92       	push	r0
    77fa:	0f b6       	in	r0, 0x3f	; 63
    77fc:	0f 92       	push	r0
    77fe:	11 24       	eor	r1, r1
    7800:	2f 93       	push	r18

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    7802:	3f 93       	push	r19
    7804:	4f 93       	push	r20
    7806:	5f 93       	push	r21
    7808:	6f 93       	push	r22
    780a:	7f 93       	push	r23
    780c:	8f 93       	push	r24
    780e:	9f 93       	push	r25
    7810:	af 93       	push	r26
    7812:	bf 93       	push	r27
    7814:	cf 93       	push	r28
    7816:	df 93       	push	r29
    7818:	ef 93       	push	r30
    781a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    781c:	c0 91 e9 00 	lds	r28, 0x00E9
    7820:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7822:	80 91 ec 00 	lds	r24, 0x00EC
    7826:	d8 2f       	mov	r29, r24
    7828:	d1 70       	andi	r29, 0x01	; 1
    782a:	80 fd       	sbrc	r24, 0
    782c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    782e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    7832:	80 91 f0 00 	lds	r24, 0x00F0
    7836:	87 7f       	andi	r24, 0xF7	; 247
    7838:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    783c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    783e:	1e d0       	rcall	.+60     	; 0x787c <USB_Device_ProcessControlRequest>
    7840:	10 92 e9 00 	sts	0x00E9, r1
    7844:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    7848:	88 60       	ori	r24, 0x08	; 8
    784a:	80 93 f0 00 	sts	0x00F0, r24
    784e:	cd 2b       	or	r28, r29
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7850:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7852:	c0 93 e9 00 	sts	0x00E9, r28
    7856:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    7858:	ef 91       	pop	r30
    785a:	df 91       	pop	r29
    785c:	cf 91       	pop	r28
    785e:	bf 91       	pop	r27
    7860:	af 91       	pop	r26
    7862:	9f 91       	pop	r25
    7864:	8f 91       	pop	r24
    7866:	7f 91       	pop	r23
    7868:	6f 91       	pop	r22
    786a:	5f 91       	pop	r21
    786c:	4f 91       	pop	r20
    786e:	3f 91       	pop	r19
    7870:	2f 91       	pop	r18
    7872:	0f 90       	pop	r0
    7874:	0f be       	out	0x3f, r0	; 63
    7876:	0f 90       	pop	r0
    7878:	1f 90       	pop	r1
    787a:	18 95       	reti

0000787c <USB_Device_ProcessControlRequest>:
    787c:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    787e:	cf 93       	push	r28
    7880:	df 93       	push	r29
    7882:	00 d0       	rcall	.+0      	; 0x7884 <USB_Device_ProcessControlRequest+0x8>
    7884:	cd b7       	in	r28, 0x3d	; 61
    7886:	de b7       	in	r29, 0x3e	; 62
    7888:	e5 e8       	ldi	r30, 0x85	; 133
    788a:	f2 e0       	ldi	r31, 0x02	; 2
    788c:	88 e0       	ldi	r24, 0x08	; 8
    788e:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7890:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7894:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7896:	8e 13       	cpse	r24, r30
    7898:	fb cf       	rjmp	.-10     	; 0x7890 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    789a:	1b d8       	rcall	.-4042   	; 0x68d2 <EVENT_USB_Device_ControlRequest>
    789c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    78a0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    78a2:	df c0       	rjmp	.+446    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    78a4:	80 91 85 02 	lds	r24, 0x0285
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    78a8:	90 91 86 02 	lds	r25, 0x0286

		switch (USB_ControlRequest.bRequest)
    78ac:	95 30       	cpi	r25, 0x05	; 5
    78ae:	09 f4       	brne	.+2      	; 0x78b2 <USB_Device_ProcessControlRequest+0x36>
    78b0:	66 c0       	rjmp	.+204    	; 0x797e <USB_Device_ProcessControlRequest+0x102>
    78b2:	30 f4       	brcc	.+12     	; 0x78c0 <USB_Device_ProcessControlRequest+0x44>
    78b4:	91 30       	cpi	r25, 0x01	; 1
    78b6:	59 f1       	breq	.+86     	; 0x790e <USB_Device_ProcessControlRequest+0x92>
    78b8:	68 f0       	brcs	.+26     	; 0x78d4 <USB_Device_ProcessControlRequest+0x58>
    78ba:	93 30       	cpi	r25, 0x03	; 3
    78bc:	41 f1       	breq	.+80     	; 0x790e <USB_Device_ProcessControlRequest+0x92>
    78be:	d1 c0       	rjmp	.+418    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    78c0:	98 30       	cpi	r25, 0x08	; 8
    78c2:	09 f4       	brne	.+2      	; 0x78c6 <USB_Device_ProcessControlRequest+0x4a>
    78c4:	a0 c0       	rjmp	.+320    	; 0x7a06 <USB_Device_ProcessControlRequest+0x18a>
    78c6:	99 30       	cpi	r25, 0x09	; 9
    78c8:	09 f4       	brne	.+2      	; 0x78cc <USB_Device_ProcessControlRequest+0x50>
    78ca:	af c0       	rjmp	.+350    	; 0x7a2a <USB_Device_ProcessControlRequest+0x1ae>
    78cc:	96 30       	cpi	r25, 0x06	; 6
    78ce:	09 f0       	breq	.+2      	; 0x78d2 <USB_Device_ProcessControlRequest+0x56>
    78d0:	c8 c0       	rjmp	.+400    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    78d2:	76 c0       	rjmp	.+236    	; 0x79c0 <USB_Device_ProcessControlRequest+0x144>
    78d4:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    78d6:	81 f0       	breq	.+32     	; 0x78f8 <USB_Device_ProcessControlRequest+0x7c>
    78d8:	82 38       	cpi	r24, 0x82	; 130
    78da:	09 f0       	breq	.+2      	; 0x78de <USB_Device_ProcessControlRequest+0x62>
    78dc:	c2 c0       	rjmp	.+388    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    78de:	80 91 89 02 	lds	r24, 0x0289
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    78e2:	8f 70       	andi	r24, 0x0F	; 15
    78e4:	80 93 e9 00 	sts	0x00E9, r24
    78e8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    78ec:	85 fb       	bst	r24, 5
    78ee:	88 27       	eor	r24, r24
    78f0:	80 f9       	bld	r24, 0
    78f2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    78f6:	01 c0       	rjmp	.+2      	; 0x78fa <USB_Device_ProcessControlRequest+0x7e>
    78f8:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    78fa:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    78fe:	97 7f       	andi	r25, 0xF7	; 247
    7900:	90 93 e8 00 	sts	0x00E8, r25
    7904:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7908:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    790c:	87 c0       	rjmp	.+270    	; 0x7a1c <USB_Device_ProcessControlRequest+0x1a0>
    790e:	28 2f       	mov	r18, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7910:	2d 7f       	andi	r18, 0xFD	; 253
    7912:	09 f0       	breq	.+2      	; 0x7916 <USB_Device_ProcessControlRequest+0x9a>
    7914:	a6 c0       	rjmp	.+332    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7916:	82 30       	cpi	r24, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7918:	09 f0       	breq	.+2      	; 0x791c <USB_Device_ProcessControlRequest+0xa0>
    791a:	a3 c0       	rjmp	.+326    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    791c:	80 91 87 02 	lds	r24, 0x0287

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7920:	81 11       	cpse	r24, r1
    7922:	27 c0       	rjmp	.+78     	; 0x7972 <USB_Device_ProcessControlRequest+0xf6>
    7924:	80 91 89 02 	lds	r24, 0x0289
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7928:	8f 70       	andi	r24, 0x0F	; 15
    792a:	09 f4       	brne	.+2      	; 0x792e <USB_Device_ProcessControlRequest+0xb2>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    792c:	9a c0       	rjmp	.+308    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    792e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7932:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7936:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7938:	1c c0       	rjmp	.+56     	; 0x7972 <USB_Device_ProcessControlRequest+0xf6>
    793a:	93 30       	cpi	r25, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    793c:	21 f4       	brne	.+8      	; 0x7946 <USB_Device_ProcessControlRequest+0xca>
    793e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7942:	80 62       	ori	r24, 0x20	; 32
    7944:	14 c0       	rjmp	.+40     	; 0x796e <USB_Device_ProcessControlRequest+0xf2>
    7946:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    794a:	90 61       	ori	r25, 0x10	; 16
    794c:	90 93 eb 00 	sts	0x00EB, r25
    7950:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7952:	30 e0       	ldi	r19, 0x00	; 0
    7954:	a9 01       	movw	r20, r18
    7956:	02 c0       	rjmp	.+4      	; 0x795c <USB_Device_ProcessControlRequest+0xe0>
    7958:	44 0f       	add	r20, r20
    795a:	55 1f       	adc	r21, r21
    795c:	8a 95       	dec	r24
    795e:	e2 f7       	brpl	.-8      	; 0x7958 <USB_Device_ProcessControlRequest+0xdc>
    7960:	40 93 ea 00 	sts	0x00EA, r20
    7964:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7968:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    796c:	88 60       	ori	r24, 0x08	; 8
    796e:	80 93 eb 00 	sts	0x00EB, r24
    7972:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7976:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    797a:	87 7f       	andi	r24, 0xF7	; 247
    797c:	52 c0       	rjmp	.+164    	; 0x7a22 <USB_Device_ProcessControlRequest+0x1a6>
    797e:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7980:	70 c0       	rjmp	.+224    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7982:	10 91 87 02 	lds	r17, 0x0287
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7986:	1f 77       	andi	r17, 0x7F	; 127
    7988:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    798c:	80 78       	andi	r24, 0x80	; 128
    798e:	81 2b       	or	r24, r17
    7990:	80 93 e3 00 	sts	0x00E3, r24
    7994:	80 91 e8 00 	lds	r24, 0x00E8
    7998:	87 7f       	andi	r24, 0xF7	; 247
    799a:	80 93 e8 00 	sts	0x00E8, r24
    799e:	cd dd       	rcall	.-1126   	; 0x753a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    79a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79a4:	80 ff       	sbrs	r24, 0
    79a6:	fc cf       	rjmp	.-8      	; 0x79a0 <USB_Device_ProcessControlRequest+0x124>

	while (!(Endpoint_IsINReady()));
    79a8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    79ac:	80 68       	ori	r24, 0x80	; 128
    79ae:	80 93 e3 00 	sts	0x00E3, r24
    79b2:	11 11       	cpse	r17, r1
    79b4:	02 c0       	rjmp	.+4      	; 0x79ba <USB_Device_ProcessControlRequest+0x13e>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    79b6:	82 e0       	ldi	r24, 0x02	; 2
    79b8:	01 c0       	rjmp	.+2      	; 0x79bc <USB_Device_ProcessControlRequest+0x140>
    79ba:	83 e0       	ldi	r24, 0x03	; 3
    79bc:	8e bb       	out	0x1e, r24	; 30
    79be:	51 c0       	rjmp	.+162    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    79c0:	80 58       	subi	r24, 0x80	; 128
    79c2:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    79c4:	08 f0       	brcs	.+2      	; 0x79c8 <USB_Device_ProcessControlRequest+0x14c>
    79c6:	4d c0       	rjmp	.+154    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    79c8:	60 91 89 02 	lds	r22, 0x0289
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    79cc:	70 91 8a 02 	lds	r23, 0x028A
    79d0:	ae 01       	movw	r20, r28
    79d2:	4f 5f       	subi	r20, 0xFF	; 255
    79d4:	5f 4f       	sbci	r21, 0xFF	; 255
    79d6:	80 91 87 02 	lds	r24, 0x0287
    79da:	90 91 88 02 	lds	r25, 0x0288
    79de:	0e 94 7d 34 	call	0x68fa	; 0x68fa <CALLBACK_USB_GetDescriptor>
    79e2:	bc 01       	movw	r22, r24
    79e4:	89 2b       	or	r24, r25
    79e6:	09 f4       	brne	.+2      	; 0x79ea <USB_Device_ProcessControlRequest+0x16e>
    79e8:	3c c0       	rjmp	.+120    	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    79ea:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    79ee:	97 7f       	andi	r25, 0xF7	; 247
    79f0:	90 93 e8 00 	sts	0x00E8, r25
    79f4:	89 81       	ldd	r24, Y+1	; 0x01
    79f6:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    79f8:	e3 dc       	rcall	.-1594   	; 0x73c0 <Endpoint_Write_Control_Stream_LE>
    79fa:	80 91 e8 00 	lds	r24, 0x00E8
    79fe:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7a00:	80 93 e8 00 	sts	0x00E8, r24
    7a04:	2e c0       	rjmp	.+92     	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7a06:	80 38       	cpi	r24, 0x80	; 128
    7a08:	61 f5       	brne	.+88     	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7a0a:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7a0e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7a10:	80 93 e8 00 	sts	0x00E8, r24
    7a14:	80 91 83 02 	lds	r24, 0x0283
    7a18:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7a1c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7a20:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7a22:	80 93 e8 00 	sts	0x00E8, r24
    7a26:	89 dd       	rcall	.-1262   	; 0x753a <Endpoint_ClearStatusStage>
    7a28:	1c c0       	rjmp	.+56     	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7a2a:	81 11       	cpse	r24, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7a2c:	1a c0       	rjmp	.+52     	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
    7a2e:	90 91 87 02 	lds	r25, 0x0287
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7a32:	92 30       	cpi	r25, 0x02	; 2
    7a34:	b0 f4       	brcc	.+44     	; 0x7a62 <USB_Device_ProcessControlRequest+0x1e6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7a36:	80 91 e8 00 	lds	r24, 0x00E8
    7a3a:	87 7f       	andi	r24, 0xF7	; 247
    7a3c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7a40:	90 93 83 02 	sts	0x0283, r25
    7a44:	7a dd       	rcall	.-1292   	; 0x753a <Endpoint_ClearStatusStage>
    7a46:	80 91 83 02 	lds	r24, 0x0283
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7a4a:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    7a4c:	06 c0       	rjmp	.+12     	; 0x7a5a <USB_Device_ProcessControlRequest+0x1de>
    7a4e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    7a52:	87 fd       	sbrc	r24, 7
    7a54:	02 c0       	rjmp	.+4      	; 0x7a5a <USB_Device_ProcessControlRequest+0x1de>
    7a56:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a58:	01 c0       	rjmp	.+2      	; 0x7a5c <USB_Device_ProcessControlRequest+0x1e0>
    7a5a:	84 e0       	ldi	r24, 0x04	; 4
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a5c:	8e bb       	out	0x1e, r24	; 30
    7a5e:	0e 94 5f 34 	call	0x68be	; 0x68be <EVENT_USB_Device_ConfigurationChanged>
    7a62:	80 91 e8 00 	lds	r24, 0x00E8
    7a66:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    7a68:	0a c0       	rjmp	.+20     	; 0x7a7e <USB_Device_ProcessControlRequest+0x202>
    7a6a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7a6e:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7a70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7a74:	80 91 eb 00 	lds	r24, 0x00EB
    7a78:	80 62       	ori	r24, 0x20	; 32
    7a7a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7a7e:	0f 90       	pop	r0
    7a80:	0f 90       	pop	r0
    7a82:	df 91       	pop	r29
    7a84:	cf 91       	pop	r28
    7a86:	1f 91       	pop	r17
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    7a88:	08 95       	ret

00007a8a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7a8a:	08 95       	ret

00007a8c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7a8c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7a8e:	8e b3       	in	r24, 0x1e	; 30
    7a90:	88 23       	and	r24, r24
    7a92:	99 f0       	breq	.+38     	; 0x7aba <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7a94:	c0 91 e9 00 	lds	r28, 0x00E9
    7a98:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7a9a:	90 91 ec 00 	lds	r25, 0x00EC
    7a9e:	89 2f       	mov	r24, r25
    7aa0:	81 70       	andi	r24, 0x01	; 1
    7aa2:	90 fd       	sbrc	r25, 0
    7aa4:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7aa6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7aa8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7aac:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7ab0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7ab2:	e4 de       	rcall	.-568    	; 0x787c <USB_Device_ProcessControlRequest>
    7ab4:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ab6:	c0 93 e9 00 	sts	0x00E9, r28
    7aba:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7abc:	08 95       	ret

00007abe <MS_Device_ProcessControlRequest>:
    7abe:	cf 93       	push	r28
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    7ac0:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7ac2:	20 91 e8 00 	lds	r18, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    7ac6:	23 ff       	sbrs	r18, 3
    7ac8:	38 c0       	rjmp	.+112    	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    7aca:	fc 01       	movw	r30, r24
    7acc:	20 81       	ld	r18, Z
    7ace:	30 e0       	ldi	r19, 0x00	; 0
    7ad0:	40 91 89 02 	lds	r20, 0x0289
    7ad4:	50 91 8a 02 	lds	r21, 0x028A
    7ad8:	42 17       	cp	r20, r18
    7ada:	53 07       	cpc	r21, r19
    7adc:	71 f5       	brne	.+92     	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
	  return;

	switch (USB_ControlRequest.bRequest)
    7ade:	20 91 86 02 	lds	r18, 0x0286
    7ae2:	2e 3f       	cpi	r18, 0xFE	; 254
    7ae4:	81 f0       	breq	.+32     	; 0x7b06 <MS_Device_ProcessControlRequest+0x48>
    7ae6:	2f 3f       	cpi	r18, 0xFF	; 255
    7ae8:	41 f5       	brne	.+80     	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7aea:	20 91 85 02 	lds	r18, 0x0285
    7aee:	21 32       	cpi	r18, 0x21	; 33
    7af0:	21 f5       	brne	.+72     	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
    7af2:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7af4:	80 91 e8 00 	lds	r24, 0x00E8
    7af8:	87 7f       	andi	r24, 0xF7	; 247
    7afa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    7afe:	1d dd       	rcall	.-1478   	; 0x753a <Endpoint_ClearStatusStage>
    7b00:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    7b02:	88 af       	std	Y+56, r24	; 0x38
    7b04:	1a c0       	rjmp	.+52     	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
    7b06:	20 91 85 02 	lds	r18, 0x0285
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    7b0a:	21 3a       	cpi	r18, 0xA1	; 161
    7b0c:	b1 f4       	brne	.+44     	; 0x7b3a <MS_Device_ProcessControlRequest+0x7c>
    7b0e:	20 91 e8 00 	lds	r18, 0x00E8
    7b12:	27 7f       	andi	r18, 0xF7	; 247
    7b14:	20 93 e8 00 	sts	0x00E8, r18
    7b18:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b1c:	20 ff       	sbrs	r18, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    7b1e:	fc cf       	rjmp	.-8      	; 0x7b18 <MS_Device_ProcessControlRequest+0x5a>
    7b20:	fc 01       	movw	r30, r24
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    7b22:	83 85       	ldd	r24, Z+11	; 0x0b
    7b24:	81 50       	subi	r24, 0x01	; 1
    7b26:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b2a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b2e:	8e 77       	andi	r24, 0x7E	; 126
    7b30:	80 93 e8 00 	sts	0x00E8, r24
    7b34:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    7b36:	cf 91       	pop	r28
    7b38:	00 cd       	rjmp	.-1536   	; 0x753a <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    7b3a:	df 91       	pop	r29
    7b3c:	cf 91       	pop	r28
			}

			break;
	}
}
    7b3e:	08 95       	ret

00007b40 <MS_Device_ConfigureEndpoints>:
    7b40:	cf 93       	push	r28
    7b42:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    7b44:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    7b46:	fc 01       	movw	r30, r24
    7b48:	3c 96       	adiw	r30, 0x0c	; 12
    7b4a:	8d e2       	ldi	r24, 0x2D	; 45
    7b4c:	df 01       	movw	r26, r30
    7b4e:	1d 92       	st	X+, r1
    7b50:	8a 95       	dec	r24
    7b52:	e9 f7       	brne	.-6      	; 0x7b4e <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    7b54:	82 e0       	ldi	r24, 0x02	; 2
    7b56:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    7b58:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    7b5a:	61 e0       	ldi	r22, 0x01	; 1
    7b5c:	ce 01       	movw	r24, r28
    7b5e:	01 96       	adiw	r24, 0x01	; 1
    7b60:	a4 dc       	rcall	.-1720   	; 0x74aa <Endpoint_ConfigureEndpointTable>
    7b62:	88 23       	and	r24, r24
    7b64:	31 f0       	breq	.+12     	; 0x7b72 <MS_Device_ConfigureEndpoints+0x32>
    7b66:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    7b68:	ce 01       	movw	r24, r28
    7b6a:	06 96       	adiw	r24, 0x06	; 6
    7b6c:	df 91       	pop	r29
	  return false;

	return true;
}
    7b6e:	cf 91       	pop	r28
    7b70:	9c cc       	rjmp	.-1736   	; 0x74aa <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    7b72:	80 e0       	ldi	r24, 0x00	; 0
    7b74:	df 91       	pop	r29
	  return false;

	return true;
}
    7b76:	cf 91       	pop	r28
    7b78:	08 95       	ret

00007b7a <MS_Device_USBTask>:
    7b7a:	ef 92       	push	r14
    7b7c:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    7b7e:	0f 93       	push	r16
    7b80:	1f 93       	push	r17
    7b82:	cf 93       	push	r28
    7b84:	df 93       	push	r29
    7b86:	00 d0       	rcall	.+0      	; 0x7b88 <MS_Device_USBTask+0xe>
    7b88:	cd b7       	in	r28, 0x3d	; 61
    7b8a:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    7b8c:	2e b3       	in	r18, 0x1e	; 30
    7b8e:	24 30       	cpi	r18, 0x04	; 4
    7b90:	09 f0       	breq	.+2      	; 0x7b94 <MS_Device_USBTask+0x1a>
    7b92:	00 c1       	rjmp	.+512    	; 0x7d94 <MS_Device_USBTask+0x21a>
    7b94:	8c 01       	movw	r16, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7b96:	fc 01       	movw	r30, r24
    7b98:	86 81       	ldd	r24, Z+6	; 0x06
    7b9a:	8f 70       	andi	r24, 0x0F	; 15
    7b9c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7ba0:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    7ba4:	82 ff       	sbrs	r24, 2
    7ba6:	bd c0       	rjmp	.+378    	; 0x7d22 <MS_Device_USBTask+0x1a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ba8:	86 81       	ldd	r24, Z+6	; 0x06
    7baa:	8f 70       	andi	r24, 0x0F	; 15
    7bac:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    7bb0:	1a 82       	std	Y+2, r1	; 0x02
    7bb2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    7bb4:	78 01       	movw	r14, r16
    7bb6:	fc e0       	ldi	r31, 0x0C	; 12
    7bb8:	ef 0e       	add	r14, r31
    7bba:	f1 1c       	adc	r15, r1
    7bbc:	ae 01       	movw	r20, r28
    7bbe:	4f 5f       	subi	r20, 0xFF	; 255
    7bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    7bc2:	6f e0       	ldi	r22, 0x0F	; 15
    7bc4:	70 e0       	ldi	r23, 0x00	; 0
    7bc6:	c7 01       	movw	r24, r14
    7bc8:	b2 db       	rcall	.-2204   	; 0x732e <Endpoint_Read_Stream_LE>
    7bca:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    7bcc:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    7bce:	21 f4       	brne	.+8      	; 0x7bd8 <MS_Device_USBTask+0x5e>
    7bd0:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    7bd2:	88 23       	and	r24, r24
    7bd4:	99 f3       	breq	.-26     	; 0x7bbc <MS_Device_USBTask+0x42>
    7bd6:	a5 c0       	rjmp	.+330    	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7bd8:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    7bda:	95 85       	ldd	r25, Z+13	; 0x0d
    7bdc:	a6 85       	ldd	r26, Z+14	; 0x0e
    7bde:	b7 85       	ldd	r27, Z+15	; 0x0f
    7be0:	85 35       	cpi	r24, 0x55	; 85
    7be2:	93 45       	sbci	r25, 0x53	; 83
    7be4:	a2 44       	sbci	r26, 0x42	; 66
    7be6:	b3 44       	sbci	r27, 0x43	; 67
    7be8:	61 f4       	brne	.+24     	; 0x7c02 <MS_Device_USBTask+0x88>
    7bea:	f8 01       	movw	r30, r16
    7bec:	91 8d       	ldd	r25, Z+25	; 0x19
    7bee:	83 85       	ldd	r24, Z+11	; 0x0b
    7bf0:	98 17       	cp	r25, r24
    7bf2:	38 f4       	brcc	.+14     	; 0x7c02 <MS_Device_USBTask+0x88>
    7bf4:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    7bf6:	8f 71       	andi	r24, 0x1F	; 31
    7bf8:	21 f4       	brne	.+8      	; 0x7c02 <MS_Device_USBTask+0x88>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    7bfa:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    7bfc:	81 50       	subi	r24, 0x01	; 1
    7bfe:	80 31       	cpi	r24, 0x10	; 16
    7c00:	80 f0       	brcs	.+32     	; 0x7c22 <MS_Device_USBTask+0xa8>
    7c02:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c06:	80 62       	ori	r24, 0x20	; 32
    7c08:	80 93 eb 00 	sts	0x00EB, r24
    7c0c:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c0e:	81 81       	ldd	r24, Z+1	; 0x01
    7c10:	8f 70       	andi	r24, 0x0F	; 15
    7c12:	80 93 e9 00 	sts	0x00E9, r24
    7c16:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c1a:	80 62       	ori	r24, 0x20	; 32
    7c1c:	80 93 eb 00 	sts	0x00EB, r24
    7c20:	80 c0       	rjmp	.+256    	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7c22:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    7c24:	19 82       	std	Y+1, r1	; 0x01
    7c26:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    7c28:	fb e1       	ldi	r31, 0x1B	; 27
    7c2a:	ef 0e       	add	r14, r31
    7c2c:	f1 1c       	adc	r15, r1
    7c2e:	f8 01       	movw	r30, r16
    7c30:	62 8d       	ldd	r22, Z+26	; 0x1a
    7c32:	70 e0       	ldi	r23, 0x00	; 0
    7c34:	ae 01       	movw	r20, r28
    7c36:	4f 5f       	subi	r20, 0xFF	; 255
    7c38:	5f 4f       	sbci	r21, 0xFF	; 255
    7c3a:	c7 01       	movw	r24, r14
    7c3c:	78 db       	rcall	.-2320   	; 0x732e <Endpoint_Read_Stream_LE>
    7c3e:	85 30       	cpi	r24, 0x05	; 5
    7c40:	29 f4       	brne	.+10     	; 0x7c4c <MS_Device_USBTask+0xd2>
    7c42:	f8 01       	movw	r30, r16
    7c44:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    7c46:	88 23       	and	r24, r24
    7c48:	91 f3       	breq	.-28     	; 0x7c2e <MS_Device_USBTask+0xb4>
    7c4a:	6b c0       	rjmp	.+214    	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7c4c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c50:	8b 77       	andi	r24, 0x7B	; 123
    7c52:	80 93 e8 00 	sts	0x00E8, r24
    7c56:	f8 01       	movw	r30, r16
    7c58:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    7c5a:	87 ff       	sbrs	r24, 7
    7c5c:	04 c0       	rjmp	.+8      	; 0x7c66 <MS_Device_USBTask+0xec>
    7c5e:	81 81       	ldd	r24, Z+1	; 0x01
    7c60:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c62:	80 93 e9 00 	sts	0x00E9, r24
    7c66:	c8 01       	movw	r24, r16
    7c68:	0e 94 6d 34 	call	0x68da	; 0x68da <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    7c6c:	91 e0       	ldi	r25, 0x01	; 1
    7c6e:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    7c70:	f8 01       	movw	r30, r16
    7c72:	97 ab       	std	Z+55, r25	; 0x37
    7c74:	45 e5       	ldi	r20, 0x55	; 85
    7c76:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    7c78:	62 e4       	ldi	r22, 0x42	; 66
    7c7a:	73 e5       	ldi	r23, 0x53	; 83
    7c7c:	43 a7       	std	Z+43, r20	; 0x2b
    7c7e:	54 a7       	std	Z+44, r21	; 0x2c
    7c80:	65 a7       	std	Z+45, r22	; 0x2d
    7c82:	76 a7       	std	Z+46, r23	; 0x2e
    7c84:	40 89       	ldd	r20, Z+16	; 0x10
    7c86:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    7c88:	62 89       	ldd	r22, Z+18	; 0x12
    7c8a:	73 89       	ldd	r23, Z+19	; 0x13
    7c8c:	47 a7       	std	Z+47, r20	; 0x2f
    7c8e:	50 ab       	std	Z+48, r21	; 0x30
    7c90:	61 ab       	std	Z+49, r22	; 0x31
    7c92:	72 ab       	std	Z+50, r23	; 0x32
    7c94:	44 89       	ldd	r20, Z+20	; 0x14
    7c96:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    7c98:	66 89       	ldd	r22, Z+22	; 0x16
    7c9a:	77 89       	ldd	r23, Z+23	; 0x17
    7c9c:	43 ab       	std	Z+51, r20	; 0x33
    7c9e:	54 ab       	std	Z+52, r21	; 0x34
    7ca0:	65 ab       	std	Z+53, r22	; 0x35
    7ca2:	76 ab       	std	Z+54, r23	; 0x36
    7ca4:	81 11       	cpse	r24, r1
    7ca6:	09 c0       	rjmp	.+18     	; 0x7cba <MS_Device_USBTask+0x140>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    7ca8:	45 2b       	or	r20, r21
    7caa:	46 2b       	or	r20, r22
    7cac:	47 2b       	or	r20, r23
    7cae:	29 f0       	breq	.+10     	; 0x7cba <MS_Device_USBTask+0x140>
    7cb0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cb4:	80 62       	ori	r24, 0x20	; 32
    7cb6:	80 93 eb 00 	sts	0x00EB, r24
    7cba:	f8 01       	movw	r30, r16
    7cbc:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7cbe:	8f 70       	andi	r24, 0x0F	; 15
    7cc0:	80 93 e9 00 	sts	0x00E9, r24
    7cc4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7cc8:	f8 01       	movw	r30, r16
    7cca:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    7ccc:	04 c0       	rjmp	.+8      	; 0x7cd6 <MS_Device_USBTask+0x15c>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    7cce:	80 ad       	ldd	r24, Z+56	; 0x38
    7cd0:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    7cd2:	c1 f3       	breq	.-16     	; 0x7cc4 <MS_Device_USBTask+0x14a>
    7cd4:	26 c0       	rjmp	.+76     	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7cd6:	81 81       	ldd	r24, Z+1	; 0x01
    7cd8:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7cda:	80 93 e9 00 	sts	0x00E9, r24
    7cde:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7ce2:	85 ff       	sbrs	r24, 5
    7ce4:	05 c0       	rjmp	.+10     	; 0x7cf0 <MS_Device_USBTask+0x176>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    7ce6:	f8 01       	movw	r30, r16
    7ce8:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    7cea:	88 23       	and	r24, r24
    7cec:	c1 f3       	breq	.-16     	; 0x7cde <MS_Device_USBTask+0x164>
    7cee:	19 c0       	rjmp	.+50     	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7cf0:	1a 82       	std	Y+2, r1	; 0x02
    7cf2:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
    7cf4:	78 01       	movw	r14, r16
    7cf6:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    7cf8:	ef 0e       	add	r14, r31
    7cfa:	f1 1c       	adc	r15, r1
    7cfc:	ae 01       	movw	r20, r28
    7cfe:	4f 5f       	subi	r20, 0xFF	; 255
    7d00:	5f 4f       	sbci	r21, 0xFF	; 255
    7d02:	6d e0       	ldi	r22, 0x0D	; 13
    7d04:	70 e0       	ldi	r23, 0x00	; 0
    7d06:	c7 01       	movw	r24, r14
    7d08:	c9 da       	rcall	.-2670   	; 0x729c <Endpoint_Write_Stream_LE>
    7d0a:	85 30       	cpi	r24, 0x05	; 5
    7d0c:	29 f4       	brne	.+10     	; 0x7d18 <MS_Device_USBTask+0x19e>
    7d0e:	f8 01       	movw	r30, r16
    7d10:	80 ad       	ldd	r24, Z+56	; 0x38
    7d12:	88 23       	and	r24, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    7d14:	99 f3       	breq	.-26     	; 0x7cfc <MS_Device_USBTask+0x182>
    7d16:	05 c0       	rjmp	.+10     	; 0x7d22 <MS_Device_USBTask+0x1a8>
    7d18:	80 91 e8 00 	lds	r24, 0x00E8
    7d1c:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7d1e:	80 93 e8 00 	sts	0x00E8, r24
    7d22:	f8 01       	movw	r30, r16
    7d24:	80 ad       	ldd	r24, Z+56	; 0x38
    7d26:	88 23       	and	r24, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    7d28:	a9 f1       	breq	.+106    	; 0x7d94 <MS_Device_USBTask+0x21a>
    7d2a:	26 81       	ldd	r18, Z+6	; 0x06
    7d2c:	2f 70       	andi	r18, 0x0F	; 15
    7d2e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7d30:	90 e0       	ldi	r25, 0x00	; 0
    7d32:	ac 01       	movw	r20, r24
    7d34:	02 c0       	rjmp	.+4      	; 0x7d3a <MS_Device_USBTask+0x1c0>
    7d36:	44 0f       	add	r20, r20
    7d38:	55 1f       	adc	r21, r21
    7d3a:	2a 95       	dec	r18
    7d3c:	e2 f7       	brpl	.-8      	; 0x7d36 <MS_Device_USBTask+0x1bc>
    7d3e:	40 93 ea 00 	sts	0x00EA, r20
    7d42:	10 92 ea 00 	sts	0x00EA, r1
    7d46:	21 81       	ldd	r18, Z+1	; 0x01
				UERST = 0;
    7d48:	2f 70       	andi	r18, 0x0F	; 15
    7d4a:	01 c0       	rjmp	.+2      	; 0x7d4e <MS_Device_USBTask+0x1d4>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7d4c:	88 0f       	add	r24, r24
    7d4e:	2a 95       	dec	r18
    7d50:	ea f7       	brpl	.-6      	; 0x7d4c <MS_Device_USBTask+0x1d2>
    7d52:	80 93 ea 00 	sts	0x00EA, r24
    7d56:	10 92 ea 00 	sts	0x00EA, r1
    7d5a:	86 81       	ldd	r24, Z+6	; 0x06
				UERST = 0;
    7d5c:	8f 70       	andi	r24, 0x0F	; 15
    7d5e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d62:	80 91 eb 00 	lds	r24, 0x00EB
    7d66:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d68:	80 93 eb 00 	sts	0x00EB, r24
    7d6c:	80 91 eb 00 	lds	r24, 0x00EB
    7d70:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d72:	80 93 eb 00 	sts	0x00EB, r24
    7d76:	81 81       	ldd	r24, Z+1	; 0x01
    7d78:	8f 70       	andi	r24, 0x0F	; 15
    7d7a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d7e:	80 91 eb 00 	lds	r24, 0x00EB
    7d82:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d84:	80 93 eb 00 	sts	0x00EB, r24
    7d88:	80 91 eb 00 	lds	r24, 0x00EB
    7d8c:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d8e:	80 93 eb 00 	sts	0x00EB, r24
    7d92:	10 ae       	std	Z+56, r1	; 0x38
    7d94:	0f 90       	pop	r0
    7d96:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    7d98:	df 91       	pop	r29
	}
}
    7d9a:	cf 91       	pop	r28
    7d9c:	1f 91       	pop	r17
    7d9e:	0f 91       	pop	r16
    7da0:	ff 90       	pop	r15
    7da2:	ef 90       	pop	r14
    7da4:	08 95       	ret

00007da6 <__eerd_byte_m32u4>:
    7da6:	f9 99       	sbic	0x1f, 1	; 31
    7da8:	fe cf       	rjmp	.-4      	; 0x7da6 <__eerd_byte_m32u4>
    7daa:	92 bd       	out	0x22, r25	; 34
    7dac:	81 bd       	out	0x21, r24	; 33
    7dae:	f8 9a       	sbi	0x1f, 0	; 31
    7db0:	99 27       	eor	r25, r25
    7db2:	80 b5       	in	r24, 0x20	; 32
    7db4:	08 95       	ret

00007db6 <__eeupd_byte_m32u4>:
    7db6:	26 2f       	mov	r18, r22

00007db8 <__eeupd_r18_m32u4>:
    7db8:	f9 99       	sbic	0x1f, 1	; 31
    7dba:	fe cf       	rjmp	.-4      	; 0x7db8 <__eeupd_r18_m32u4>
    7dbc:	92 bd       	out	0x22, r25	; 34
    7dbe:	81 bd       	out	0x21, r24	; 33
    7dc0:	f8 9a       	sbi	0x1f, 0	; 31
    7dc2:	01 97       	sbiw	r24, 0x01	; 1
    7dc4:	00 b4       	in	r0, 0x20	; 32
    7dc6:	02 16       	cp	r0, r18
    7dc8:	39 f0       	breq	.+14     	; 0x7dd8 <__eeupd_r18_m32u4+0x20>
    7dca:	1f ba       	out	0x1f, r1	; 31
    7dcc:	20 bd       	out	0x20, r18	; 32
    7dce:	0f b6       	in	r0, 0x3f	; 63
    7dd0:	f8 94       	cli
    7dd2:	fa 9a       	sbi	0x1f, 2	; 31
    7dd4:	f9 9a       	sbi	0x1f, 1	; 31
    7dd6:	0f be       	out	0x3f, r0	; 63
    7dd8:	08 95       	ret

00007dda <_exit>:
    7dda:	f8 94       	cli

00007ddc <__stop_program>:
    7ddc:	ff cf       	rjmp	.-2      	; 0x7ddc <__stop_program>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	e4 c8       	rjmp	.-3640   	; 0x716a <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
    7fa2:	f5 c8       	rjmp	.-3606   	; 0x718e <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa4:	06 c9       	rjmp	.-3572   	; 0x71b2 <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    7fa6:	12 c9       	rjmp	.-3548   	; 0x71cc <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa8:	17 c9       	rjmp	.-3538   	; 0x71d8 <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	1c c9       	rjmp	.-3528   	; 0x71e4 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fac:	22 c9       	rjmp	.-3516   	; 0x71f2 <BootloaderAPI_WriteLock>

00007fae <BootloaderAPI_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPI_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPI_UNUSED5>:
    7fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	30 df       	rcall	.-416    	; 0x7e5e <__data_load_start+0x80>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <USB_Device_ProcessControlRequest+0x17a>

Disassembly of section .boot_aux:

00006810 <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    6810:	84 b7       	in	r24, 0x34	; 52
    6812:	87 7f       	andi	r24, 0xF7	; 247
    6814:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    6816:	88 e1       	ldi	r24, 0x18	; 24
    6818:	0f b6       	in	r0, 0x3f	; 63
    681a:	f8 94       	cli
    681c:	80 93 60 00 	sts	0x0060, r24
    6820:	10 92 60 00 	sts	0x0060, r1
    6824:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    6826:	90 e0       	ldi	r25, 0x00	; 0
    6828:	80 e8       	ldi	r24, 0x80	; 128
    682a:	0f b6       	in	r0, 0x3f	; 63
    682c:	f8 94       	cli
    682e:	80 93 61 00 	sts	0x0061, r24
    6832:	90 93 61 00 	sts	0x0061, r25
    6836:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    6838:	c1 e0       	ldi	r28, 0x01	; 1
    683a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
    683c:	82 e0       	ldi	r24, 0x02	; 2
    683e:	85 bf       	out	0x35, r24	; 53

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |=  LEDS_ALL_LEDS;
    6840:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_ALL_LEDS;
    6842:	47 98       	cbi	0x08, 7	; 8

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    6844:	03 d7       	rcall	.+3590   	; 0x764c <USB_Init>
    6846:	c0 93 6f 00 	sts	0x006F, r28

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    684a:	c0 93 81 00 	sts	0x0081, r28
	TCCR1B = (1 << CS10);
    684e:	82 e8       	ldi	r24, 0x82	; 130
	TCCR4A = (1<<COM4A1) | (1<<PWM4A); // output on OCR4A
    6850:	80 93 c0 00 	sts	0x00C0, r24
    6854:	c0 93 c1 00 	sts	0x00C1, r28
	TCCR4B = (1<<CS40); // 1 divider for clock
    6858:	8f ef       	ldi	r24, 0xFF	; 255
	//TCCR4D = 0; // fast PWM mode
	OCR4C = 0xFF;
    685a:	80 93 d1 00 	sts	0x00D1, r24
    685e:	80 e8       	ldi	r24, 0x80	; 128
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    6860:	5d d4       	rcall	.+2234   	; 0x711c <LEDs_SetAllLEDs>
    6862:	78 94       	sei
    6864:	80 91 01 01 	lds	r24, 0x0101
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
    6868:	88 23       	and	r24, r24
    686a:	39 f0       	breq	.+14     	; 0x687a <main+0x6a>
    686c:	82 e0       	ldi	r24, 0x02	; 2
    686e:	91 e0       	ldi	r25, 0x01	; 1
	{
		MS_Device_USBTask(&Disk_MS_Interface);
    6870:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <MS_Device_USBTask>
    6874:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <USB_USBTask>
		USB_USBTask();
    6878:	f5 cf       	rjmp	.-22     	; 0x6864 <main+0x54>
    687a:	80 91 82 02 	lds	r24, 0x0282
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
    687e:	91 e0       	ldi	r25, 0x01	; 1
    6880:	98 0f       	add	r25, r24
    6882:	90 93 82 02 	sts	0x0282, r25
    6886:	8f 3f       	cpi	r24, 0xFF	; 255
    6888:	89 f7       	brne	.-30     	; 0x686c <main+0x5c>
    688a:	80 91 e0 00 	lds	r24, 0x00E0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    688e:	81 60       	ori	r24, 0x01	; 1
    6890:	80 93 e0 00 	sts	0x00E0, r24
    6894:	82 e4       	ldi	r24, 0x42	; 66
    6896:	9c ed       	ldi	r25, 0xDC	; 220

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    6898:	90 93 8e 02 	sts	0x028E, r25
    689c:	80 93 8d 02 	sts	0x028D, r24
    68a0:	9c e0       	ldi	r25, 0x0C	; 12
    68a2:	88 e1       	ldi	r24, 0x18	; 24

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    68a4:	0f b6       	in	r0, 0x3f	; 63
    68a6:	f8 94       	cli
    68a8:	a8 95       	wdr
    68aa:	80 93 60 00 	sts	0x0060, r24
    68ae:	0f be       	out	0x3f, r0	; 63
    68b0:	90 93 60 00 	sts	0x0060, r25
    68b4:	ff cf       	rjmp	.-2      	; 0x68b4 <main+0xa4>

000068b6 <EVENT_USB_Device_Connect>:
    68b6:	80 e0       	ldi	r24, 0x00	; 0

	for (;;);
    68b8:	31 c4       	rjmp	.+2146   	; 0x711c <LEDs_SetAllLEDs>

000068ba <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    68ba:	80 e8       	ldi	r24, 0x80	; 128
    68bc:	2f c4       	rjmp	.+2142   	; 0x711c <LEDs_SetAllLEDs>

000068be <EVENT_USB_Device_ConfigurationChanged>:
    68be:	82 e0       	ldi	r24, 0x02	; 2
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    68c0:	91 e0       	ldi	r25, 0x01	; 1
    68c2:	0e 94 a0 3d 	call	0x7b40	; 0x7b40 <MS_Device_ConfigureEndpoints>
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    68c6:	81 11       	cpse	r24, r1
    68c8:	02 c0       	rjmp	.+4      	; 0x68ce <EVENT_USB_Device_ConfigurationChanged+0x10>
    68ca:	80 e8       	ldi	r24, 0x80	; 128
    68cc:	01 c0       	rjmp	.+2      	; 0x68d0 <EVENT_USB_Device_ConfigurationChanged+0x12>

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    68ce:	80 e0       	ldi	r24, 0x00	; 0
    68d0:	25 c4       	rjmp	.+2122   	; 0x711c <LEDs_SetAllLEDs>

000068d2 <EVENT_USB_Device_ControlRequest>:
    68d2:	82 e0       	ldi	r24, 0x02	; 2
    68d4:	91 e0       	ldi	r25, 0x01	; 1
    68d6:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <MS_Device_ProcessControlRequest>

000068da <CALLBACK_MS_Device_SCSICommandReceived>:
    68da:	cf 93       	push	r28
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    68dc:	df 93       	push	r29
    68de:	ec 01       	movw	r28, r24
    68e0:	80 e0       	ldi	r24, 0x00	; 0
    68e2:	1c d4       	rcall	.+2104   	; 0x711c <LEDs_SetAllLEDs>
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    68e4:	ce 01       	movw	r24, r28
    68e6:	7e d0       	rcall	.+252    	; 0x69e4 <SCSI_DecodeSCSICommand>
    68e8:	c8 2f       	mov	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
    68ea:	80 e0       	ldi	r24, 0x00	; 0
    68ec:	17 d4       	rcall	.+2094   	; 0x711c <LEDs_SetAllLEDs>
    68ee:	10 92 82 02 	sts	0x0282, r1
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    68f2:	8c 2f       	mov	r24, r28
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
    68f8:	08 95       	ret

000068fa <CALLBACK_USB_GetDescriptor>:

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
    68fa:	91 30       	cpi	r25, 0x01	; 1
    68fc:	39 f0       	breq	.+14     	; 0x690c <CALLBACK_USB_GetDescriptor+0x12>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
    68fe:	92 30       	cpi	r25, 0x02	; 2
    6900:	51 f4       	brne	.+20     	; 0x6916 <CALLBACK_USB_GetDescriptor+0x1c>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
    6902:	80 e2       	ldi	r24, 0x20	; 32
    6904:	90 e0       	ldi	r25, 0x00	; 0
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
    6906:	2d ee       	ldi	r18, 0xED	; 237
    6908:	31 e0       	ldi	r19, 0x01	; 1
    690a:	09 c0       	rjmp	.+18     	; 0x691e <CALLBACK_USB_GetDescriptor+0x24>

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
    690c:	82 e1       	ldi	r24, 0x12	; 18
    690e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
    6910:	2d e0       	ldi	r18, 0x0D	; 13
    6912:	32 e0       	ldi	r19, 0x02	; 2
    6914:	04 c0       	rjmp	.+8      	; 0x691e <CALLBACK_USB_GetDescriptor+0x24>
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    6916:	80 e0       	ldi	r24, 0x00	; 0
    6918:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	30 e0       	ldi	r19, 0x00	; 0
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
	}

	*DescriptorAddress = Address;
    691e:	fa 01       	movw	r30, r20
    6920:	31 83       	std	Z+1, r19	; 0x01
    6922:	20 83       	st	Z, r18
	return Size;
}
    6924:	08 95       	ret

00006926 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    6926:	9f 92       	push	r9
    6928:	af 92       	push	r10
    692a:	bf 92       	push	r11
    692c:	cf 92       	push	r12
    692e:	df 92       	push	r13
    6930:	ef 92       	push	r14
    6932:	ff 92       	push	r15
    6934:	0f 93       	push	r16
    6936:	1f 93       	push	r17
    6938:	cf 93       	push	r28
    693a:	df 93       	push	r29
    693c:	ec 01       	movw	r28, r24
    693e:	96 2e       	mov	r9, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    6940:	c8 a0       	ldd	r12, Y+32	; 0x20
    6942:	df 8c       	ldd	r13, Y+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    6944:	0b a1       	ldd	r16, Y+35	; 0x23
    6946:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    6948:	86 e5       	ldi	r24, 0x56	; 86
    694a:	c8 16       	cp	r12, r24
    694c:	d1 04       	cpc	r13, r1
    694e:	78 f0       	brcs	.+30     	; 0x696e <SCSI_Command_ReadWrite_10+0x48>
	{
	  uputc('a');
    6950:	81 e6       	ldi	r24, 0x61	; 97
    6952:	5d d4       	rcall	.+2234   	; 0x720e <uputc>
    6954:	80 91 3d 01 	lds	r24, 0x013D
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    6958:	80 7f       	andi	r24, 0xF0	; 240
    695a:	85 60       	ori	r24, 0x05	; 5
    695c:	80 93 3d 01 	sts	0x013D, r24
    6960:	81 e2       	ldi	r24, 0x21	; 33
    6962:	80 93 47 01 	sts	0x0147, r24
    6966:	10 92 48 01 	sts	0x0148, r1
    696a:	80 e0       	ldi	r24, 0x00	; 0
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    696c:	2f c0       	rjmp	.+94     	; 0x69cc <SCSI_Command_ReadWrite_10+0xa6>
    696e:	81 e4       	ldi	r24, 0x41	; 65
	}
	  uputc('A');
    6970:	4e d4       	rcall	.+2204   	; 0x720e <uputc>
    6972:	56 01       	movw	r10, r12
    6974:	c6 01       	movw	r24, r12
    6976:	8a 19       	sub	r24, r10
    6978:	9b 09       	sbc	r25, r11
    697a:	80 17       	cp	r24, r16
    697c:	91 07       	cpc	r25, r17
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
    697e:	70 f4       	brcc	.+28     	; 0x699c <SCSI_Command_ReadWrite_10+0x76>
    6980:	c6 01       	movw	r24, r12
    6982:	99 20       	and	r9, r9
	{
	  if (IsDataRead == DATA_READ) {
		  VirtualFAT_ReadBlock(BlockAddress + i);
    6984:	31 f0       	breq	.+12     	; 0x6992 <SCSI_Command_ReadWrite_10+0x6c>
	}
	  uputc('A');
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
	{
	  if (IsDataRead == DATA_READ) {
    6986:	02 d2       	rcall	.+1028   	; 0x6d8c <VirtualFAT_ReadBlock>
    6988:	82 e7       	ldi	r24, 0x72	; 114
		  VirtualFAT_ReadBlock(BlockAddress + i);
    698a:	41 d4       	rcall	.+2178   	; 0x720e <uputc>
    698c:	8c 2d       	mov	r24, r12
	  uputc('r');
    698e:	3f d4       	rcall	.+2174   	; 0x720e <uputc>
    6990:	01 c0       	rjmp	.+2      	; 0x6994 <SCSI_Command_ReadWrite_10+0x6e>
    6992:	33 d1       	rcall	.+614    	; 0x6bfa <VirtualFAT_WriteBlock>
	  uputc(BlockAddress + i);
    6994:	8f ef       	ldi	r24, 0xFF	; 255
    6996:	c8 1a       	sub	r12, r24
    6998:	d8 0a       	sbc	r13, r24
    699a:	ec cf       	rjmp	.-40     	; 0x6974 <SCSI_Command_ReadWrite_10+0x4e>
	  }

		else
		  VirtualFAT_WriteBlock(BlockAddress + i);
    699c:	81 e2       	ldi	r24, 0x21	; 33
    699e:	37 d4       	rcall	.+2158   	; 0x720e <uputc>
    69a0:	20 e0       	ldi	r18, 0x00	; 0
    69a2:	30 e0       	ldi	r19, 0x00	; 0
    69a4:	89 e0       	ldi	r24, 0x09	; 9
    69a6:	00 0f       	add	r16, r16
	}

uputc('!');
    69a8:	11 1f       	adc	r17, r17
    69aa:	22 1f       	adc	r18, r18
    69ac:	33 1f       	adc	r19, r19
	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * SECTOR_SIZE_BYTES);
    69ae:	8a 95       	dec	r24
    69b0:	d1 f7       	brne	.-12     	; 0x69a6 <SCSI_Command_ReadWrite_10+0x80>
    69b2:	8c 89       	ldd	r24, Y+20	; 0x14
    69b4:	9d 89       	ldd	r25, Y+21	; 0x15
    69b6:	ae 89       	ldd	r26, Y+22	; 0x16
    69b8:	bf 89       	ldd	r27, Y+23	; 0x17
    69ba:	80 1b       	sub	r24, r16
    69bc:	91 0b       	sbc	r25, r17
    69be:	a2 0b       	sbc	r26, r18
    69c0:	b3 0b       	sbc	r27, r19
    69c2:	8c 8b       	std	Y+20, r24	; 0x14
    69c4:	9d 8b       	std	Y+21, r25	; 0x15
    69c6:	ae 8b       	std	Y+22, r26	; 0x16
    69c8:	bf 8b       	std	Y+23, r27	; 0x17
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	1f 91       	pop	r17
    69d2:	0f 91       	pop	r16
    69d4:	ff 90       	pop	r15
    69d6:	ef 90       	pop	r14

	return true;
    69d8:	df 90       	pop	r13
}
    69da:	cf 90       	pop	r12
    69dc:	bf 90       	pop	r11
    69de:	af 90       	pop	r10
    69e0:	9f 90       	pop	r9
    69e2:	08 95       	ret

000069e4 <SCSI_DecodeSCSICommand>:
    69e4:	ef 92       	push	r14
    69e6:	ff 92       	push	r15
    69e8:	0f 93       	push	r16
    69ea:	1f 93       	push	r17
    69ec:	cf 93       	push	r28
    69ee:	df 93       	push	r29
    69f0:	ec 01       	movw	r28, r24
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    69f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69f4:	8f 31       	cpi	r24, 0x1F	; 31
    69f6:	a0 f4       	brcc	.+40     	; 0x6a20 <SCSI_DecodeSCSICommand+0x3c>
    69f8:	8d 31       	cpi	r24, 0x1D	; 29
    69fa:	08 f0       	brcs	.+2      	; 0x69fe <SCSI_DecodeSCSICommand+0x1a>
    69fc:	bc c0       	rjmp	.+376    	; 0x6b76 <SCSI_DecodeSCSICommand+0x192>
    69fe:	82 31       	cpi	r24, 0x12	; 18
	bool CommandSuccess = false;

	//UDR1 = MSInterfaceInfo->State.CommandBlock.SCSICommandData[0];

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    6a00:	e1 f1       	breq	.+120    	; 0x6a7a <SCSI_DecodeSCSICommand+0x96>
    6a02:	38 f4       	brcc	.+14     	; 0x6a12 <SCSI_DecodeSCSICommand+0x2e>
    6a04:	88 23       	and	r24, r24
    6a06:	09 f4       	brne	.+2      	; 0x6a0a <SCSI_DecodeSCSICommand+0x26>
    6a08:	b6 c0       	rjmp	.+364    	; 0x6b76 <SCSI_DecodeSCSICommand+0x192>
    6a0a:	83 30       	cpi	r24, 0x03	; 3
    6a0c:	09 f4       	brne	.+2      	; 0x6a10 <SCSI_DecodeSCSICommand+0x2c>
    6a0e:	66 c0       	rjmp	.+204    	; 0x6adc <SCSI_DecodeSCSICommand+0xf8>
    6a10:	b7 c0       	rjmp	.+366    	; 0x6b80 <SCSI_DecodeSCSICommand+0x19c>
    6a12:	8a 31       	cpi	r24, 0x1A	; 26
    6a14:	09 f4       	brne	.+2      	; 0x6a18 <SCSI_DecodeSCSICommand+0x34>
    6a16:	8e c0       	rjmp	.+284    	; 0x6b34 <SCSI_DecodeSCSICommand+0x150>
    6a18:	8b 31       	cpi	r24, 0x1B	; 27
    6a1a:	09 f4       	brne	.+2      	; 0x6a1e <SCSI_DecodeSCSICommand+0x3a>
    6a1c:	a4 c0       	rjmp	.+328    	; 0x6b66 <SCSI_DecodeSCSICommand+0x182>
    6a1e:	b0 c0       	rjmp	.+352    	; 0x6b80 <SCSI_DecodeSCSICommand+0x19c>
    6a20:	88 32       	cpi	r24, 0x28	; 40
    6a22:	09 f4       	brne	.+2      	; 0x6a26 <SCSI_DecodeSCSICommand+0x42>
    6a24:	7f c0       	rjmp	.+254    	; 0x6b24 <SCSI_DecodeSCSICommand+0x140>
    6a26:	10 f5       	brcc	.+68     	; 0x6a6c <SCSI_DecodeSCSICommand+0x88>
    6a28:	85 32       	cpi	r24, 0x25	; 37
    6a2a:	09 f0       	breq	.+2      	; 0x6a2e <SCSI_DecodeSCSICommand+0x4a>
    6a2c:	a9 c0       	rjmp	.+338    	; 0x6b80 <SCSI_DecodeSCSICommand+0x19c>
    6a2e:	10 92 f1 00 	sts	0x00F1, r1
    6a32:	10 92 f1 00 	sts	0x00F1, r1
    6a36:	10 92 f1 00 	sts	0x00F1, r1
    6a3a:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
    6a3c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    6a40:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    6a44:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data &  0xFF);
    6a48:	82 e0       	ldi	r24, 0x02	; 2
    6a4a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
    6a4e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
    6a52:	80 91 e8 00 	lds	r24, 0x00E8
				UEDATX = (Data >> 8);
    6a56:	8e 77       	andi	r24, 0x7E	; 126
    6a58:	80 93 e8 00 	sts	0x00E8, r24
				UEDATX = (Data &  0xFF);
    6a5c:	8c 89       	ldd	r24, Y+20	; 0x14
    6a5e:	9d 89       	ldd	r25, Y+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6a60:	ae 89       	ldd	r26, Y+22	; 0x16
    6a62:	bf 89       	ldd	r27, Y+23	; 0x17
    6a64:	08 97       	sbiw	r24, 0x08	; 8
    6a66:	a1 09       	sbc	r26, r1
    6a68:	b1 09       	sbc	r27, r1
	Endpoint_Write_32_BE(LUN_MEDIA_BLOCKS - 1);
	Endpoint_Write_32_BE(SECTOR_SIZE_BYTES);
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    6a6a:	78 c0       	rjmp	.+240    	; 0x6b5c <SCSI_DecodeSCSICommand+0x178>
    6a6c:	8a 32       	cpi	r24, 0x2A	; 42
    6a6e:	09 f4       	brne	.+2      	; 0x6a72 <SCSI_DecodeSCSICommand+0x8e>
    6a70:	57 c0       	rjmp	.+174    	; 0x6b20 <SCSI_DecodeSCSICommand+0x13c>
    6a72:	8f 32       	cpi	r24, 0x2F	; 47
    6a74:	09 f4       	brne	.+2      	; 0x6a78 <SCSI_DecodeSCSICommand+0x94>
    6a76:	7f c0       	rjmp	.+254    	; 0x6b76 <SCSI_DecodeSCSICommand+0x192>
    6a78:	83 c0       	rjmp	.+262    	; 0x6b80 <SCSI_DecodeSCSICommand+0x19c>
	bool CommandSuccess = false;

	//UDR1 = MSInterfaceInfo->State.CommandBlock.SCSICommandData[0];

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    6a7a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    6a7c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    6a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a80:	83 70       	andi	r24, 0x03	; 3
    6a82:	19 f4       	brne	.+6      	; 0x6a8a <SCSI_DecodeSCSICommand+0xa6>
    6a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6a86:	88 23       	and	r24, r24
    6a88:	41 f0       	breq	.+16     	; 0x6a9a <SCSI_DecodeSCSICommand+0xb6>
    6a8a:	80 91 3d 01 	lds	r24, 0x013D
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    6a8e:	80 7f       	andi	r24, 0xF0	; 240
    6a90:	85 60       	ori	r24, 0x05	; 5
    6a92:	80 93 3d 01 	sts	0x013D, r24
    6a96:	84 e2       	ldi	r24, 0x24	; 36
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    6a98:	7a c0       	rjmp	.+244    	; 0x6b8e <SCSI_DecodeSCSICommand+0x1aa>
    6a9a:	78 01       	movw	r14, r16
    6a9c:	05 32       	cpi	r16, 0x25	; 37
    6a9e:	11 05       	cpc	r17, r1
    6aa0:	18 f0       	brcs	.+6      	; 0x6aa8 <SCSI_DecodeSCSICommand+0xc4>
    6aa2:	84 e2       	ldi	r24, 0x24	; 36
    6aa4:	e8 2e       	mov	r14, r24
    6aa6:	f1 2c       	mov	r15, r1
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    6aa8:	40 e0       	ldi	r20, 0x00	; 0
    6aaa:	50 e0       	ldi	r21, 0x00	; 0
    6aac:	b7 01       	movw	r22, r14
    6aae:	8f e1       	ldi	r24, 0x1F	; 31
    6ab0:	92 e0       	ldi	r25, 0x02	; 2
    6ab2:	f4 d3       	rcall	.+2024   	; 0x729c <Endpoint_Write_Stream_LE>
    6ab4:	60 e0       	ldi	r22, 0x00	; 0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    6ab6:	70 e0       	ldi	r23, 0x00	; 0
    6ab8:	c8 01       	movw	r24, r16
    6aba:	8e 19       	sub	r24, r14
    6abc:	9f 09       	sbc	r25, r15
    6abe:	b0 d3       	rcall	.+1888   	; 0x7220 <Endpoint_Null_Stream>
    6ac0:	80 91 e8 00 	lds	r24, 0x00E8

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    6ac4:	8e 77       	andi	r24, 0x7E	; 126
    6ac6:	80 93 e8 00 	sts	0x00E8, r24
    6aca:	8c 89       	ldd	r24, Y+20	; 0x14
    6acc:	9d 89       	ldd	r25, Y+21	; 0x15
    6ace:	ae 89       	ldd	r26, Y+22	; 0x16
    6ad0:	bf 89       	ldd	r27, Y+23	; 0x17
    6ad2:	8e 19       	sub	r24, r14
    6ad4:	9f 09       	sbc	r25, r15
    6ad6:	a1 09       	sbc	r26, r1
    6ad8:	b1 09       	sbc	r27, r1
    6ada:	40 c0       	rjmp	.+128    	; 0x6b5c <SCSI_DecodeSCSICommand+0x178>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    6adc:	1f 8d       	ldd	r17, Y+31	; 0x1f
    6ade:	01 2f       	mov	r16, r17
    6ae0:	13 31       	cpi	r17, 0x13	; 19
    6ae2:	08 f0       	brcs	.+2      	; 0x6ae6 <SCSI_DecodeSCSICommand+0x102>
    6ae4:	02 e1       	ldi	r16, 0x12	; 18
    6ae6:	e0 2e       	mov	r14, r16
    6ae8:	f1 2c       	mov	r15, r1
    6aea:	40 e0       	ldi	r20, 0x00	; 0
    6aec:	50 e0       	ldi	r21, 0x00	; 0
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    6aee:	b7 01       	movw	r22, r14
	uint8_t BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    6af0:	8b e3       	ldi	r24, 0x3B	; 59
    6af2:	91 e0       	ldi	r25, 0x01	; 1
    6af4:	d3 d3       	rcall	.+1958   	; 0x729c <Endpoint_Write_Stream_LE>
    6af6:	81 2f       	mov	r24, r17

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	60 e0       	ldi	r22, 0x00	; 0
    6afc:	70 e0       	ldi	r23, 0x00	; 0
    6afe:	8e 19       	sub	r24, r14
    6b00:	9f 09       	sbc	r25, r15
    6b02:	8e d3       	rcall	.+1820   	; 0x7220 <Endpoint_Null_Stream>
    6b04:	80 91 e8 00 	lds	r24, 0x00E8
    6b08:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    6b0a:	80 93 e8 00 	sts	0x00E8, r24
    6b0e:	8c 89       	ldd	r24, Y+20	; 0x14
    6b10:	9d 89       	ldd	r25, Y+21	; 0x15
    6b12:	ae 89       	ldd	r26, Y+22	; 0x16
    6b14:	bf 89       	ldd	r27, Y+23	; 0x17
    6b16:	80 1b       	sub	r24, r16
    6b18:	91 09       	sbc	r25, r1
    6b1a:	a1 09       	sbc	r26, r1
    6b1c:	b1 09       	sbc	r27, r1
    6b1e:	1e c0       	rjmp	.+60     	; 0x6b5c <SCSI_DecodeSCSICommand+0x178>
    6b20:	60 e0       	ldi	r22, 0x00	; 0
    6b22:	03 c0       	rjmp	.+6      	; 0x6b2a <SCSI_DecodeSCSICommand+0x146>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    6b24:	82 e5       	ldi	r24, 0x52	; 82
    6b26:	73 d3       	rcall	.+1766   	; 0x720e <uputc>
    6b28:	61 e0       	ldi	r22, 0x01	; 1
    6b2a:	ce 01       	movw	r24, r28
    6b2c:	fc de       	rcall	.-520    	; 0x6926 <SCSI_Command_ReadWrite_10>
    6b2e:	88 23       	and	r24, r24
    6b30:	f1 f1       	breq	.+124    	; 0x6bae <SCSI_DecodeSCSICommand+0x1ca>
    6b32:	32 c0       	rjmp	.+100    	; 0x6b98 <SCSI_DecodeSCSICommand+0x1b4>
    6b34:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    6b38:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
		  uputc('R');
    6b3c:	10 92 f1 00 	sts	0x00F1, r1
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    6b40:	10 92 f1 00 	sts	0x00F1, r1
    6b44:	80 91 e8 00 	lds	r24, 0x00E8
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    6b48:	8e 77       	andi	r24, 0x7E	; 126
    6b4a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    6b4e:	8c 89       	ldd	r24, Y+20	; 0x14
    6b50:	9d 89       	ldd	r25, Y+21	; 0x15
				UEDATX = (Data >> 8);
    6b52:	ae 89       	ldd	r26, Y+22	; 0x16
    6b54:	bf 89       	ldd	r27, Y+23	; 0x17
				UEDATX = (Data >> 16);
    6b56:	04 97       	sbiw	r24, 0x04	; 4
    6b58:	a1 09       	sbc	r26, r1
				UEDATX = (Data >> 24);
    6b5a:	b1 09       	sbc	r27, r1
    6b5c:	8c 8b       	std	Y+20, r24	; 0x14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6b5e:	9d 8b       	std	Y+21, r25	; 0x15
    6b60:	ae 8b       	std	Y+22, r26	; 0x16
    6b62:	bf 8b       	std	Y+23, r27	; 0x17
    6b64:	19 c0       	rjmp	.+50     	; 0x6b98 <SCSI_DecodeSCSICommand+0x1b4>
    6b66:	8f 8d       	ldd	r24, Y+31	; 0x1f
	/* Send an empty header response indicating Write Protect flag is off */
	Endpoint_Write_32_LE(0);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    6b68:	83 70       	andi	r24, 0x03	; 3
    6b6a:	91 e0       	ldi	r25, 0x01	; 1
    6b6c:	82 30       	cpi	r24, 0x02	; 2
    6b6e:	09 f4       	brne	.+2      	; 0x6b72 <SCSI_DecodeSCSICommand+0x18e>
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	90 93 01 01 	sts	0x0101, r25
    6b76:	1c 8a       	std	Y+20, r1	; 0x14
    6b78:	1d 8a       	std	Y+21, r1	; 0x15
    6b7a:	1e 8a       	std	Y+22, r1	; 0x16
    6b7c:	1f 8a       	std	Y+23, r1	; 0x17
		  uputc('R');
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    6b7e:	0c c0       	rjmp	.+24     	; 0x6b98 <SCSI_DecodeSCSICommand+0x1b4>
		case SCSI_CMD_START_STOP_UNIT:
#if !defined(NO_APP_START_ON_EJECT)
			/* If the user ejected the volume, signal bootloader exit at next opportunity. */
			RunBootloader = ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[4] & 0x03) != 0x02);
    6b80:	80 91 3d 01 	lds	r24, 0x013D
    6b84:	80 7f       	andi	r24, 0xF0	; 240
    6b86:	85 60       	ori	r24, 0x05	; 5
    6b88:	80 93 3d 01 	sts	0x013D, r24
    6b8c:	80 e2       	ldi	r24, 0x20	; 32
    6b8e:	80 93 47 01 	sts	0x0147, r24
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    6b92:	10 92 48 01 	sts	0x0148, r1
    6b96:	0b c0       	rjmp	.+22     	; 0x6bae <SCSI_DecodeSCSICommand+0x1ca>
			break;
    6b98:	80 91 3d 01 	lds	r24, 0x013D
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    6b9c:	80 7f       	andi	r24, 0xF0	; 240
    6b9e:	80 93 3d 01 	sts	0x013D, r24
    6ba2:	10 92 47 01 	sts	0x0147, r1
    6ba6:	10 92 48 01 	sts	0x0148, r1
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	01 c0       	rjmp	.+2      	; 0x6bb0 <SCSI_DecodeSCSICommand+0x1cc>
    6bae:	80 e0       	ldi	r24, 0x00	; 0
		                   SCSI_ASENSE_INVALID_COMMAND,
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
    6bb0:	df 91       	pop	r29
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    6bb2:	cf 91       	pop	r28
    6bb4:	1f 91       	pop	r17
    6bb6:	0f 91       	pop	r16
    6bb8:	ff 90       	pop	r15
    6bba:	ef 90       	pop	r14
    6bbc:	08 95       	ret

00006bbe <UpdateFAT12ClusterEntry>:
    6bbe:	9b 01       	movw	r18, r22
    6bc0:	36 95       	lsr	r19
    6bc2:	27 95       	ror	r18
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    6bc4:	26 0f       	add	r18, r22
    6bc6:	e2 2f       	mov	r30, r18
	}

	return false;
    6bc8:	f0 e0       	ldi	r31, 0x00	; 0
}
    6bca:	e8 0f       	add	r30, r24
    6bcc:	f9 1f       	adc	r31, r25
    6bce:	60 ff       	sbrs	r22, 0
    6bd0:	0e c0       	rjmp	.+28     	; 0x6bee <UpdateFAT12ClusterEntry+0x30>
    6bd2:	80 81       	ld	r24, Z
    6bd4:	8f 70       	andi	r24, 0x0F	; 15
    6bd6:	94 2f       	mov	r25, r20

	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
    6bd8:	92 95       	swap	r25
    6bda:	90 7f       	andi	r25, 0xF0	; 240
    6bdc:	89 2b       	or	r24, r25
    6bde:	80 83       	st	Z, r24
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
    6be0:	84 e0       	ldi	r24, 0x04	; 4
    6be2:	56 95       	lsr	r21
    6be4:	47 95       	ror	r20
    6be6:	8a 95       	dec	r24
    6be8:	e1 f7       	brne	.-8      	; 0x6be2 <UpdateFAT12ClusterEntry+0x24>
    6bea:	41 83       	std	Z+1, r20	; 0x01
    6bec:	08 95       	ret
	}
	else
	{
		FATTable[FATOffset]     = ChainEntry;
    6bee:	40 83       	st	Z, r20
		FATTable[FATOffset + 1] = (FATTable[FATOffset] & 0xF0) | (ChainEntry >> 8);
    6bf0:	84 2f       	mov	r24, r20
    6bf2:	80 7f       	andi	r24, 0xF0	; 240
    6bf4:	85 2b       	or	r24, r21
    6bf6:	81 83       	std	Z+1, r24	; 0x01
    6bf8:	08 95       	ret

00006bfa <VirtualFAT_WriteBlock>:
 *  Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to write.
 */
void VirtualFAT_WriteBlock(const uint16_t BlockNumber)
{
    6bfa:	4f 92       	push	r4
    6bfc:	5f 92       	push	r5
    6bfe:	6f 92       	push	r6
    6c00:	7f 92       	push	r7
    6c02:	8f 92       	push	r8
    6c04:	9f 92       	push	r9
    6c06:	af 92       	push	r10
    6c08:	bf 92       	push	r11
    6c0a:	cf 92       	push	r12
    6c0c:	df 92       	push	r13
    6c0e:	ef 92       	push	r14
    6c10:	ff 92       	push	r15
    6c12:	0f 93       	push	r16
    6c14:	1f 93       	push	r17
    6c16:	cf 93       	push	r28
    6c18:	df 93       	push	r29
    6c1a:	cd b7       	in	r28, 0x3d	; 61
    6c1c:	de b7       	in	r29, 0x3e	; 62
    6c1e:	d2 50       	subi	r29, 0x02	; 2
    6c20:	0f b6       	in	r0, 0x3f	; 63
    6c22:	f8 94       	cli
    6c24:	de bf       	out	0x3e, r29	; 62
    6c26:	0f be       	out	0x3f, r0	; 63
    6c28:	cd bf       	out	0x3d, r28	; 61
    6c2a:	8c 01       	movw	r16, r24
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];

	/* Buffer the entire block to be written from the host */
	Endpoint_Read_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
    6c2c:	40 e0       	ldi	r20, 0x00	; 0
    6c2e:	50 e0       	ldi	r21, 0x00	; 0
    6c30:	60 e0       	ldi	r22, 0x00	; 0
    6c32:	72 e0       	ldi	r23, 0x02	; 2
    6c34:	ce 01       	movw	r24, r28
    6c36:	01 96       	adiw	r24, 0x01	; 1
    6c38:	7a d3       	rcall	.+1780   	; 0x732e <Endpoint_Read_Stream_LE>
    6c3a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6c3e:	8b 77       	andi	r24, 0x7B	; 123
    6c40:	80 93 e8 00 	sts	0x00E8, r24
    6c44:	03 30       	cpi	r16, 0x03	; 3
	Endpoint_ClearOUT();

	switch (BlockNumber)
    6c46:	11 05       	cpc	r17, r1
    6c48:	08 f4       	brcc	.+2      	; 0x6c4c <VirtualFAT_WriteBlock+0x52>
    6c4a:	89 c0       	rjmp	.+274    	; 0x6d5e <VirtualFAT_WriteBlock+0x164>
    6c4c:	03 30       	cpi	r16, 0x03	; 3
    6c4e:	11 05       	cpc	r17, r1
    6c50:	51 f4       	brne	.+20     	; 0x6c66 <VirtualFAT_WriteBlock+0x6c>
    6c52:	80 ea       	ldi	r24, 0xA0	; 160

			break;

		case DISK_BLOCK_RootFilesBlock:
			/* Copy over the updated directory entries */
			memcpy(FirmwareFileEntries, BlockBuffer, sizeof(FirmwareFileEntries));
    6c54:	fe 01       	movw	r30, r28
    6c56:	31 96       	adiw	r30, 0x01	; 1
    6c58:	ad e4       	ldi	r26, 0x4D	; 77
    6c5a:	b1 e0       	ldi	r27, 0x01	; 1
    6c5c:	01 90       	ld	r0, Z+
    6c5e:	0d 92       	st	X+, r0
    6c60:	8a 95       	dec	r24
    6c62:	e1 f7       	brne	.-8      	; 0x6c5c <VirtualFAT_WriteBlock+0x62>
    6c64:	7c c0       	rjmp	.+248    	; 0x6d5e <VirtualFAT_WriteBlock+0x164>

			break;
    6c66:	80 91 a7 01 	lds	r24, 0x01A7
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
    6c6a:	90 91 a8 01 	lds	r25, 0x01A8
    6c6e:	81 50       	subi	r24, 0x01	; 1
    6c70:	90 4c       	sbci	r25, 0xC0	; 192
    6c72:	88 0f       	add	r24, r24
    6c74:	99 1f       	adc	r25, r25
    6c76:	88 0f       	add	r24, r24
    6c78:	99 1f       	adc	r25, r25
    6c7a:	08 17       	cp	r16, r24
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6c7c:	19 07       	cpc	r17, r25
    6c7e:	78 f4       	brcc	.+30     	; 0x6c9e <VirtualFAT_WriteBlock+0xa4>
    6c80:	80 91 e7 01 	lds	r24, 0x01E7
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
    6c84:	90 91 e8 01 	lds	r25, 0x01E8
    6c88:	81 50       	subi	r24, 0x01	; 1
    6c8a:	90 4c       	sbci	r25, 0xC0	; 192
    6c8c:	88 0f       	add	r24, r24
    6c8e:	99 1f       	adc	r25, r25
    6c90:	88 0f       	add	r24, r24
    6c92:	99 1f       	adc	r25, r25
    6c94:	08 17       	cp	r16, r24
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6c96:	19 07       	cpc	r17, r25
    6c98:	08 f0       	brcs	.+2      	; 0x6c9c <VirtualFAT_WriteBlock+0xa2>
    6c9a:	43 c0       	rjmp	.+134    	; 0x6d22 <VirtualFAT_WriteBlock+0x128>
    6c9c:	60 c0       	rjmp	.+192    	; 0x6d5e <VirtualFAT_WriteBlock+0x164>
    6c9e:	9c 01       	movw	r18, r24
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);
    6ca0:	2d 5c       	subi	r18, 0xCD	; 205
    6ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca4:	20 17       	cp	r18, r16

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6ca6:	31 07       	cpc	r19, r17
    6ca8:	58 f3       	brcs	.-42     	; 0x6c80 <VirtualFAT_WriteBlock+0x86>
    6caa:	78 01       	movw	r14, r16
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
	#else
	uint16_t FlashAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
    6cac:	e8 1a       	sub	r14, r24
    6cae:	f9 0a       	sbc	r15, r25
    6cb0:	fe 2c       	mov	r15, r14
    6cb2:	ee 24       	eor	r14, r14
    6cb4:	ff 0c       	add	r15, r15
    6cb6:	67 01       	movw	r12, r14
    6cb8:	8e ef       	ldi	r24, 0xFE	; 254
    6cba:	d8 1a       	sub	r13, r24
    6cbc:	47 01       	movw	r8, r14
    6cbe:	24 01       	movw	r4, r8
    6cc0:	61 2c       	mov	r6, r1
    6cc2:	71 2c       	mov	r7, r1
    6cc4:	c4 01       	movw	r24, r8
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
		{
			if ((FlashAddress % SPM_PAGESIZE) == 0)
    6cc6:	8f 77       	andi	r24, 0x7F	; 127
    6cc8:	99 27       	eor	r25, r25
    6cca:	89 2b       	or	r24, r25
    6ccc:	19 f4       	brne	.+6      	; 0x6cd4 <VirtualFAT_WriteBlock+0xda>
    6cce:	c3 01       	movw	r24, r6
			{
				/* Erase the given FLASH page, ready to be programmed */
				BootloaderAPI_ErasePage(FlashAddress);
    6cd0:	b2 01       	movw	r22, r4
    6cd2:	4b d2       	rcall	.+1174   	; 0x716a <BootloaderAPI_ErasePage>
    6cd4:	f4 01       	movw	r30, r8
    6cd6:	ee 19       	sub	r30, r14
    6cd8:	ff 09       	sbc	r31, r15
    6cda:	81 e0       	ldi	r24, 0x01	; 1
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	8c 0f       	add	r24, r28
    6ce0:	9d 1f       	adc	r25, r29
    6ce2:	e8 0f       	add	r30, r24
    6ce4:	f9 1f       	adc	r31, r25
    6ce6:	41 81       	ldd	r20, Z+1	; 0x01
    6ce8:	50 e0       	ldi	r21, 0x00	; 0
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
    6cea:	54 2f       	mov	r21, r20
    6cec:	44 27       	eor	r20, r20
    6cee:	80 81       	ld	r24, Z
    6cf0:	48 2b       	or	r20, r24
    6cf2:	c3 01       	movw	r24, r6
    6cf4:	b2 01       	movw	r22, r4
    6cf6:	5d d2       	rcall	.+1210   	; 0x71b2 <BootloaderAPI_FillWord>
    6cf8:	54 01       	movw	r10, r8
    6cfa:	92 e0       	ldi	r25, 0x02	; 2
    6cfc:	a9 0e       	add	r10, r25
			FlashAddress += 2;
    6cfe:	b1 1c       	adc	r11, r1
    6d00:	c5 01       	movw	r24, r10
    6d02:	8f 77       	andi	r24, 0x7F	; 127
    6d04:	99 27       	eor	r25, r25

			if ((FlashAddress % SPM_PAGESIZE) == 0)
    6d06:	89 2b       	or	r24, r25
    6d08:	31 f4       	brne	.+12     	; 0x6d16 <VirtualFAT_WriteBlock+0x11c>
    6d0a:	b4 01       	movw	r22, r8
    6d0c:	6e 57       	subi	r22, 0x7E	; 126
    6d0e:	71 09       	sbc	r23, r1
    6d10:	80 e0       	ldi	r24, 0x00	; 0
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	3c d2       	rcall	.+1144   	; 0x718e <BootloaderAPI_WritePage>
			{
				/* Write the filled FLASH page to memory */
				BootloaderAPI_WritePage(FlashAddress - SPM_PAGESIZE);
    6d16:	ac 14       	cp	r10, r12
    6d18:	bd 04       	cpc	r11, r13
    6d1a:	09 f4       	brne	.+2      	; 0x6d1e <VirtualFAT_WriteBlock+0x124>
    6d1c:	b1 cf       	rjmp	.-158    	; 0x6c80 <VirtualFAT_WriteBlock+0x86>
		}
	}
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
    6d1e:	45 01       	movw	r8, r10
    6d20:	ce cf       	rjmp	.-100    	; 0x6cbe <VirtualFAT_WriteBlock+0xc4>
    6d22:	9c 01       	movw	r18, r24
    6d24:	2f 5f       	subi	r18, 0xFF	; 255
    6d26:	3f 4f       	sbci	r19, 0xFF	; 255
    6d28:	20 17       	cp	r18, r16
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);
    6d2a:	31 07       	cpc	r19, r17
    6d2c:	c0 f0       	brcs	.+48     	; 0x6d5e <VirtualFAT_WriteBlock+0x164>
    6d2e:	08 1b       	sub	r16, r24

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6d30:	19 0b       	sbc	r17, r25
    6d32:	10 2f       	mov	r17, r16
    6d34:	00 27       	eor	r16, r16
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
    6d36:	11 0f       	add	r17, r17
    6d38:	fe 01       	movw	r30, r28
    6d3a:	31 96       	adiw	r30, 0x01	; 1
    6d3c:	7f 01       	movw	r14, r30
    6d3e:	c1 2c       	mov	r12, r1
    6d40:	d1 2c       	mov	r13, r1
    6d42:	f7 01       	movw	r30, r14
    6d44:	61 91       	ld	r22, Z+
    6d46:	7f 01       	movw	r14, r30
    6d48:	c6 01       	movw	r24, r12
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  WriteEEPROMByte((uint8_t*)EEPROMAddress++, BlockBuffer[i]);
    6d4a:	80 0f       	add	r24, r16
    6d4c:	91 1f       	adc	r25, r17
    6d4e:	67 d2       	rcall	.+1230   	; 0x721e <WriteEEPROMByte>
    6d50:	ff ef       	ldi	r31, 0xFF	; 255
    6d52:	cf 1a       	sub	r12, r31
    6d54:	df 0a       	sbc	r13, r31
    6d56:	c1 14       	cp	r12, r1
    6d58:	82 e0       	ldi	r24, 0x02	; 2
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
    6d5a:	d8 06       	cpc	r13, r24
    6d5c:	91 f7       	brne	.-28     	; 0x6d42 <VirtualFAT_WriteBlock+0x148>
    6d5e:	de 5f       	subi	r29, 0xFE	; 254
    6d60:	0f b6       	in	r0, 0x3f	; 63
    6d62:	f8 94       	cli
    6d64:	de bf       	out	0x3e, r29	; 62
    6d66:	0f be       	out	0x3f, r0	; 63
			ReadWriteFLASHFileBlock(BlockNumber, BlockBuffer, false);
			ReadWriteEEPROMFileBlock(BlockNumber, BlockBuffer, false);

			break;
	}
}
    6d68:	cd bf       	out	0x3d, r28	; 61
    6d6a:	df 91       	pop	r29
    6d6c:	cf 91       	pop	r28
    6d6e:	1f 91       	pop	r17
    6d70:	0f 91       	pop	r16
    6d72:	ff 90       	pop	r15
    6d74:	ef 90       	pop	r14
    6d76:	df 90       	pop	r13
    6d78:	cf 90       	pop	r12
    6d7a:	bf 90       	pop	r11
    6d7c:	af 90       	pop	r10
    6d7e:	9f 90       	pop	r9
    6d80:	8f 90       	pop	r8
    6d82:	7f 90       	pop	r7
    6d84:	6f 90       	pop	r6
    6d86:	5f 90       	pop	r5
    6d88:	4f 90       	pop	r4
    6d8a:	08 95       	ret

00006d8c <VirtualFAT_ReadBlock>:
    6d8c:	af 92       	push	r10
    6d8e:	bf 92       	push	r11
    6d90:	cf 92       	push	r12
    6d92:	df 92       	push	r13
    6d94:	ef 92       	push	r14
 *  host via the USB Mass Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to read.
 */
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
    6d96:	ff 92       	push	r15
    6d98:	0f 93       	push	r16
    6d9a:	1f 93       	push	r17
    6d9c:	cf 93       	push	r28
    6d9e:	df 93       	push	r29
    6da0:	cd b7       	in	r28, 0x3d	; 61
    6da2:	de b7       	in	r29, 0x3e	; 62
    6da4:	d2 50       	subi	r29, 0x02	; 2
    6da6:	0f b6       	in	r0, 0x3f	; 63
    6da8:	f8 94       	cli
    6daa:	de bf       	out	0x3e, r29	; 62
    6dac:	0f be       	out	0x3f, r0	; 63
    6dae:	cd bf       	out	0x3d, r28	; 61
    6db0:	9c 01       	movw	r18, r24
    6db2:	ae 01       	movw	r20, r28
    6db4:	4f 5f       	subi	r20, 0xFF	; 255
    6db6:	5f 4f       	sbci	r21, 0xFF	; 255
    6db8:	7a 01       	movw	r14, r20
    6dba:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));
    6dbc:	92 e0       	ldi	r25, 0x02	; 2
    6dbe:	fa 01       	movw	r30, r20
    6dc0:	ac 01       	movw	r20, r24
    6dc2:	11 92       	st	Z+, r1
    6dc4:	41 50       	subi	r20, 0x01	; 1
    6dc6:	50 40       	sbci	r21, 0x00	; 0
    6dc8:	e1 f7       	brne	.-8      	; 0x6dc2 <VirtualFAT_ReadBlock+0x36>
    6dca:	23 30       	cpi	r18, 0x03	; 3
    6dcc:	31 05       	cpc	r19, r1
    6dce:	c0 f4       	brcc	.+48     	; 0x6e00 <VirtualFAT_ReadBlock+0x74>
    6dd0:	21 30       	cpi	r18, 0x01	; 1
    6dd2:	31 05       	cpc	r19, r1

	switch (BlockNumber)
    6dd4:	08 f5       	brcc	.+66     	; 0x6e18 <VirtualFAT_ReadBlock+0x8c>
    6dd6:	8e e3       	ldi	r24, 0x3E	; 62
    6dd8:	e3 e4       	ldi	r30, 0x43	; 67
    6dda:	f2 e0       	ldi	r31, 0x02	; 2
    6ddc:	d7 01       	movw	r26, r14
    6dde:	01 90       	ld	r0, Z+
	{
		case DISK_BLOCK_BootBlock:
			memcpy(BlockBuffer, &BootBlock, sizeof(FATBootBlock_t));
    6de0:	0d 92       	st	X+, r0
    6de2:	8a 95       	dec	r24
    6de4:	e1 f7       	brne	.-8      	; 0x6dde <VirtualFAT_ReadBlock+0x52>
    6de6:	85 e5       	ldi	r24, 0x55	; 85
    6de8:	c1 50       	subi	r28, 0x01	; 1
    6dea:	de 4f       	sbci	r29, 0xFE	; 254
    6dec:	88 83       	st	Y, r24
    6dee:	cf 5f       	subi	r28, 0xFF	; 255

			/* Add the magic signature to the end of the block */
			BlockBuffer[SECTOR_SIZE_BYTES - 2] = 0x55;
    6df0:	d1 40       	sbci	r29, 0x01	; 1
    6df2:	8a ea       	ldi	r24, 0xAA	; 170
    6df4:	c0 50       	subi	r28, 0x00	; 0
    6df6:	de 4f       	sbci	r29, 0xFE	; 254
    6df8:	88 83       	st	Y, r24
    6dfa:	c0 50       	subi	r28, 0x00	; 0
			BlockBuffer[SECTOR_SIZE_BYTES - 1] = 0xAA;
    6dfc:	d2 40       	sbci	r29, 0x02	; 2
    6dfe:	8a c0       	rjmp	.+276    	; 0x6f14 <VirtualFAT_ReadBlock+0x188>
    6e00:	23 30       	cpi	r18, 0x03	; 3
    6e02:	31 05       	cpc	r19, r1
    6e04:	91 f5       	brne	.+100    	; 0x6e6a <VirtualFAT_ReadBlock+0xde>
    6e06:	80 ea       	ldi	r24, 0xA0	; 160

			break;
    6e08:	ed e4       	ldi	r30, 0x4D	; 77
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));

	switch (BlockNumber)
    6e0a:	f1 e0       	ldi	r31, 0x01	; 1
    6e0c:	d7 01       	movw	r26, r14
    6e0e:	01 90       	ld	r0, Z+
			UpdateFAT12ClusterChain(BlockBuffer, *EEPROMFileStartCluster, FILE_CLUSTERS(EEPROM_FILE_SIZE_BYTES));

			break;

		case DISK_BLOCK_RootFilesBlock:
			memcpy(BlockBuffer, FirmwareFileEntries, sizeof(FirmwareFileEntries));
    6e10:	0d 92       	st	X+, r0
    6e12:	8a 95       	dec	r24
    6e14:	e1 f7       	brne	.-8      	; 0x6e0e <VirtualFAT_ReadBlock+0x82>
    6e16:	7e c0       	rjmp	.+252    	; 0x6f14 <VirtualFAT_ReadBlock+0x188>
    6e18:	48 ef       	ldi	r20, 0xF8	; 248
    6e1a:	5f e0       	ldi	r21, 0x0F	; 15
    6e1c:	60 e0       	ldi	r22, 0x00	; 0
    6e1e:	70 e0       	ldi	r23, 0x00	; 0

			break;
    6e20:	c7 01       	movw	r24, r14
			break;

		case DISK_BLOCK_FATBlock1:
		case DISK_BLOCK_FATBlock2:
			/* Cluster 0: Media type/Reserved */
			UpdateFAT12ClusterEntry(BlockBuffer, 0, 0xF00 | BootBlock.MediaDescriptor);
    6e22:	cd de       	rcall	.-614    	; 0x6bbe <UpdateFAT12ClusterEntry>
    6e24:	4f ef       	ldi	r20, 0xFF	; 255
    6e26:	5f e0       	ldi	r21, 0x0F	; 15
    6e28:	61 e0       	ldi	r22, 0x01	; 1
    6e2a:	70 e0       	ldi	r23, 0x00	; 0
    6e2c:	c7 01       	movw	r24, r14
    6e2e:	c7 de       	rcall	.-626    	; 0x6bbe <UpdateFAT12ClusterEntry>

			/* Cluster 1: Reserved */
			UpdateFAT12ClusterEntry(BlockBuffer, 1, 0xFFF);
    6e30:	60 91 a7 01 	lds	r22, 0x01A7
    6e34:	70 91 a8 01 	lds	r23, 0x01A8
    6e38:	10 e0       	ldi	r17, 0x00	; 0
    6e3a:	cb 01       	movw	r24, r22
    6e3c:	01 96       	adiw	r24, 0x01	; 1

			/* Cluster 2 onwards: Cluster chain of FLASH.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *FLASHFileStartCluster, FILE_CLUSTERS(FLASH_FILE_SIZE_BYTES));
    6e3e:	6c 01       	movw	r12, r24
    6e40:	1c 30       	cpi	r17, 0x0C	; 12
    6e42:	11 f0       	breq	.+4      	; 0x6e48 <VirtualFAT_ReadBlock+0xbc>
    6e44:	ac 01       	movw	r20, r24
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
    6e46:	02 c0       	rjmp	.+4      	; 0x6e4c <VirtualFAT_ReadBlock+0xc0>
    6e48:	4f ef       	ldi	r20, 0xFF	; 255
    6e4a:	5f e0       	ldi	r21, 0x0F	; 15
    6e4c:	c7 01       	movw	r24, r14
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
    6e4e:	b7 de       	rcall	.-658    	; 0x6bbe <UpdateFAT12ClusterEntry>
    6e50:	1f 5f       	subi	r17, 0xFF	; 255
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;
    6e52:	b6 01       	movw	r22, r12
    6e54:	1d 30       	cpi	r17, 0x0D	; 13

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;
    6e56:	89 f7       	brne	.-30     	; 0x6e3a <VirtualFAT_ReadBlock+0xae>
    6e58:	60 91 e7 01 	lds	r22, 0x01E7

		UpdateFAT12ClusterEntry(FATTable, CurrentCluster, NextCluster);
    6e5c:	70 91 e8 01 	lds	r23, 0x01E8
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
    6e60:	4f ef       	ldi	r20, 0xFF	; 255
    6e62:	5f e0       	ldi	r21, 0x0F	; 15
    6e64:	c7 01       	movw	r24, r14
    6e66:	ab de       	rcall	.-682    	; 0x6bbe <UpdateFAT12ClusterEntry>

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;

		UpdateFAT12ClusterEntry(FATTable, CurrentCluster, NextCluster);
    6e68:	55 c0       	rjmp	.+170    	; 0x6f14 <VirtualFAT_ReadBlock+0x188>
    6e6a:	80 91 a7 01 	lds	r24, 0x01A7
    6e6e:	90 91 a8 01 	lds	r25, 0x01A8
    6e72:	81 50       	subi	r24, 0x01	; 1
    6e74:	90 4c       	sbci	r25, 0xC0	; 192
    6e76:	88 0f       	add	r24, r24
    6e78:	99 1f       	adc	r25, r25
    6e7a:	88 0f       	add	r24, r24
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
    6e7c:	99 1f       	adc	r25, r25
    6e7e:	28 17       	cp	r18, r24
    6e80:	39 07       	cpc	r19, r25
    6e82:	70 f4       	brcc	.+28     	; 0x6ea0 <VirtualFAT_ReadBlock+0x114>
    6e84:	80 91 e7 01 	lds	r24, 0x01E7
    6e88:	90 91 e8 01 	lds	r25, 0x01E8
    6e8c:	81 50       	subi	r24, 0x01	; 1
    6e8e:	90 4c       	sbci	r25, 0xC0	; 192
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6e90:	88 0f       	add	r24, r24
    6e92:	99 1f       	adc	r25, r25
    6e94:	88 0f       	add	r24, r24
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
    6e96:	99 1f       	adc	r25, r25
    6e98:	28 17       	cp	r18, r24
    6e9a:	39 07       	cpc	r19, r25
    6e9c:	e8 f4       	brcc	.+58     	; 0x6ed8 <VirtualFAT_ReadBlock+0x14c>
    6e9e:	3a c0       	rjmp	.+116    	; 0x6f14 <VirtualFAT_ReadBlock+0x188>
    6ea0:	ac 01       	movw	r20, r24
    6ea2:	4d 5c       	subi	r20, 0xCD	; 205
    6ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea6:	42 17       	cp	r20, r18
    6ea8:	53 07       	cpc	r21, r19
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6eaa:	60 f3       	brcs	.-40     	; 0x6e84 <VirtualFAT_ReadBlock+0xf8>
    6eac:	f9 01       	movw	r30, r18
    6eae:	e8 1b       	sub	r30, r24
    6eb0:	f9 0b       	sbc	r31, r25
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);
    6eb2:	cf 01       	movw	r24, r30
    6eb4:	98 2f       	mov	r25, r24
    6eb6:	88 27       	eor	r24, r24

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6eb8:	99 0f       	add	r25, r25
    6eba:	ae 01       	movw	r20, r28
    6ebc:	4f 5f       	subi	r20, 0xFF	; 255
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
	#else
	uint16_t FlashAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
    6ebe:	5d 4f       	sbci	r21, 0xFD	; 253
    6ec0:	d7 01       	movw	r26, r14
    6ec2:	8e 19       	sub	r24, r14
    6ec4:	9f 09       	sbc	r25, r15
    6ec6:	fc 01       	movw	r30, r24
    6ec8:	ea 0f       	add	r30, r26
    6eca:	fb 1f       	adc	r31, r27
    6ecc:	e4 91       	lpm	r30, Z
    6ece:	ed 93       	st	X+, r30
    6ed0:	a4 17       	cp	r26, r20
    6ed2:	b5 07       	cpc	r27, r21
    6ed4:	c1 f7       	brne	.-16     	; 0x6ec6 <VirtualFAT_ReadBlock+0x13a>
    6ed6:	d6 cf       	rjmp	.-84     	; 0x6e84 <VirtualFAT_ReadBlock+0xf8>
    6ed8:	ac 01       	movw	r20, r24
    6eda:	4f 5f       	subi	r20, 0xFF	; 255
    6edc:	5f 4f       	sbci	r21, 0xFF	; 255
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		{
			#if (FLASHEND > 0xFFFF)
			  BlockBuffer[i] = pgm_read_byte_far(FlashAddress++);
			#else
			  BlockBuffer[i] = pgm_read_byte(FlashAddress++);
    6ede:	42 17       	cp	r20, r18
    6ee0:	53 07       	cpc	r21, r19
	#endif

	if (Read)
	{
		/* Read out the mapped block of data from the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
    6ee2:	c0 f0       	brcs	.+48     	; 0x6f14 <VirtualFAT_ReadBlock+0x188>
    6ee4:	89 01       	movw	r16, r18
    6ee6:	08 1b       	sub	r16, r24
    6ee8:	19 0b       	sbc	r17, r25
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);
    6eea:	10 2f       	mov	r17, r16
    6eec:	00 27       	eor	r16, r16
    6eee:	11 0f       	add	r17, r17

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
    6ef0:	5e 01       	movw	r10, r28
    6ef2:	ff ef       	ldi	r31, 0xFF	; 255
    6ef4:	af 1a       	sub	r10, r31
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
    6ef6:	fd ef       	ldi	r31, 0xFD	; 253
    6ef8:	bf 0a       	sbc	r11, r31
    6efa:	67 01       	movw	r12, r14
    6efc:	0e 19       	sub	r16, r14
    6efe:	1f 09       	sbc	r17, r15
    6f00:	c8 01       	movw	r24, r16
    6f02:	8c 0d       	add	r24, r12
    6f04:	9d 1d       	adc	r25, r13
    6f06:	8a d1       	rcall	.+788    	; 0x721c <ReadEEPROMByte>
    6f08:	f6 01       	movw	r30, r12
    6f0a:	81 93       	st	Z+, r24
    6f0c:	6f 01       	movw	r12, r30
    6f0e:	ea 15       	cp	r30, r10
    6f10:	fb 05       	cpc	r31, r11

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
    6f12:	b1 f7       	brne	.-20     	; 0x6f00 <VirtualFAT_ReadBlock+0x174>
    6f14:	40 e0       	ldi	r20, 0x00	; 0
    6f16:	50 e0       	ldi	r21, 0x00	; 0
    6f18:	60 e0       	ldi	r22, 0x00	; 0
    6f1a:	72 e0       	ldi	r23, 0x02	; 2
    6f1c:	c7 01       	movw	r24, r14
    6f1e:	be d1       	rcall	.+892    	; 0x729c <Endpoint_Write_Stream_LE>
    6f20:	80 91 e8 00 	lds	r24, 0x00E8
	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
    6f24:	8e 77       	andi	r24, 0x7E	; 126
    6f26:	80 93 e8 00 	sts	0x00E8, r24

			break;
	}

	/* Write the entire read block Buffer to the host */
	Endpoint_Write_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
    6f2a:	de 5f       	subi	r29, 0xFE	; 254
    6f2c:	0f b6       	in	r0, 0x3f	; 63
    6f2e:	f8 94       	cli
    6f30:	de bf       	out	0x3e, r29	; 62
    6f32:	0f be       	out	0x3f, r0	; 63
    6f34:	cd bf       	out	0x3d, r28	; 61
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6f36:	df 91       	pop	r29
    6f38:	cf 91       	pop	r28
    6f3a:	1f 91       	pop	r17
    6f3c:	0f 91       	pop	r16
    6f3e:	ff 90       	pop	r15
	Endpoint_ClearIN();
}
    6f40:	ef 90       	pop	r14
    6f42:	df 90       	pop	r13
    6f44:	cf 90       	pop	r12
    6f46:	bf 90       	pop	r11
    6f48:	af 90       	pop	r10
    6f4a:	08 95       	ret

Disassembly of section .boot_aux_trampoline:

00006800 <Boot_AUX_Trampoline>:
; Trampoline to jump over the AUX bootloader section to the start of the bootloader,
; on devices where an AUX bootloader section is used.
.section .boot_aux_trampoline, "ax"
.global Boot_AUX_Trampoline
Boot_AUX_Trampoline:
	jmp BOOT_START_ADDR
    6800:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>
